{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Elite Scholar - School Management System\n\n## Overview\n\nElite Scholar is a comprehensive School Management System MVP built as a full-stack web application. The platform provides invoice management, payment tracking, school administration, and feature management capabilities for educational institutions. The system supports multiple school types (K12 and Nigerian curriculum) with role-based access control spanning from super administrators to individual students and parents.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Login Credentials\n\n**Super Admin Account:**\n- Email: admin@elitescholar.com\n- Password: SuperAdmin123!\n- Role: Super Administrator with full system access\n\n**Demo School Admin Account:**\n- Email: schooladmin@demo.com\n- Password: SchoolAdmin123!\n- Role: School Administrator with school-level management access\n\n**Demo Teacher Account:**\n- Email: teacher@demo.com\n- Password: Teacher123!\n- Role: Teacher with classroom management access\n\n**Demo Student Account:**\n- Email: student@demo.com\n- Password: Student123!\n- Role: Student with limited portal access\n\n**Demo Parent Account:**\n- Email: parent@demo.com\n- Password: Parent123!\n- Role: Parent with child monitoring access\n\nUse the Super Admin credentials to access the main dashboard and manage schools, invoices, and feature toggles. Other accounts can be used to test role-based access controls.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built using **Vite + React + TypeScript** with a component-based architecture:\n\n- **UI Framework**: React with TypeScript for type safety\n- **Styling**: TailwindCSS with shadcn/ui component library for consistent design\n- **Routing**: Wouter for lightweight client-side routing with role-based route protection\n- **State Management**: \n  - Zustand for local UI state (auth store)\n  - React Query (TanStack Query) for server state management and caching\n- **Code Splitting**: React.lazy + Suspense for route-level code splitting\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\nThe server-side follows a **Node.js + Express + TypeScript** REST API pattern:\n\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL\n- **Authentication**: JWT-based authentication with role-based access control\n- **File Uploads**: Multer with Cloudinary integration for image storage\n- **Email Service**: Nodemailer for transactional emails\n- **Middleware**: Custom auth, feature toggle, and payment verification middleware\n\n### Database Design\nPostgreSQL database with Drizzle ORM featuring:\n\n- **User Management**: Multi-role user system (superadmin, school_admin, branch_admin, teacher, student, parent)\n- **School Structure**: Schools with branches, grade sections with section references based on curriculum type\n- **Automatic Grade Section Creation**: When schools are created, grade sections are automatically generated with section IDs\n- **Feature System**: Modular features with per-school toggles\n- **Invoice System**: Complete invoicing with line items, unit measurements, and negotiated pricing\n- **Subscription Management**: School payment status and access control\n\n### Authentication & Authorization\nJWT-based authentication system with:\n\n- **Role-based Access Control**: Six distinct user roles with hierarchical permissions\n- **School Association**: Users tied to specific schools/branches for data isolation\n- **Feature Toggles**: Per-school feature enablement stored in database\n- **Payment Verification**: Middleware to block access for unpaid schools\n\n### Modular Architecture\nThe system is designed with independent modules:\n\n- **Super Admin Module**: School management, invoice creation, feature toggles\n- **Invoice Module**: Enhanced invoice generation with unit measurements, negotiated pricing, payment tracking, email notifications\n- **Grade Management**: Automatic grade section creation with section IDs for proper student organization\n- **Auth Module**: User authentication, role management, password policies\n- Each module has dedicated routes, database models, and frontend components\n\n### Recent Enhancements (August 2025)\n- **Enhanced Grade Section Management**: Added section_id field to grade_sections table for proper referencing\n- **Automatic Grade Creation**: Schools now automatically generate appropriate grade sections based on curriculum type (K12 vs Nigerian)\n- **Enhanced Invoice System**: Added unit measurements (per_student, per_staff, etc.), negotiated pricing, and date ranges\n- **Section-Based Organization**: Grade sections now include multiple sections (A, B, C) per grade for better student organization\n- **Enhanced Asset Management System (August 13, 2025)**:\n  - Comprehensive database schema with assets, asset_purchases, and asset_assignments tables\n  - Advanced quantity tracking with total_quantity and available_quantity fields\n  - Purchase history with accordion view for different price periods\n  - Assignment management with location dropdown populated from grade_sections table\n  - Enhanced UI with separate dialogs for assignments and purchase additions\n  - Complete CRUD operations through enhanced-asset-setup.tsx interface\n  - Full database integration with proper API routes and storage operations\n- **Application Debugging & Fixes (August 13, 2025)**:\n  - Fixed critical import path error in block-manager.tsx (corrected @/store/authStore to @/store/auth)\n  - Resolved API request call signature issues for building CRUD operations\n  - Fixed form field type compatibility issues with nullable values\n  - Corrected TypeScript type annotations for query responses\n  - Successfully restored application startup and functionality\n- **Supply Management System Implementation (August 13, 2025)**:\n  - Created comprehensive supply management database schema with school_supplies, supply_purchases, and supply_usage tables\n  - Built complete API routes for CRUD operations on supplies, purchases, and usage tracking\n  - Developed full-featured Supply Setup page at /school/school-setup/supply-setup\n  - Implemented supply categories (Uniforms, Textbooks, Stationery, Sports, Cleaning, Teaching Materials, Laboratory, Medical, Kitchen, Other)\n  - Added purchase tracking with price history and supplier management\n  - Created usage tracking system with different usage types (issued, sold, consumed, lost, damaged)\n  - Built inventory management with stock level monitoring and visual alerts\n  - Added comprehensive filtering, search functionality, and statistics dashboard\n  - Integrated with existing authentication and school management system with proper schoolId linking\n  - Resolved database table creation issues and successfully deployed supply management functionality\n\n## External Dependencies\n\n### Database & ORM\n- **PostgreSQL**: Primary database via DATABASE_URL environment variable\n- **Neon Database**: Serverless PostgreSQL provider (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations with schema migrations\n\n### Cloud Services\n- **Cloudinary**: Image upload and transformation service\n  - Cloud storage for school logos and profile images\n  - Automatic image optimization and transformations\n  - Requires CLOUDINARY_URL, CLOUDINARY_API_KEY, CLOUDINARY_API_SECRET\n\n### Email Service\n- **Nodemailer**: Email delivery for notifications and invoices\n- **SMTP Configuration**: Configurable email provider (defaults to Gmail)\n- Environment variables: SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS\n\n### UI Components & Styling\n- **shadcn/ui**: Pre-built accessible React components\n- **Radix UI**: Headless UI primitives for complex components\n- **TailwindCSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n\n### Development & Build Tools\n- **Vite**: Fast development server and build tool\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Replit Integration**: Development environment optimizations\n\n### Authentication & Security\n- **bcrypt**: Password hashing for secure user authentication\n- **jsonwebtoken**: JWT token generation and verification\n- **cors**: Cross-origin request handling\n\n### Form & Data Validation\n- **Zod**: Schema validation for forms and API endpoints\n- **React Hook Form**: Form state management with validation\n- **@hookform/resolvers**: Zod integration for React Hook Form","size_bytes":8446},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"./storage\";\nimport superadminRoutes from \"./controllers/superadmin\";\nimport invoiceRoutes from \"./controllers/invoice\";\nimport enhancedInvoiceRoutes from \"./controllers/enhanced-invoice\";\nimport { login, getCurrentUser, updateProfile } from \"./controllers/auth\";\nimport { connectionTestService } from \"./services/connection-test\";\nimport { cloudinaryService } from \"./services/cloudinary\";\nimport multer from \"multer\";\nimport { authMiddleware, schoolAdminOnly } from \"./middleware/auth\";\nimport type { User } from \"@shared/schema\";\n\n// Extend Express Request interface to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", login);\n\n  // Get current user route\n  app.get(\"/api/auth/me\", getCurrentUser);\n\n  // Get enabled school features for invoice creation\n  app.get(\"/api/schools/:schoolId/enabled-features\", async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const enabledFeatures = await storage.getEnabledSchoolFeatures(schoolId);\n      res.json(enabledFeatures);\n    } catch (error) {\n      console.error(\"Get enabled school features error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get school features with menu links for school dashboard\n  app.get(\"/api/schools/features\", async (req, res) => {\n    try {\n      const schoolId = req.query.schoolId as string;\n      if (!schoolId) {\n        return res.status(400).json({ message: \"School ID is required\" });\n      }\n\n      const schoolFeatures = await storage.getSchoolFeatures(schoolId);\n      \n      // Filter enabled features and include menu links from feature definition\n      const enabledFeaturesWithMenuLinks = schoolFeatures\n        .filter(sf => sf.enabled && sf.feature && sf.feature.key)\n        .map(sf => ({\n          ...sf.feature,\n          enabled: sf.enabled,\n          menuLinks: sf.feature.menuLinks || []\n        }));\n\n      console.log(`Retrieved ${enabledFeaturesWithMenuLinks.length} enabled features with menu links for school ${schoolId}`);\n      res.json(enabledFeaturesWithMenuLinks);\n    } catch (error) {\n      console.error(\"Get school features error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n\n\n  // Super Admin routes\n  app.use(\"/api/superadmin\", superadminRoutes);\n\n  // Configure multer for file uploads\n  const upload = multer({ \n    storage: multer.memoryStorage(),\n    limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n  });\n\n  // App Config routes (renamed from settings to profile)\n  app.get(\"/api/superadmin/config\", async (req, res) => {\n    try {\n      const config = await storage.getAppConfig();\n      \n      // Don't send sensitive data to frontend\n      const safeConfig = config ? {\n        ...config,\n        sendgridApiKey: config.sendgridApiKey ? '••••••••' : '',\n        cloudinaryApiSecret: config.cloudinaryApiSecret ? '••••••••' : '',\n        twilioAuthToken: config.twilioAuthToken ? '••••••••' : '',\n        smtpPassword: config.smtpPassword ? '••••••••' : '',\n      } : null;\n      \n      res.json(safeConfig);\n    } catch (error) {\n      console.error(\"Get app config error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/superadmin/config\", async (req, res) => {\n    try {\n      const configData = req.body;\n      \n      // Filter out empty passwords/secrets to prevent overwriting\n      Object.keys(configData).forEach(key => {\n        if (key.includes('Password') || key.includes('Secret') || key.includes('Token') || key.includes('Key')) {\n          if (configData[key] === '••••••••' || configData[key] === '') {\n            delete configData[key];\n          }\n        }\n      });\n      \n      const updatedConfig = await storage.updateAppConfig(configData);\n      \n      // Return safe config without secrets\n      const safeConfig = {\n        ...updatedConfig,\n        sendgridApiKey: updatedConfig.sendgridApiKey ? '••••••••' : '',\n        cloudinaryApiSecret: updatedConfig.cloudinaryApiSecret ? '••••••••' : '',\n        twilioAuthToken: updatedConfig.twilioAuthToken ? '••••••••' : '',\n        smtpPassword: updatedConfig.smtpPassword ? '••••••••' : '',\n      };\n      \n      res.json(safeConfig);\n    } catch (error) {\n      console.error(\"Update app config error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Test service connections\n  app.post(\"/api/superadmin/config/test-connection\", async (req, res) => {\n    try {\n      const { service, config } = req.body;\n      \n      let result;\n      switch (service) {\n        case 'sendgrid':\n          result = await connectionTestService.testSendGrid(config.sendgridApiKey);\n          break;\n        case 'twilio':\n          result = await connectionTestService.testTwilio(\n            config.twilioAccountSid, \n            config.twilioAuthToken, \n            config.twilioPhoneNumber\n          );\n          break;\n        case 'cloudinary':\n          result = await connectionTestService.testCloudinary(\n            config.cloudinaryCloudName,\n            config.cloudinaryApiKey,\n            config.cloudinaryApiSecret\n          );\n          break;\n        case 'smtp':\n          result = await connectionTestService.testSMTP(\n            config.smtpHost,\n            config.smtpPort,\n            config.smtpUser,\n            config.smtpPassword,\n            config.smtpSecure\n          );\n          break;\n        default:\n          return res.status(400).json({ message: 'Invalid service' });\n      }\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Test connection error:\", error);\n      res.status(500).json({ message: \"Connection test failed\" });\n    }\n  });\n\n  // Test all services at once\n  app.post(\"/api/superadmin/config/test-all\", async (req, res) => {\n    try {\n      const config = await storage.getAppConfig();\n      if (!config) {\n        return res.status(404).json({ message: \"App config not found\" });\n      }\n      \n      const results = await connectionTestService.testAllServices(config);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Test all connections error:\", error);\n      res.status(500).json({ message: \"Connection tests failed\" });\n    }\n  });\n\n  // Upload invoice assets via Cloudinary\n  app.post(\"/api/superadmin/config/upload-asset\", upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file provided\" });\n      }\n\n      const { type, schoolId } = req.body;\n      \n      if (!['logo', 'watermark', 'background'].includes(type)) {\n        return res.status(400).json({ message: \"Invalid asset type\" });\n      }\n\n      const result = await cloudinaryService.uploadInvoiceAsset(\n        req.file.buffer,\n        type,\n        schoolId\n      );\n\n      res.json({\n        url: result.url,\n        publicId: result.publicId,\n        type,\n        size: result.bytes\n      });\n    } catch (error) {\n      console.error(\"Upload asset error:\", error);\n      res.status(500).json({ message: \"Upload failed\" });\n    }\n  });\n\n  // Delete Cloudinary asset\n  app.delete(\"/api/superadmin/config/delete-asset/:publicId\", async (req, res) => {\n    try {\n      const { publicId } = req.params;\n      const success = await cloudinaryService.deleteAsset(publicId);\n      \n      if (success) {\n        res.json({ message: \"Asset deleted successfully\" });\n      } else {\n        res.status(400).json({ message: \"Failed to delete asset\" });\n      }\n    } catch (error) {\n      console.error(\"Delete asset error:\", error);\n      res.status(500).json({ message: \"Delete failed\" });\n    }\n  });\n\n  // Get connection status summary\n  app.get(\"/api/superadmin/config/status\", async (req, res) => {\n    try {\n      const config = await storage.getAppConfig();\n      if (!config) {\n        return res.json({ services: [] });\n      }\n\n      const services = [\n        {\n          name: 'SendGrid',\n          status: config.sendgridStatus,\n          lastChecked: config.sendgridLastChecked,\n          error: config.sendgridErrorMessage,\n          configured: !!config.sendgridApiKey\n        },\n        {\n          name: 'Twilio SMS',\n          status: config.twilioSmsStatus,\n          lastChecked: config.twilioLastChecked,\n          error: config.twilioErrorMessage,\n          configured: !!(config.twilioAccountSid && config.twilioAuthToken)\n        },\n        {\n          name: 'Twilio WhatsApp',\n          status: config.twilioWhatsappStatus,\n          lastChecked: config.twilioLastChecked,\n          error: config.twilioErrorMessage,\n          configured: !!(config.twilioAccountSid && config.twilioAuthToken && config.twilioWhatsappNumber)\n        },\n        {\n          name: 'Cloudinary',\n          status: config.cloudinaryStatus,\n          lastChecked: config.cloudinaryLastChecked,\n          error: config.cloudinaryErrorMessage,\n          configured: !!(config.cloudinaryCloudName && config.cloudinaryApiKey && config.cloudinaryApiSecret)\n        },\n        {\n          name: 'SMTP',\n          status: config.smtpStatus,\n          lastChecked: config.smtpLastChecked,\n          error: config.smtpErrorMessage,\n          configured: !!(config.smtpHost && config.smtpUser && config.smtpPassword)\n        }\n      ];\n\n      res.json({ services });\n    } catch (error) {\n      console.error(\"Get status error:\", error);\n      res.status(500).json({ message: \"Failed to get status\" });\n    }\n  });\n\n  // Invoice routes  \n  app.use(\"/api/invoices\", invoiceRoutes);\n  \n  // Enhanced Invoice routes\n  app.use(\"/api/invoices/enhanced\", enhancedInvoiceRoutes);\n\n  // Features routes\n  app.use(\"/api/features\", (await import(\"./controllers/features\")).default);\n\n  // Analytics routes\n  app.use(\"/api/analytics\", (await import(\"./controllers/analytics\")).default);\n\n  // Database viewer endpoints for Super Admin (using route delegation)\n  app.use(\"/api/superadmin/database\", superadminRoutes);\n\n  // Invoice template routes\n  app.use(\"/api/invoice-templates\", (await import(\"./controllers/invoice-templates\")).default);\n\n  // Invoice asset routes\n  app.use(\"/api/invoice-assets\", (await import(\"./controllers/invoice-assets\")).default);\n  \n  // Database management routes\n  const { databaseRoutes } = await import(\"./routes/database\");\n  app.use(\"/api/database\", databaseRoutes);\n\n  // School dashboard routes\n  app.use(\"/api/schools/dashboard\", (await import(\"./controllers/school-dashboard\")).default);\n  app.use(\"/api/schools\", (await import(\"./controllers/school-dashboard\")).default);\n\n  // Staff management routes  \n  app.use(\"/api/schools\", (await import(\"./controllers/staff-management\")).default);\n\n  // School setup routes\n  app.use(\"/api/schools/setup\", (await import(\"./controllers/school-setup\")).default);\n\n  // Enhanced Asset routes for school asset management\n  app.get(\"/api/schools/:schoolId/assets\", authMiddleware, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const { category, condition, isActive } = req.query;\n      \n      // Verify school access for non-superadmin users\n      if (req.user?.role !== 'superadmin' && req.user?.schoolId !== schoolId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const filters: any = {};\n      if (category) filters.category = category as string;\n      if (condition) filters.condition = condition as string;\n      if (isActive !== undefined) filters.isActive = isActive === 'true';\n      \n      const assets = await storage.getAssets(schoolId, filters);\n      res.json(assets);\n    } catch (error) {\n      console.error(\"Get assets error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/schools/:schoolId/grade-sections\", authMiddleware, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      \n      // Verify school access for non-superadmin users\n      if (req.user?.role !== 'superadmin' && req.user?.schoolId !== schoolId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const gradeSections = await storage.getGradeSections(schoolId);\n      res.json(gradeSections);\n    } catch (error) {\n      console.error(\"Get grade sections error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/assets/:id\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const asset = await storage.getAssetById(id);\n      \n      if (!asset) {\n        return res.status(404).json({ message: \"Asset not found\" });\n      }\n      \n      res.json(asset);\n    } catch (error) {\n      console.error(\"Get asset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/assets\", authMiddleware, schoolAdminOnly, upload.single('image'), async (req, res) => {\n    try {\n      let assetData;\n      \n      // Handle both JSON and multipart form data\n      if (req.body.assetData) {\n        // Multipart form data (with image upload)\n        assetData = JSON.parse(req.body.assetData);\n      } else {\n        // Regular JSON data (no image)\n        assetData = req.body;\n      }\n      \n      // Validate required fields\n      if (!assetData.schoolId || !assetData.name || !assetData.category || !assetData.type) {\n        return res.status(400).json({ message: \"Required fields missing\" });\n      }\n\n      // Handle image upload if provided\n      let imageUrl = null;\n      if (req.file) {\n        try {\n          const uploadResult = await cloudinaryService.uploadImage(req.file.buffer, {\n            folder: `assets/${assetData.schoolId}`,\n            transformation: [\n              { width: 800, height: 600, crop: 'limit' },\n              { quality: 'auto', fetch_format: 'auto' }\n            ]\n          });\n          imageUrl = uploadResult.url;\n        } catch (uploadError) {\n          console.error('Image upload failed:', uploadError);\n          // Continue without image if upload fails\n        }\n      }\n\n      const asset = await storage.createAsset({\n        ...assetData,\n        imageUrl,\n        createdBy: assetData.createdBy || assetData.schoolId,\n        purchasePrice: assetData.purchasePrice ? parseFloat(assetData.purchasePrice) : null,\n        currentValue: assetData.currentValue ? parseFloat(assetData.currentValue) : null,\n        purchaseDate: assetData.purchaseDate ? new Date(assetData.purchaseDate) : null,\n        warrantyExpiry: assetData.warrantyExpiry ? new Date(assetData.warrantyExpiry) : null,\n      });\n\n      res.status(201).json(asset);\n    } catch (error) {\n      console.error(\"Create asset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/assets/:id\", authMiddleware, schoolAdminOnly, upload.single('image'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      let assetData;\n      \n      // Handle both JSON and multipart form data\n      if (req.body.assetData) {\n        // Multipart form data (with image upload)\n        assetData = JSON.parse(req.body.assetData);\n      } else {\n        // Regular JSON data (no image)\n        assetData = req.body;\n      }\n\n      // Handle image upload if provided\n      let imageUrl = assetData.imageUrl; // Keep existing image by default\n      if (req.file) {\n        try {\n          const uploadResult = await cloudinaryService.uploadImage(req.file.buffer, {\n            folder: `assets/${assetData.schoolId}`,\n            transformation: [\n              { width: 800, height: 600, crop: 'limit' },\n              { quality: 'auto', fetch_format: 'auto' }\n            ]\n          });\n          imageUrl = uploadResult.url;\n        } catch (uploadError) {\n          console.error('Image upload failed:', uploadError);\n        }\n      }\n\n      const asset = await storage.updateAsset(id, {\n        ...assetData,\n        imageUrl,\n        purchasePrice: assetData.purchasePrice ? parseFloat(assetData.purchasePrice) : null,\n        currentValue: assetData.currentValue ? parseFloat(assetData.currentValue) : null,\n        purchaseDate: assetData.purchaseDate ? new Date(assetData.purchaseDate) : null,\n        warrantyExpiry: assetData.warrantyExpiry ? new Date(assetData.warrantyExpiry) : null,\n      });\n\n      res.json(asset);\n    } catch (error) {\n      console.error(\"Update asset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/assets/:id\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteAsset(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete asset error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Enhanced asset routes for purchase history and assignments\n  app.post(\"/api/assets/:id/purchases\", authMiddleware, async (req, res) => {\n    try {\n      const { id: assetId } = req.params;\n      const purchaseData = req.body;\n      \n      // Validate numeric inputs to prevent overflow\n      const purchasePrice = Math.min(parseFloat(purchaseData.purchasePrice) || 0, 99999999.99);\n      const quantity = Math.max(1, Math.min(parseInt(purchaseData.quantity) || 1, 9999));\n      const totalCost = Math.min(purchasePrice * quantity, 99999999.99);\n\n      const purchase = await storage.createAssetPurchase({\n        ...purchaseData,\n        assetId,\n        createdBy: req.user?.id || purchaseData.schoolId,\n        purchaseDate: purchaseData.purchaseDate ? new Date(purchaseData.purchaseDate) : new Date(),\n        purchasePrice: purchasePrice.toString(),\n        quantity,\n        totalCost: totalCost.toString(),\n      });\n\n      res.json(purchase);\n    } catch (error) {\n      console.error(\"Create asset purchase error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/assets/:id/purchases\", authMiddleware, async (req, res) => {\n    try {\n      const { id: assetId } = req.params;\n      const purchases = await storage.getAssetPurchases(assetId);\n      res.json(purchases);\n    } catch (error) {\n      console.error(\"Get asset purchases error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/assets/:id/assignments\", authMiddleware, async (req, res) => {\n    try {\n      const { id: assetId } = req.params;\n      const assignmentData = req.body;\n      \n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const assignment = await storage.assignAsset({\n        ...assignmentData,\n        assetId,\n        assignedBy: req.user.id,\n      });\n\n      res.json(assignment);\n    } catch (error) {\n      console.error(\"Assign asset error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/assets/:id/assignments\", authMiddleware, async (req, res) => {\n    try {\n      const { id: assetId } = req.params;\n      const assignments = await storage.getAssetAssignments(assetId);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Get asset assignments error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // School Supplies Management Routes\n  \n  // Get school supplies\n  app.get(\"/api/schools/:schoolId/supplies\", authMiddleware, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const supplies = await storage.getSchoolSupplies(schoolId);\n      res.json(supplies);\n    } catch (error) {\n      console.error(\"Get school supplies error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create supply\n  app.post(\"/api/supplies\", authMiddleware, async (req, res) => {\n    try {\n      const supplyData = req.body;\n      \n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Convert \"none\" supplier to null\n      if (supplyData.supplier === 'none') {\n        supplyData.supplier = null;\n      }\n\n      const supply = await storage.createSchoolSupply({\n        ...supplyData,\n        createdBy: req.user.id,\n      });\n\n      res.json(supply);\n    } catch (error) {\n      console.error(\"Create supply error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // Update supply\n  app.put(\"/api/supplies/:id\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const supplyData = req.body;\n      \n      const supply = await storage.updateSchoolSupply(id, supplyData);\n      res.json(supply);\n    } catch (error) {\n      console.error(\"Update supply error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // Delete supply\n  app.delete(\"/api/supplies/:id\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSchoolSupply(id);\n      res.json({ message: \"Supply deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete supply error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Add supply purchase\n  app.post(\"/api/supplies/:id/purchases\", authMiddleware, async (req, res) => {\n    try {\n      const { id: supplyId } = req.params;\n      const purchaseData = req.body;\n      \n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Convert \"none\" supplier to null\n      if (purchaseData.supplier === 'none') {\n        purchaseData.supplier = null;\n      }\n\n      const purchase = await storage.createSupplyPurchase({\n        ...purchaseData,\n        supplyId,\n        createdBy: req.user.id,\n      });\n\n      res.json(purchase);\n    } catch (error) {\n      console.error(\"Add supply purchase error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // Get supply purchase history\n  app.get(\"/api/supplies/:id/purchases\", authMiddleware, async (req, res) => {\n    try {\n      const { id: supplyId } = req.params;\n      const purchases = await storage.getSupplyPurchases(supplyId);\n      res.json(purchases);\n    } catch (error) {\n      console.error(\"Get supply purchases error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Record supply usage\n  app.post(\"/api/supplies/:id/usage\", authMiddleware, async (req, res) => {\n    try {\n      const { id: supplyId } = req.params;\n      const usageData = req.body;\n      \n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const usage = await storage.createSupplyUsage({\n        ...usageData,\n        supplyId,\n        createdBy: req.user.id,\n      });\n\n      res.json(usage);\n    } catch (error) {\n      console.error(\"Record supply usage error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // Get supply usage history\n  app.get(\"/api/supplies/:id/usage\", authMiddleware, async (req, res) => {\n    try {\n      const { id: supplyId } = req.params;\n      const usage = await storage.getSupplyUsage(supplyId);\n      res.json(usage);\n    } catch (error) {\n      console.error(\"Get supply usage error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Supply Room Assignment routes\n  // Assign supply to storage room\n  app.post(\"/api/supplies/:id/room-assignments\", authMiddleware, async (req, res) => {\n    try {\n      const { id: supplyId } = req.params;\n      const assignmentData = req.body;\n      \n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const assignment = await storage.assignSupplyToRoom({\n        ...assignmentData,\n        supplyId,\n        assignedBy: req.user.id,\n        assignedDate: new Date(),\n      });\n\n      res.json(assignment);\n    } catch (error) {\n      console.error(\"Assign supply to room error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // Get supply room assignments\n  app.get(\"/api/supplies/:id/room-assignments\", authMiddleware, async (req, res) => {\n    try {\n      const { id: supplyId } = req.params;\n      const assignments = await storage.getSupplyRoomAssignments(supplyId);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Get supply room assignments error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get storage rooms with capacity for a school\n  app.get(\"/api/schools/:schoolId/storage-rooms\", authMiddleware, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const storageRooms = await storage.getStorageRoomsWithCapacity(schoolId);\n      res.json(storageRooms);\n    } catch (error) {\n      console.error(\"Get storage rooms error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/assignments/:id/return\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { id: assignmentId } = req.params;\n      const { returnDate } = req.body;\n      \n      const assignment = await storage.returnAsset(assignmentId, new Date(returnDate || Date.now()));\n      res.json(assignment);\n    } catch (error) {\n      console.error(\"Return asset error:\", error);\n      res.status(500).json({ message: (error as Error).message || \"Internal server error\" });\n    }\n  });\n\n  // School Supplier routes\n  app.get(\"/api/schools/:schoolId/suppliers\", authMiddleware, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const suppliers = await storage.getSchoolSuppliers(schoolId);\n      res.json(suppliers);\n    } catch (error) {\n      console.error(\"Get school suppliers error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/schools/:schoolId/suppliers\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const supplierData = req.body;\n      \n      const supplier = await storage.createSchoolSupplier({\n        ...supplierData,\n        schoolId,\n      });\n      \n      res.status(201).json(supplier);\n    } catch (error) {\n      console.error(\"Create school supplier error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/suppliers/:id\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const supplierData = req.body;\n      \n      const supplier = await storage.updateSchoolSupplier(id, supplierData);\n      res.json(supplier);\n    } catch (error) {\n      console.error(\"Update school supplier error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/suppliers/:id\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSchoolSupplier(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete school supplier error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // School Building routes\n  app.get(\"/api/schools/:schoolId/buildings\", authMiddleware, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const buildings = await storage.getSchoolBuildings(schoolId);\n      res.json(buildings);\n    } catch (error) {\n      console.error(\"Get school buildings error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/schools/:schoolId/buildings\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { schoolId } = req.params;\n      const buildingData = req.body;\n      \n      const building = await storage.createSchoolBuilding({\n        ...buildingData,\n        schoolId,\n      });\n      \n      res.status(201).json(building);\n    } catch (error) {\n      console.error(\"Create school building error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/buildings/:id\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const buildingData = req.body;\n      \n      const building = await storage.updateSchoolBuilding(id, buildingData);\n      res.json(building);\n    } catch (error) {\n      console.error(\"Update school building error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/buildings/:id\", authMiddleware, schoolAdminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSchoolBuilding(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete school building error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":29976},"server/storage.ts":{"content":"import {\n  users,\n  schools,\n  branches,\n  features,\n  schoolFeatures,\n  schoolFeatureSetup,\n  sections,\n  gradeSections,\n  invoices,\n  invoiceLines,\n  invoiceTemplates,\n  invoiceAssets,\n  subscriptions,\n  appConfig,\n  academicYears,\n  academicTerms,\n  academicWeeks,\n  classes,\n  subjects,\n  classSubjects,\n  assets,\n  schoolSuppliers,\n  schoolSupplies,\n  supplyPurchases,\n  supplyUsage,\n  supplyRoomAssignments,\n  assetPurchases,\n  assetAssignments,\n  type User,\n  type InsertUser,\n  type School,\n  type InsertSchool,\n  type Branch,\n  type InsertBranch,\n  type Feature,\n  type InsertFeature,\n  type SchoolFeature,\n  type InsertSchoolFeature,\n  type Section,\n  type InsertSection,\n  type GradeSection,\n  type InsertGradeSection,\n  type Invoice,\n  type InsertInvoice,\n  type InvoiceLine,\n  type InsertInvoiceLine,\n  type InvoiceTemplate,\n  type InsertInvoiceTemplate,\n  type InvoiceAsset,\n  type InsertInvoiceAsset,\n  type AppConfig,\n  type InsertAppConfig,\n  type ConnectionTestResult,\n  type SchoolWithDetails,\n  type InvoiceWithLines,\n  type AcademicYear,\n  type InsertAcademicYear,\n  type AcademicTerm,\n  type InsertAcademicTerm,\n  type AcademicWeek,\n  type InsertAcademicWeek,\n  type SchoolSupplier,\n  type InsertSchoolSupplier,\n  schoolBuildings,\n  type SchoolBuilding,\n  type InsertSchoolBuilding,\n  type Class,\n  type InsertClass,\n  type Subject,\n  type InsertSubject,\n  type ClassSubject,\n  type InsertClassSubject,\n  type Asset,\n  type InsertAsset,\n  type AssetPurchase,\n  type InsertAssetPurchase,\n  type AssetAssignment,\n  type InsertAssetAssignment,\n  type SchoolSupply,\n  type InsertSchoolSupply,\n  type SupplyPurchase,\n  type InsertSupplyPurchase,\n  type SupplyUsage,\n  type InsertSupplyUsage,\n  type SupplyRoomAssignment,\n  type InsertSupplyRoomAssignment,\n  assetPurchases,\n  assetAssignments,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, count, sql, or, ilike, ne } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByEmailAndSchool(email: string, schoolId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n\n  // School operations\n  getSchools(filters?: {\n    type?: string;\n    status?: string;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ schools: SchoolWithDetails[]; total: number }>;\n  getSchool(id: string): Promise<SchoolWithDetails | undefined>;\n  getSchoolByShortName(shortName: string): Promise<School | undefined>;\n  createSchool(school: InsertSchool): Promise<School>;\n  updateSchool(id: string, school: Partial<InsertSchool>): Promise<School>;\n  updateSchoolPaymentStatus(id: string, status: string, dueDate?: Date): Promise<School>;\n  deleteSchool(id: string): Promise<void>;\n\n  // Branch operations\n  getBranches(schoolId: string): Promise<Branch[]>;\n  createBranch(branch: InsertBranch): Promise<Branch>;\n  updateBranch(id: string, branch: Partial<InsertBranch>): Promise<Branch>;\n\n  // Feature operations\n  getAllFeatures(): Promise<Feature[]>;\n  getFeatures(): Promise<Feature[]>;\n  createFeature(feature: InsertFeature): Promise<Feature>;\n  updateFeature(id: string, feature: Partial<InsertFeature>): Promise<Feature>;\n  getSchoolFeatures(schoolId: string): Promise<(SchoolFeature & { feature: Feature })[]>;\n  getEnabledSchoolFeatures(schoolId: string): Promise<(SchoolFeature & { feature: Feature })[]>;\n  toggleSchoolFeature(schoolId: string, featureId: string, enabled: boolean): Promise<SchoolFeature>;\n  \n  // Feature menu management\n  getSchoolFeaturesWithMenu(schoolId: string): Promise<any[]>;\n  getSchoolFeatureSetup(schoolId: string): Promise<any[]>;\n  updateSchoolFeatureSetup(schoolId: string, featureId: string, menuLinks: any[]): Promise<void>;\n\n  // Grade Section operations\n  createGradeSections(gradeSections: InsertGradeSection[]): Promise<GradeSection[]>;\n  getGradeSections(schoolId: string): Promise<GradeSection[]>;\n\n  // Enhanced invoice operations\n  createEnhancedInvoice(invoiceData: any): Promise<Invoice>;\n  \n  // Grade section operations with sections\n  createDefaultGradeSections(schoolId: string, schoolType: string): Promise<GradeSection[]>;\n  \n  // App config operations\n  getAppConfig(): Promise<AppConfig | undefined>;\n  updateAppConfig(config: Partial<InsertAppConfig>): Promise<AppConfig>;\n  createAppConfig(config: InsertAppConfig): Promise<AppConfig>;\n  testServiceConnection(service: string, config: any): Promise<ConnectionTestResult>;\n  updateServiceStatus(service: string, status: string, error?: string): Promise<void>;\n\n  // Invoice operations\n  getInvoices(filters?: {\n    schoolId?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ invoices: InvoiceWithLines[]; total: number }>;\n  getInvoice(id: string): Promise<InvoiceWithLines | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice>;\n  createInvoiceLines(lines: InsertInvoiceLine[]): Promise<InvoiceLine[]>;\n  generateInvoiceNumber(): Promise<string>;\n\n  // Stats operations\n  getStats(): Promise<{\n    totalSchools: number;\n    activeSubscriptions: number;\n    pendingInvoices: number;\n    monthlyRevenue: string;\n  }>;\n\n  // Invoice template operations\n  getInvoiceTemplates(schoolId?: string): Promise<InvoiceTemplate[]>;\n  getInvoiceTemplate(id: string): Promise<InvoiceTemplate | undefined>;\n  createInvoiceTemplate(template: InsertInvoiceTemplate): Promise<InvoiceTemplate>;\n  updateInvoiceTemplate(id: string, template: Partial<InsertInvoiceTemplate>): Promise<InvoiceTemplate>;\n  deleteInvoiceTemplate(id: string): Promise<void>;\n\n  // Invoice asset operations\n  getInvoiceAssets(schoolId?: string): Promise<InvoiceAsset[]>;\n  getInvoiceAsset(id: string): Promise<InvoiceAsset | undefined>;\n  createInvoiceAsset(asset: InsertInvoiceAsset): Promise<InvoiceAsset>;\n  updateInvoiceAsset(id: string, asset: Partial<InsertInvoiceAsset>): Promise<InvoiceAsset>;\n  deleteInvoiceAsset(id: string): Promise<void>;\n\n  // Asset operations\n  getAssets(schoolId: string, filters?: {\n    category?: string;\n    condition?: string;\n    isActive?: boolean;\n  }): Promise<Asset[]>;\n  getAssetById(id: string): Promise<Asset | undefined>;\n  createAsset(asset: InsertAsset): Promise<Asset>;\n  updateAsset(id: string, asset: Partial<InsertAsset>): Promise<Asset>;\n  deleteAsset(id: string): Promise<void>;\n  \n  // Supplier methods\n  getSchoolSuppliers(schoolId: string): Promise<SchoolSupplier[]>;\n  createSchoolSupplier(supplier: InsertSchoolSupplier): Promise<SchoolSupplier>;\n  updateSchoolSupplier(id: string, supplier: Partial<InsertSchoolSupplier>): Promise<SchoolSupplier>;\n  deleteSchoolSupplier(id: string): Promise<void>;\n\n  // School Building operations\n  getSchoolBuildings(schoolId: string): Promise<SchoolBuilding[]>;\n  createSchoolBuilding(building: InsertSchoolBuilding): Promise<SchoolBuilding>;\n  updateSchoolBuilding(id: string, building: Partial<InsertSchoolBuilding>): Promise<SchoolBuilding>;\n  deleteSchoolBuilding(id: string): Promise<void>;\n\n  // Supply operations\n  getSchoolSupplies(schoolId: string): Promise<SchoolSupply[]>;\n  createSchoolSupply(supply: InsertSchoolSupply): Promise<SchoolSupply>;\n  updateSchoolSupply(id: string, supply: Partial<InsertSchoolSupply>): Promise<SchoolSupply>;\n  deleteSchoolSupply(id: string): Promise<void>;\n\n  // Supply purchase operations\n  createSupplyPurchase(purchase: InsertSupplyPurchase): Promise<SupplyPurchase>;\n  getSupplyPurchases(supplyId: string): Promise<SupplyPurchase[]>;\n\n  // Supply usage operations\n  createSupplyUsage(usage: InsertSupplyUsage): Promise<SupplyUsage>;\n  getSupplyUsage(supplyId: string): Promise<SupplyUsage[]>;\n\n  // Supply room assignment operations\n  assignSupplyToRoom(assignment: InsertSupplyRoomAssignment): Promise<SupplyRoomAssignment>;\n  getSupplyRoomAssignments(supplyId: string): Promise<SupplyRoomAssignment[]>;\n  getStorageRoomsWithCapacity(schoolId: string): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByEmailAndSchool(email: string, schoolId: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(and(eq(users.email, email), eq(users.schoolId, schoolId)));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getSchools(filters?: {\n    type?: string;\n    status?: string;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ schools: SchoolWithDetails[]; total: number }> {\n    const limit = filters?.limit || 10;\n    const offset = filters?.offset || 0;\n\n    let whereConditions: any[] = [];\n\n    if (filters?.type && filters.type !== \"all\") {\n      whereConditions.push(eq(schools.type, filters.type as any));\n    }\n\n    if (filters?.status && filters.status !== \"all\") {\n      whereConditions.push(eq(schools.status, filters.status as any));\n    }\n\n    if (filters?.search) {\n      whereConditions.push(\n        or(\n          ilike(schools.name, `%${filters.search}%`),\n          ilike(schools.shortName, `%${filters.search}%`)\n        )\n      );\n    }\n\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    // Get total count\n    const [{ totalCount }] = await db\n      .select({ totalCount: count() })\n      .from(schools)\n      .where(whereClause);\n\n    // Get schools with details\n    const schoolsData = await db.query.schools.findMany({\n      where: whereClause,\n      with: {\n        branches: true,\n        features: {\n          with: {\n            feature: true,\n          },\n        },\n        gradeSections: {\n          orderBy: asc(gradeSections.order),\n        },\n      },\n      limit,\n      offset,\n      orderBy: desc(schools.createdAt),\n    });\n\n    return {\n      schools: schoolsData as SchoolWithDetails[],\n      total: totalCount,\n    };\n  }\n\n  async getSchool(id: string): Promise<SchoolWithDetails | undefined> {\n    const school = await db.query.schools.findFirst({\n      where: eq(schools.id, id),\n      with: {\n        branches: true,\n        features: {\n          with: {\n            feature: true,\n          },\n        },\n        gradeSections: {\n          orderBy: asc(gradeSections.order),\n        },\n      },\n    });\n\n    return school as SchoolWithDetails | undefined;\n  }\n\n  async getSchoolByShortName(shortName: string): Promise<School | undefined> {\n    const [school] = await db.select().from(schools).where(eq(schools.shortName, shortName));\n    return school;\n  }\n\n  async createSchool(schoolData: InsertSchool): Promise<School> {\n    const [school] = await db.insert(schools).values(schoolData as any).returning();\n    \n    // Automatically create grade sections based on school type\n    await this.createDefaultGradeSections(school.id, school.type);\n    \n    return school;\n  }\n\n  async createDefaultGradeSections(schoolId: string, schoolType: string): Promise<GradeSection[]> {\n    // First create section records (A, B, C, etc.) in the sections table\n    const defaultSectionLetters = [\"A\", \"B\", \"C\"];\n    const sectionsToCreate = defaultSectionLetters.map(letter => ({\n      schoolId,\n      name: letter,\n      code: letter,\n      capacity: 30,\n      isActive: true,\n    }));\n\n    // Insert sections and get their IDs\n    const createdSections = await this.createSections(sectionsToCreate);\n    \n    let gradeSectionData: InsertGradeSection[] = [];\n\n    if (schoolType === \"K12\") {\n      // Create K12 grade sections with multiple sections per grade\n      const k12Grades = [\n        // Nursery/Pre-K\n        { name: \"Nursery 1\", code: \"N1\", type: \"nursery\", order: 1 },\n        { name: \"Nursery 2\", code: \"N2\", type: \"nursery\", order: 2 },\n        { name: \"Pre-K\", code: \"PK\", type: \"nursery\", order: 3 },\n        \n        // Primary (Grades 1-6)\n        { name: \"Grade 1\", code: \"G1\", type: \"primary\", order: 4 },\n        { name: \"Grade 2\", code: \"G2\", type: \"primary\", order: 5 },\n        { name: \"Grade 3\", code: \"G3\", type: \"primary\", order: 6 },\n        { name: \"Grade 4\", code: \"G4\", type: \"primary\", order: 7 },\n        { name: \"Grade 5\", code: \"G5\", type: \"primary\", order: 8 },\n        { name: \"Grade 6\", code: \"G6\", type: \"primary\", order: 9 },\n        \n        // Middle School (Grades 7-9)\n        { name: \"Grade 7\", code: \"G7\", type: \"junior\", order: 10 },\n        { name: \"Grade 8\", code: \"G8\", type: \"junior\", order: 11 },\n        { name: \"Grade 9\", code: \"G9\", type: \"junior\", order: 12 },\n        \n        // High School (Grades 10-12)\n        { name: \"Grade 10\", code: \"G10\", type: \"senior\", order: 13 },\n        { name: \"Grade 11\", code: \"G11\", type: \"senior\", order: 14 },\n        { name: \"Grade 12\", code: \"G12\", type: \"senior\", order: 15 },\n      ];\n\n      // Create grade sections with proper section ID references\n      k12Grades.forEach((grade) => {\n        createdSections.forEach((section, sectionIndex) => {\n          gradeSectionData.push({\n            schoolId,\n            sectionId: section.id, // Use actual section ID from sections table\n            name: `${grade.name} ${section.name}`,\n            code: `${grade.code}${section.code}`,\n            type: grade.type,\n            order: grade.order * 10 + sectionIndex, // Ensure proper ordering\n            isActive: true,\n          });\n        });\n      });\n    } else if (schoolType === \"NIGERIAN\") {\n      // Create Nigerian curriculum grade sections\n      const nigerianGrades = [\n        // Nursery\n        { name: \"Nursery 1\", code: \"NUR1\", type: \"nursery\", order: 1 },\n        { name: \"Nursery 2\", code: \"NUR2\", type: \"nursery\", order: 2 },\n        \n        // Primary\n        { name: \"Primary 1\", code: \"PRI1\", type: \"primary\", order: 3 },\n        { name: \"Primary 2\", code: \"PRI2\", type: \"primary\", order: 4 },\n        { name: \"Primary 3\", code: \"PRI3\", type: \"primary\", order: 5 },\n        { name: \"Primary 4\", code: \"PRI4\", type: \"primary\", order: 6 },\n        { name: \"Primary 5\", code: \"PRI5\", type: \"primary\", order: 7 },\n        { name: \"Primary 6\", code: \"PRI6\", type: \"primary\", order: 8 },\n        \n        // Junior Secondary\n        { name: \"JSS 1\", code: \"JSS1\", type: \"junior\", order: 9 },\n        { name: \"JSS 2\", code: \"JSS2\", type: \"junior\", order: 10 },\n        { name: \"JSS 3\", code: \"JSS3\", type: \"junior\", order: 11 },\n        \n        // Senior Secondary\n        { name: \"SSS 1\", code: \"SSS1\", type: \"senior\", order: 12 },\n        { name: \"SSS 2\", code: \"SSS2\", type: \"senior\", order: 13 },\n        { name: \"SSS 3\", code: \"SSS3\", type: \"senior\", order: 14 },\n      ];\n\n      // Create grade sections with proper section ID references\n      nigerianGrades.forEach((grade) => {\n        createdSections.forEach((section, sectionIndex) => {\n          gradeSectionData.push({\n            schoolId,\n            sectionId: section.id, // Use actual section ID from sections table\n            name: `${grade.name} ${section.name}`,\n            code: `${grade.code}${section.code}`,\n            type: grade.type,\n            order: grade.order * 10 + sectionIndex,\n            isActive: true,\n          });\n        });\n      });\n    }\n\n    // Insert all grade sections\n    if (gradeSectionData.length > 0) {\n      return await this.createGradeSections(gradeSectionData);\n    }\n    \n    return [];\n  }\n\n  async updateSchool(id: string, schoolData: Partial<InsertSchool>): Promise<School> {\n    const [school] = await db\n      .update(schools)\n      .set({ ...schoolData, updatedAt: new Date() } as any)\n      .where(eq(schools.id, id))\n      .returning();\n    return school;\n  }\n\n  async updateSchoolPaymentStatus(id: string, status: string, dueDate?: Date): Promise<School> {\n    const updateData: any = {\n      paymentStatus: status,\n      updatedAt: new Date(),\n    };\n\n    if (dueDate) {\n      updateData.nextPaymentDue = dueDate;\n    }\n\n    if (status === \"UNPAID\") {\n      updateData.accessBlockedAt = new Date();\n    } else if (status === \"PAID\") {\n      updateData.accessBlockedAt = null;\n    }\n\n    const [school] = await db\n      .update(schools)\n      .set(updateData)\n      .where(eq(schools.id, id))\n      .returning();\n    return school;\n  }\n\n  async deleteSchool(id: string): Promise<void> {\n    await db.delete(schools).where(eq(schools.id, id));\n  }\n\n  async getBranches(schoolId: string): Promise<Branch[]> {\n    return await db.select().from(branches).where(eq(branches.schoolId, schoolId));\n  }\n\n  async createBranch(branchData: InsertBranch): Promise<Branch> {\n    const [branch] = await db.insert(branches).values(branchData).returning();\n    return branch;\n  }\n\n  async updateBranch(id: string, branchData: Partial<InsertBranch>): Promise<Branch> {\n    const [branch] = await db\n      .update(branches)\n      .set(branchData)\n      .where(eq(branches.id, id))\n      .returning();\n    return branch;\n  }\n\n  async getFeatures(): Promise<Feature[]> {\n    const featuresData = await db.select().from(features).orderBy(asc(features.name));\n    return featuresData || [];\n  }\n\n  async createFeature(featureData: InsertFeature): Promise<Feature> {\n    const [feature] = await db.insert(features).values(featureData).returning();\n    return feature;\n  }\n\n\n\n  async deleteFeature(id: string): Promise<void> {\n    await db.delete(features).where(eq(features.id, id));\n  }\n\n  async getAnalytics(): Promise<any> {\n    // Get basic stats\n    const [schoolStats] = await db\n      .select({ \n        totalSchools: count(),\n        activeSchools: sql<number>`COUNT(CASE WHEN payment_status = 'PAID' THEN 1 END)`\n      })\n      .from(schools);\n\n    const [invoiceStats] = await db\n      .select({\n        pendingInvoices: sql<number>`COUNT(CASE WHEN status = 'SENT' THEN 1 END)`,\n        totalRevenue: sql<number>`COALESCE(SUM(CASE WHEN status = 'PAID' THEN total_amount ELSE 0 END), 0)`\n      })\n      .from(invoices);\n\n    // Monthly revenue for the last 6 months\n    const monthlyRevenue = await db\n      .select({\n        month: sql<string>`TO_CHAR(created_at, 'Mon YYYY')`,\n        revenue: sql<number>`SUM(CASE WHEN status = 'PAID' THEN total_amount ELSE 0 END)`\n      })\n      .from(invoices)\n      .where(sql`created_at >= CURRENT_DATE - INTERVAL '6 months'`)\n      .groupBy(sql`TO_CHAR(created_at, 'Mon YYYY'), DATE_TRUNC('month', created_at)`)\n      .orderBy(sql`DATE_TRUNC('month', created_at)`);\n\n    // Schools by status\n    const schoolsByStatus = await db\n      .select({\n        status: schools.paymentStatus,\n        count: count()\n      })\n      .from(schools)\n      .groupBy(schools.paymentStatus);\n\n    // Feature usage (approximated by school_features table)\n    const featureUsage = await db\n      .select({\n        name: features.name,\n        count: count(),\n        revenue: sql<number>`COALESCE(SUM(${features.price}), 0)`\n      })\n      .from(schoolFeatures)\n      .innerJoin(features, eq(schoolFeatures.featureId, features.id))\n      .where(eq(schoolFeatures.enabled, true))\n      .groupBy(features.id, features.name)\n      .orderBy(desc(count()));\n\n    // Invoice status distribution\n    const invoiceStatus = await db\n      .select({\n        status: invoices.status,\n        count: count()\n      })\n      .from(invoices)\n      .groupBy(invoices.status);\n\n    return {\n      totalSchools: schoolStats.totalSchools,\n      activeSchools: schoolStats.activeSchools,\n      totalRevenue: invoiceStats.totalRevenue || 0,\n      pendingInvoices: invoiceStats.pendingInvoices || 0,\n      monthlyRevenue: monthlyRevenue.map(m => ({\n        month: m.month,\n        revenue: m.revenue || 0\n      })),\n      schoolsByStatus: schoolsByStatus.map(s => ({\n        status: s.status,\n        count: s.count\n      })),\n      featureUsage: featureUsage.map(f => ({\n        name: f.name,\n        count: f.count,\n        revenue: f.revenue || 0\n      })),\n      invoiceStatus: invoiceStatus.map(i => ({\n        status: i.status,\n        count: i.count\n      }))\n    };\n  }\n\n  async getSchoolFeatures(schoolId: string): Promise<(SchoolFeature & { feature: Feature })[]> {\n    return await db.query.schoolFeatures.findMany({\n      where: eq(schoolFeatures.schoolId, schoolId),\n      with: {\n        feature: true,\n      },\n    });\n  }\n\n  async getEnabledSchoolFeatures(schoolId: string): Promise<(SchoolFeature & { feature: Feature })[]> {\n    return await db.query.schoolFeatures.findMany({\n      where: and(\n        eq(schoolFeatures.schoolId, schoolId),\n        eq(schoolFeatures.enabled, true)\n      ),\n      with: {\n        feature: true,\n      },\n    });\n  }\n\n  async toggleSchoolFeature(\n    schoolId: string,\n    featureId: string,\n    enabled: boolean\n  ): Promise<SchoolFeature> {\n    // Try to update existing record first\n    const [existing] = await db\n      .update(schoolFeatures)\n      .set({ enabled })\n      .where(and(eq(schoolFeatures.schoolId, schoolId), eq(schoolFeatures.featureId, featureId)))\n      .returning();\n\n    if (existing) {\n      return existing;\n    }\n\n    // If no existing record, create new one\n    const [newFeature] = await db\n      .insert(schoolFeatures)\n      .values({ schoolId, featureId, enabled })\n      .returning();\n    return newFeature;\n  }\n\n  async createSections(sectionData: InsertSection[]): Promise<Section[]> {\n    return await db.insert(sections).values(sectionData).returning();\n  }\n\n  async createGradeSections(gradeSectionData: InsertGradeSection[]): Promise<GradeSection[]> {\n    return await db.insert(gradeSections).values(gradeSectionData).returning();\n  }\n\n  async createClasses(classData: any[]): Promise<any[]> {\n    // For now, we'll just return the provided data since classes table might not exist yet\n    // In a full implementation, this would insert into a classes table\n    return classData;\n  }\n\n  // Branch Management\n  async getSchoolBranches(schoolId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(branches)\n      .where(and(eq(branches.schoolId, schoolId), ne(branches.status, \"deleted\")))\n      .orderBy(asc(branches.name));\n  }\n\n  async getGradeSections(schoolId: string): Promise<GradeSection[]> {\n    return await db\n      .select()\n      .from(gradeSections)\n      .where(eq(gradeSections.schoolId, schoolId))\n      .orderBy(asc(gradeSections.order));\n  }\n\n\n\n  // Database Viewer Methods\n  async getTablesInfo(): Promise<{table_name: string; record_count: number; columns: string[]}[]> {\n    const tablesQuery = `\n      SELECT \n        t.table_name,\n        COALESCE(c.record_count, 0) as record_count,\n        array_agg(col.column_name ORDER BY col.ordinal_position) as columns\n      FROM information_schema.tables t\n      LEFT JOIN (\n        SELECT 'users' as table_name, (SELECT COUNT(*) FROM users) as record_count UNION ALL\n        SELECT 'schools', (SELECT COUNT(*) FROM schools) UNION ALL\n        SELECT 'branches', (SELECT COUNT(*) FROM branches) UNION ALL\n        SELECT 'features', (SELECT COUNT(*) FROM features) UNION ALL\n        SELECT 'school_features', (SELECT COUNT(*) FROM school_features) UNION ALL\n        SELECT 'grade_sections', (SELECT COUNT(*) FROM grade_sections) UNION ALL\n        SELECT 'sections', (SELECT COUNT(*) FROM sections) UNION ALL\n        SELECT 'academic_years', (SELECT COUNT(*) FROM academic_years) UNION ALL\n        SELECT 'academic_terms', (SELECT COUNT(*) FROM academic_terms) UNION ALL\n        SELECT 'academic_weeks', (SELECT COUNT(*) FROM academic_weeks) UNION ALL\n        SELECT 'classes', (SELECT COUNT(*) FROM classes) UNION ALL\n        SELECT 'subjects', (SELECT COUNT(*) FROM subjects) UNION ALL\n        SELECT 'class_subjects', (SELECT COUNT(*) FROM class_subjects) UNION ALL\n        SELECT 'invoices', (SELECT COUNT(*) FROM invoices) UNION ALL\n        SELECT 'invoice_lines', (SELECT COUNT(*) FROM invoice_lines) UNION ALL\n        SELECT 'invoice_templates', (SELECT COUNT(*) FROM invoice_templates) UNION ALL\n        SELECT 'invoice_assets', (SELECT COUNT(*) FROM invoice_assets) UNION ALL\n        SELECT 'subscriptions', (SELECT COUNT(*) FROM subscriptions) UNION ALL\n        SELECT 'app_config', (SELECT COUNT(*) FROM app_config) UNION ALL\n        SELECT 'app_settings', (SELECT COUNT(*) FROM app_settings)\n      ) c ON c.table_name = t.table_name\n      LEFT JOIN information_schema.columns col ON col.table_name = t.table_name\n      WHERE t.table_schema = 'public' \n        AND t.table_type = 'BASE TABLE'\n        AND t.table_name IN ('users', 'schools', 'branches', 'features', 'school_features', 'grade_sections', 'sections', 'academic_years', 'academic_terms', 'academic_weeks', 'classes', 'subjects', 'class_subjects', 'invoices', 'invoice_lines', 'invoice_templates', 'invoice_assets', 'subscriptions', 'app_config', 'app_settings')\n      GROUP BY t.table_name, c.record_count\n      ORDER BY t.table_name;\n    `;\n    \n    return db.execute(sql.raw(tablesQuery)).then(result => \n      result.rows as {table_name: string; record_count: number; columns: string[]}[]\n    );\n  }\n\n  async getTableData(tableName: string): Promise<any[]> {\n    // Validate table name to prevent SQL injection\n    const validTables = [\n      'users', 'schools', 'branches', 'features', 'school_features', \n      'grade_sections', 'sections', 'academic_years', 'academic_terms', 'academic_weeks',\n      'classes', 'subjects', 'class_subjects', 'invoices', 'invoice_lines',\n      'invoice_templates', 'invoice_assets', 'subscriptions', 'app_config', 'app_settings'\n    ];\n    \n    if (!validTables.includes(tableName)) {\n      throw new Error(`Invalid table name: ${tableName}`);\n    }\n\n    try {\n      // Try with created_at first, then fall back to ordering by first column\n      let query = `SELECT * FROM ${tableName} ORDER BY created_at DESC LIMIT 100`;\n      try {\n        const result = await db.execute(sql.raw(query));\n        return result.rows;\n      } catch (error) {\n        // If created_at doesn't exist, order by first column\n        query = `SELECT * FROM ${tableName} LIMIT 100`;\n        const result = await db.execute(sql.raw(query));\n        return result.rows;\n      }\n    } catch (error) {\n      console.error(`Error fetching table data for ${tableName}:`, error);\n      throw error;\n    }\n  }\n\n  async getInvoices(filters?: {\n    schoolId?: string;\n    status?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ invoices: InvoiceWithLines[]; total: number }> {\n    const limit = filters?.limit || 10;\n    const offset = filters?.offset || 0;\n\n    let whereConditions: any[] = [];\n\n    if (filters?.schoolId) {\n      whereConditions.push(eq(invoices.schoolId, filters.schoolId));\n    }\n\n    if (filters?.status) {\n      whereConditions.push(eq(invoices.status, filters.status as any));\n    }\n\n    const whereClause = whereConditions.length > 0 ? and(...whereConditions) : undefined;\n\n    // Get total count\n    const [{ totalCount }] = await db\n      .select({ totalCount: count() })\n      .from(invoices)\n      .where(whereClause);\n\n    // Get invoices with details\n    const invoicesData = await db.query.invoices.findMany({\n      where: whereClause,\n      with: {\n        school: true,\n        lines: true,\n      },\n      limit,\n      offset,\n      orderBy: desc(invoices.createdAt),\n    });\n\n    return {\n      invoices: invoicesData as InvoiceWithLines[],\n      total: totalCount,\n    };\n  }\n\n  async getInvoice(id: string): Promise<InvoiceWithLines | undefined> {\n    const invoice = await db.query.invoices.findFirst({\n      where: eq(invoices.id, id),\n      with: {\n        school: true,\n        lines: true,\n      },\n    });\n\n    return invoice as InvoiceWithLines | undefined;\n  }\n\n  async createInvoice(invoiceData: InsertInvoice): Promise<Invoice> {\n    // Ensure features field is not null\n    const sanitizedData = {\n      ...invoiceData,\n      features: invoiceData.features || [],\n    };\n    const [invoice] = await db.insert(invoices).values(sanitizedData).returning();\n    return invoice;\n  }\n\n  async updateInvoice(id: string, invoiceData: Partial<InsertInvoice>): Promise<Invoice> {\n    const [invoice] = await db\n      .update(invoices)\n      .set({ ...invoiceData, updatedAt: new Date() })\n      .where(eq(invoices.id, id))\n      .returning();\n    return invoice;\n  }\n\n  async createInvoiceLines(linesData: InsertInvoiceLine[]): Promise<InvoiceLine[]> {\n    return await db.insert(invoiceLines).values(linesData).returning();\n  }\n\n  async createEnhancedInvoice(invoiceData: any): Promise<Invoice> {\n    // Generate invoice number\n    const invoiceNumber = await this.generateInvoiceNumber();\n    \n    // Ensure features is an array and not empty\n    const features = invoiceData.features || [];\n    const processedFeatures = features.length > 0 ? features : [];\n    \n    // Calculate total amount from features (values already in kobo from frontend)\n    const totalAmount = features.reduce((sum: number, feature: any) => {\n      const price = feature.negotiatedPrice || feature.unitPrice;\n      return sum + (price * feature.quantity);\n    }, 0);\n\n    // Create the invoice record\n    const invoiceRecord: InsertInvoice = {\n      schoolId: invoiceData.schoolId,\n      invoiceNumber,\n      totalAmount: totalAmount.toString(), // Store as decimal string\n      status: \"SENT\",\n      dueDate: new Date(invoiceData.dueDate),\n      notes: invoiceData.notes,\n      features: [], // Ensure features is set to empty array\n    };\n\n    const [invoice] = await db.insert(invoices).values(invoiceRecord).returning();\n\n    // Create invoice lines for each feature\n    const linesData: InsertInvoiceLine[] = features.map((feature: any) => ({\n      invoiceId: invoice.id,\n      featureId: feature.featureId,\n      description: `Feature: ${feature.featureId}`, // This would be populated with actual feature name in a real app\n      quantity: feature.quantity,\n      unitPrice: feature.unitPrice.toString(),\n      unitMeasurement: feature.unitMeasurement,\n      startDate: feature.startDate ? new Date(feature.startDate) : undefined,\n      endDate: feature.endDate ? new Date(feature.endDate) : undefined,\n      negotiatedPrice: feature.negotiatedPrice ? feature.negotiatedPrice.toString() : undefined,\n      total: ((feature.negotiatedPrice || feature.unitPrice) * feature.quantity).toString(),\n    }));\n\n    // Only create lines if we have features\n    if (linesData.length > 0) {\n      await this.createInvoiceLines(linesData);\n    }\n\n    return invoice;\n  }\n\n  async generateInvoiceNumber(): Promise<string> {\n    const year = new Date().getFullYear();\n    const [lastInvoice] = await db\n      .select({ invoiceNumber: invoices.invoiceNumber })\n      .from(invoices)\n      .where(ilike(invoices.invoiceNumber, `INV-${year}-%`))\n      .orderBy(desc(invoices.invoiceNumber))\n      .limit(1);\n\n    let nextNumber = 1;\n    if (lastInvoice) {\n      const match = lastInvoice.invoiceNumber.match(/INV-\\d{4}-(\\d+)/);\n      if (match) {\n        nextNumber = parseInt(match[1]) + 1;\n      }\n    }\n\n    return `INV-${year}-${nextNumber.toString().padStart(3, \"0\")}`;\n  }\n\n\n\n  async getStats(): Promise<{\n    totalSchools: number;\n    activeSubscriptions: number;\n    pendingInvoices: number;\n    monthlyRevenue: string;\n  }> {\n    // Total schools\n    const [{ totalSchools }] = await db.select({ totalSchools: count() }).from(schools);\n\n    // Active subscriptions (schools with PAID status)\n    const [{ activeSubscriptions }] = await db\n      .select({ activeSubscriptions: count() })\n      .from(schools)\n      .where(eq(schools.paymentStatus, \"PAID\"));\n\n    // Pending invoices\n    const [{ pendingInvoices }] = await db\n      .select({ pendingInvoices: count() })\n      .from(invoices)\n      .where(eq(invoices.status, \"SENT\"));\n\n    // Monthly revenue (sum of paid invoices this month)\n    const firstDayOfMonth = new Date();\n    firstDayOfMonth.setDate(1);\n    firstDayOfMonth.setHours(0, 0, 0, 0);\n\n    const [{ monthlyRevenue }] = await db\n      .select({\n        monthlyRevenue: sql<string>`COALESCE(SUM(${invoices.totalAmount}), 0)`,\n      })\n      .from(invoices)\n      .where(\n        and(\n          eq(invoices.status, \"PAID\"),\n          sql`${invoices.paidAt} >= ${firstDayOfMonth}`\n        )\n      );\n\n    return {\n      totalSchools,\n      activeSubscriptions,\n      pendingInvoices,\n      monthlyRevenue: monthlyRevenue || \"0\",\n    };\n  }\n\n  // App Config operations\n  async getAppConfig(): Promise<AppConfig | undefined> {\n    const [config] = await db.select().from(appConfig).limit(1);\n    return config;\n  }\n\n  async updateAppConfig(configData: Partial<InsertAppConfig>): Promise<AppConfig> {\n    const existingConfig = await this.getAppConfig();\n    \n    if (existingConfig) {\n      const [updated] = await db\n        .update(appConfig)\n        .set({ ...configData, updatedAt: new Date() })\n        .where(eq(appConfig.id, existingConfig.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(appConfig).values(configData as InsertAppConfig).returning();\n      return created;\n    }\n  }\n\n  async createAppConfig(configData: InsertAppConfig): Promise<AppConfig> {\n    const [config] = await db.insert(appConfig).values(configData).returning();\n    return config;\n  }\n\n  async testServiceConnection(service: string, config: any): Promise<ConnectionTestResult> {\n    const now = new Date();\n    \n    try {\n      switch (service) {\n        case 'sendgrid':\n          if (!config.sendgridApiKey) {\n            return { service, status: 'error', message: 'API key is required', lastChecked: now };\n          }\n          // Test SendGrid connection (mock for now)\n          return { service, status: 'connected', lastChecked: now };\n          \n        case 'twilio':\n          if (!config.twilioAccountSid || !config.twilioAuthToken) {\n            return { service, status: 'error', message: 'Account SID and Auth Token are required', lastChecked: now };\n          }\n          // Test Twilio connection (mock for now)\n          return { service, status: 'connected', lastChecked: now };\n          \n        case 'cloudinary':\n          if (!config.cloudinaryCloudName || !config.cloudinaryApiKey || !config.cloudinaryApiSecret) {\n            return { service, status: 'error', message: 'Cloud name, API key, and API secret are required', lastChecked: now };\n          }\n          // Test Cloudinary connection (mock for now)\n          return { service, status: 'connected', lastChecked: now };\n          \n        case 'smtp':\n          if (!config.smtpHost || !config.smtpUser || !config.smtpPassword) {\n            return { service, status: 'error', message: 'Host, user, and password are required', lastChecked: now };\n          }\n          // Test SMTP connection (mock for now)\n          return { service, status: 'connected', lastChecked: now };\n          \n        default:\n          return { service, status: 'error', message: 'Unknown service', lastChecked: now };\n      }\n    } catch (error) {\n      return { \n        service, \n        status: 'error', \n        message: error instanceof Error ? error.message : 'Connection failed', \n        lastChecked: now \n      };\n    }\n  }\n\n  async updateServiceStatus(service: string, status: string, error?: string): Promise<void> {\n    const existingConfig = await this.getAppConfig();\n    if (!existingConfig) return;\n\n    const updateData: any = { updatedAt: new Date() };\n    const now = new Date();\n\n    switch (service) {\n      case 'sendgrid':\n        updateData.sendgridStatus = status;\n        updateData.sendgridLastChecked = now;\n        if (error) updateData.sendgridErrorMessage = error;\n        break;\n      case 'twilio_sms':\n        updateData.twilioSmsStatus = status;\n        updateData.twilioLastChecked = now;\n        if (error) updateData.twilioErrorMessage = error;\n        break;\n      case 'twilio_whatsapp':\n        updateData.twilioWhatsappStatus = status;\n        updateData.twilioLastChecked = now;\n        if (error) updateData.twilioErrorMessage = error;\n        break;\n      case 'cloudinary':\n        updateData.cloudinaryStatus = status;\n        updateData.cloudinaryLastChecked = now;\n        if (error) updateData.cloudinaryErrorMessage = error;\n        break;\n      case 'smtp':\n        updateData.smtpStatus = status;\n        updateData.smtpLastChecked = now;\n        if (error) updateData.smtpErrorMessage = error;\n        break;\n    }\n\n    await db\n      .update(appConfig)\n      .set(updateData)\n      .where(eq(appConfig.id, existingConfig.id));\n  }\n\n\n\n  async deleteInvoice(id: string): Promise<void> {\n    // First delete associated invoice lines\n    await db.delete(invoiceLines).where(eq(invoiceLines.invoiceId, id));\n    \n    // Then delete the invoice\n    await db.delete(invoices).where(eq(invoices.id, id));\n  }\n\n  async deleteEnhancedInvoice(id: string): Promise<void> {\n    // Enhanced invoice deletion - same as regular but more explicit\n    // First delete all associated invoice lines\n    await db.delete(invoiceLines).where(eq(invoiceLines.invoiceId, id));\n    \n    // Then delete the invoice record\n    await db.delete(invoices).where(eq(invoices.id, id));\n  }\n\n  async getDefaultInvoiceTemplate(): Promise<any> {\n    const [template] = await db\n      .select()\n      .from(invoiceTemplates)\n      .where(eq(invoiceTemplates.isDefault, true));\n    \n    return template || null;\n  }\n\n  async getSchoolAdmin(schoolId: string): Promise<any> {\n    const [admin] = await db\n      .select()\n      .from(users)\n      .where(and(\n        eq(users.schoolId, schoolId),\n        eq(users.role, \"school_admin\")\n      ));\n    \n    return admin || null;\n  }\n\n  private async getSchoolName(schoolId: string): Promise<string> {\n    const [school] = await db\n      .select({ name: schools.name })\n      .from(schools)\n      .where(eq(schools.id, schoolId));\n    \n    return school?.name || \"Unknown School\";\n  }\n\n  // Invoice Template operations\n  async getInvoiceTemplates(schoolId?: string): Promise<InvoiceTemplate[]> {\n    if (schoolId) {\n      return await db\n        .select()\n        .from(invoiceTemplates)\n        .where(or(\n          eq(invoiceTemplates.schoolId, schoolId),\n          sql`${invoiceTemplates.schoolId} IS NULL`\n        ))\n        .orderBy(desc(invoiceTemplates.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(invoiceTemplates)\n      .orderBy(desc(invoiceTemplates.createdAt));\n  }\n\n  async getInvoiceTemplate(id: string): Promise<InvoiceTemplate | undefined> {\n    const [template] = await db\n      .select()\n      .from(invoiceTemplates)\n      .where(eq(invoiceTemplates.id, id));\n    return template;\n  }\n\n  async createInvoiceTemplate(templateData: InsertInvoiceTemplate): Promise<InvoiceTemplate> {\n    const [template] = await db\n      .insert(invoiceTemplates)\n      .values(templateData)\n      .returning();\n    return template;\n  }\n\n  async updateInvoiceTemplate(id: string, templateData: Partial<InsertInvoiceTemplate>): Promise<InvoiceTemplate> {\n    const [template] = await db\n      .update(invoiceTemplates)\n      .set({ ...templateData, updatedAt: new Date() })\n      .where(eq(invoiceTemplates.id, id))\n      .returning();\n    return template;\n  }\n\n  async deleteInvoiceTemplate(id: string): Promise<void> {\n    await db.delete(invoiceTemplates).where(eq(invoiceTemplates.id, id));\n  }\n\n  // Invoice Asset operations\n  async getInvoiceAssets(schoolId?: string): Promise<InvoiceAsset[]> {\n    if (schoolId) {\n      return await db\n        .select()\n        .from(invoiceAssets)\n        .where(or(\n          eq(invoiceAssets.schoolId, schoolId),\n          sql`${invoiceAssets.schoolId} IS NULL`\n        ))\n        .orderBy(desc(invoiceAssets.createdAt));\n    }\n    \n    return await db\n      .select()\n      .from(invoiceAssets)\n      .orderBy(desc(invoiceAssets.createdAt));\n  }\n\n  async getInvoiceAsset(id: string): Promise<InvoiceAsset | undefined> {\n    const [asset] = await db\n      .select()\n      .from(invoiceAssets)\n      .where(eq(invoiceAssets.id, id));\n    return asset;\n  }\n\n  async createInvoiceAsset(assetData: InsertInvoiceAsset): Promise<InvoiceAsset> {\n    const [asset] = await db\n      .insert(invoiceAssets)\n      .values(assetData)\n      .returning();\n    return asset;\n  }\n\n  async updateInvoiceAsset(id: string, assetData: Partial<InsertInvoiceAsset>): Promise<InvoiceAsset> {\n    const [asset] = await db\n      .update(invoiceAssets)\n      .set({ ...assetData, updatedAt: new Date() })\n      .where(eq(invoiceAssets.id, id))\n      .returning();\n    return asset;\n  }\n\n  async deleteInvoiceAsset(id: string): Promise<void> {\n    await db.delete(invoiceAssets).where(eq(invoiceAssets.id, id));\n  }\n\n  // Feature menu management methods\n  async getSchoolFeaturesWithMenu(schoolId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: features.id,\n        key: features.key,\n        name: features.name,\n        description: features.description,\n        menuLinks: features.menuLinks,\n        enabled: schoolFeatures.enabled,\n      })\n      .from(schoolFeatures)\n      .innerJoin(features, eq(schoolFeatures.featureId, features.id))\n      .where(eq(schoolFeatures.schoolId, schoolId));\n    \n    return result;\n  }\n\n\n\n  // Add missing feature methods\n  async getAllFeatures(): Promise<Feature[]> {\n    const result = await db\n      .select()\n      .from(features)\n      .where(eq(features.isActive, true))\n      .orderBy(asc(features.name));\n      \n    // Parse menuLinks for each feature\n    return result.map(feature => {\n      if (feature.menuLinks) {\n        try {\n          feature.menuLinks = typeof feature.menuLinks === 'string' \n            ? JSON.parse(feature.menuLinks) \n            : feature.menuLinks;\n        } catch (e) {\n          console.error('Error parsing menuLinks for feature:', feature.id, e);\n          feature.menuLinks = [];\n        }\n      }\n      return feature;\n    });\n  }\n\n  async updateFeature(id: string, featureData: Partial<InsertFeature>): Promise<Feature> {\n    console.log('Updating feature in database:', { id, featureData });\n    \n    // Ensure menuLinks are properly serialized if provided\n    const updateData = { ...featureData, updatedAt: new Date() };\n    if (updateData.menuLinks) {\n      updateData.menuLinks = JSON.stringify(updateData.menuLinks);\n    }\n    \n    const [feature] = await db\n      .update(features)\n      .set(updateData)\n      .where(eq(features.id, id))\n      .returning();\n      \n    console.log('Feature updated successfully:', feature);\n    \n    // Parse menuLinks back to object for response\n    if (feature && feature.menuLinks) {\n      try {\n        feature.menuLinks = typeof feature.menuLinks === 'string' \n          ? JSON.parse(feature.menuLinks) \n          : feature.menuLinks;\n      } catch (e) {\n        console.error('Error parsing menuLinks:', e);\n        feature.menuLinks = [];\n      }\n    }\n    \n    return feature;\n  }\n\n  async bulkAssignFeaturesToSchools(schoolIds: string[], featureIds: string[]): Promise<void> {\n    const assignments = [];\n    for (const schoolId of schoolIds) {\n      for (const featureId of featureIds) {\n        assignments.push({\n          schoolId,\n          featureId,\n          enabled: true,\n        });\n      }\n    }\n\n    if (assignments.length > 0) {\n      await db\n        .insert(schoolFeatures)\n        .values(assignments)\n        .onConflictDoUpdate({\n          target: [schoolFeatures.schoolId, schoolFeatures.featureId],\n          set: {\n            enabled: true,\n          },\n        });\n\n      // Don't auto-populate menu links - let schools configure them manually\n    }\n  }\n\n  async getSchoolFeatureSetup(schoolId: string, featureId: string): Promise<any> {\n    const [setup] = await db\n      .select()\n      .from(schoolFeatureSetup)\n      .where(\n        and(\n          eq(schoolFeatureSetup.schoolId, schoolId),\n          eq(schoolFeatureSetup.featureId, featureId)\n        )\n      )\n      .limit(1);\n\n    return setup || null;\n  }\n\n  async getAllSchoolFeatureSetups(schoolId: string): Promise<any[]> {\n    return await db\n      .select()\n      .from(schoolFeatureSetup)\n      .where(eq(schoolFeatureSetup.schoolId, schoolId));\n  }\n\n\n\n  // Single school feature assignment with auto menu link setup\n  async assignFeatureToSchool(schoolId: string, featureId: string): Promise<void> {\n    // First assign the feature\n    await db.insert(schoolFeatures)\n      .values({\n        schoolId,\n        featureId,\n        enabled: true,\n      })\n      .onConflictDoUpdate({\n        target: [schoolFeatures.schoolId, schoolFeatures.featureId],\n        set: {\n          enabled: true,\n        },\n      });\n\n    // Auto-populate default menu links for this feature\n    const [feature] = await db\n      .select()\n      .from(features)\n      .where(eq(features.id, featureId))\n      .limit(1);\n    if (feature && feature.menuLinks && Array.isArray(feature.menuLinks) && feature.menuLinks.length > 0) {\n      // Create default setup with all menu links enabled\n      const defaultMenuLinks = (feature.menuLinks as any[]).map((link: any) => ({\n        ...link,\n        enabled: true\n      }));\n      \n      // Skip auto-setup for now - let schools configure manually\n    }\n  }\n  // Enhanced Asset operations\n  async getAssets(schoolId: string, filters?: {\n    category?: string;\n    condition?: string;\n    isActive?: boolean;\n  }): Promise<Asset[]> {\n    const conditions = [eq(assets.schoolId, schoolId)];\n    \n    if (filters?.category && filters.category !== 'all') {\n      conditions.push(eq(assets.category, filters.category));\n    }\n    if (filters?.condition && filters.condition !== 'all') {\n      conditions.push(eq(assets.condition, filters.condition));\n    }\n    if (filters?.isActive !== undefined) {\n      conditions.push(eq(assets.isActive, filters.isActive));\n    }\n    \n    return await db\n      .select()\n      .from(assets)\n      .where(and(...conditions))\n      .orderBy(desc(assets.createdAt));\n  }\n\n  async getAssetById(id: string): Promise<Asset | undefined> {\n    const [asset] = await db.select().from(assets).where(eq(assets.id, id));\n    return asset;\n  }\n\n  async getAssetWithDetails(id: string): Promise<any> {\n    const [asset] = await db.select().from(assets).where(eq(assets.id, id));\n    if (!asset) return null;\n\n    // Get purchase history\n    const purchases = await db\n      .select()\n      .from(assetPurchases)\n      .where(eq(assetPurchases.assetId, id))\n      .orderBy(desc(assetPurchases.purchaseDate));\n\n    // Get assignment history  \n    const assignments = await db\n      .select()\n      .from(assetAssignments)\n      .where(eq(assetAssignments.assetId, id))\n      .orderBy(desc(assetAssignments.assignedDate));\n\n    // Calculate totals\n    const totalPurchaseCost = purchases.reduce((sum, p) => sum + Number(p.totalCost), 0);\n    const currentValue = purchases.length > 0 ? Number(purchases[0].purchasePrice) : 0;\n\n    return {\n      ...asset,\n      purchases,\n      assignments,\n      totalPurchaseCost,\n      currentValue\n    };\n  }\n\n  // Supplier operations\n  async getSchoolSuppliers(schoolId: string): Promise<SchoolSupplier[]> {\n    return await db\n      .select()\n      .from(schoolSuppliers)\n      .where(and(eq(schoolSuppliers.schoolId, schoolId), eq(schoolSuppliers.isActive, true)))\n      .orderBy(schoolSuppliers.name);\n  }\n\n  async createSchoolSupplier(supplier: InsertSchoolSupplier): Promise<SchoolSupplier> {\n    const [newSupplier] = await db\n      .insert(schoolSuppliers)\n      .values(supplier)\n      .returning();\n    return newSupplier;\n  }\n\n  async updateSchoolSupplier(id: string, supplier: Partial<InsertSchoolSupplier>): Promise<SchoolSupplier> {\n    const [updatedSupplier] = await db\n      .update(schoolSuppliers)\n      .set({ ...supplier, updatedAt: new Date() })\n      .where(eq(schoolSuppliers.id, id))\n      .returning();\n    return updatedSupplier;\n  }\n\n  async deleteSchoolSupplier(id: string): Promise<void> {\n    await db\n      .update(schoolSuppliers)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(schoolSuppliers.id, id));\n  }\n\n  async createAsset(assetData: InsertAsset): Promise<Asset> {\n    const [asset] = await db.insert(assets).values({\n      ...assetData,\n      totalQuantity: assetData.totalQuantity || 1,\n      availableQuantity: assetData.availableQuantity || assetData.totalQuantity || 1,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return asset;\n  }\n\n  async updateAsset(id: string, assetData: Partial<InsertAsset>): Promise<Asset> {\n    const [asset] = await db\n      .update(assets)\n      .set({ ...assetData, updatedAt: new Date() })\n      .where(eq(assets.id, id))\n      .returning();\n    return asset;\n  }\n\n  async deleteAsset(id: string): Promise<void> {\n    // Delete related records first\n    await db.delete(assetAssignments).where(eq(assetAssignments.assetId, id));\n    await db.delete(assetPurchases).where(eq(assetPurchases.assetId, id));\n    await db.delete(assets).where(eq(assets.id, id));\n  }\n\n  // Asset Purchase operations\n  async createAssetPurchase(purchaseData: InsertAssetPurchase): Promise<AssetPurchase> {\n    return db.transaction(async (tx) => {\n      // Convert string date to Date object if needed\n      const purchaseDate = typeof purchaseData.purchaseDate === 'string' \n        ? new Date(purchaseData.purchaseDate) \n        : purchaseData.purchaseDate;\n\n      // Create purchase record\n      const [purchase] = await tx.insert(assetPurchases).values({\n        ...purchaseData,\n        purchaseDate,\n        createdAt: new Date(),\n      }).returning();\n\n      // Update asset quantities\n      await tx\n        .update(assets)\n        .set({\n          totalQuantity: sql`${assets.totalQuantity} + ${purchaseData.quantity}`,\n          availableQuantity: sql`${assets.availableQuantity} + ${purchaseData.quantity}`,\n          updatedAt: new Date()\n        })\n        .where(eq(assets.id, purchaseData.assetId));\n\n      return purchase;\n    });\n  }\n\n  async getAssetPurchases(assetId: string): Promise<AssetPurchase[]> {\n    return await db\n      .select()\n      .from(assetPurchases)\n      .where(eq(assetPurchases.assetId, assetId))\n      .orderBy(desc(assetPurchases.purchaseDate));\n  }\n\n  // Asset Assignment operations\n  async assignAsset(assignmentData: InsertAssetAssignment): Promise<AssetAssignment> {\n    return db.transaction(async (tx) => {\n      // Check available quantity\n      const [asset] = await tx.select().from(assets).where(eq(assets.id, assignmentData.assetId));\n      if (!asset || (asset.availableQuantity || 0) < assignmentData.quantity) {\n        throw new Error('Insufficient available quantity for assignment');\n      }\n\n      // Convert string date to Date object if needed\n      const assignedDate = typeof assignmentData.assignedDate === 'string' \n        ? new Date(assignmentData.assignedDate) \n        : assignmentData.assignedDate;\n\n      // Create assignment record\n      const [assignment] = await tx.insert(assetAssignments).values({\n        ...assignmentData,\n        assignedDate,\n        status: 'assigned',\n        createdAt: new Date(),\n      }).returning();\n\n      // Update available quantity\n      await tx\n        .update(assets)\n        .set({\n          availableQuantity: sql`${assets.availableQuantity} - ${assignmentData.quantity}`,\n          updatedAt: new Date()\n        })\n        .where(eq(assets.id, assignmentData.assetId));\n\n      return assignment;\n    });\n  }\n\n  async returnAsset(assignmentId: string, returnDate: Date): Promise<AssetAssignment> {\n    return db.transaction(async (tx) => {\n      // Get assignment details\n      const [assignment] = await tx\n        .select()\n        .from(assetAssignments)\n        .where(eq(assetAssignments.id, assignmentId));\n      \n      if (!assignment) {\n        throw new Error('Assignment not found');\n      }\n\n      // Update assignment status\n      const [updatedAssignment] = await tx\n        .update(assetAssignments)\n        .set({\n          status: 'returned',\n          returnDate: returnDate\n        })\n        .where(eq(assetAssignments.id, assignmentId))\n        .returning();\n\n      // Update available quantity\n      await tx\n        .update(assets)\n        .set({\n          availableQuantity: sql`${assets.availableQuantity} + ${assignment.quantity}`,\n          updatedAt: new Date()\n        })\n        .where(eq(assets.id, assignment.assetId));\n\n      return updatedAssignment;\n    });\n  }\n\n  async getAssetAssignments(assetId: string): Promise<AssetAssignment[]> {\n    return await db\n      .select()\n      .from(assetAssignments)\n      .where(eq(assetAssignments.assetId, assetId))\n      .orderBy(desc(assetAssignments.assignedDate));\n  }\n\n  // School Building operations\n  async getSchoolBuildings(schoolId: string): Promise<SchoolBuilding[]> {\n    return await db\n      .select()\n      .from(schoolBuildings)\n      .where(and(eq(schoolBuildings.schoolId, schoolId), eq(schoolBuildings.isActive, true)))\n      .orderBy(asc(schoolBuildings.buildingName));\n  }\n\n  async createSchoolBuilding(building: InsertSchoolBuilding): Promise<SchoolBuilding> {\n    // Generate rooms array based on totalRooms count\n    const roomsCount = (building as any).totalRooms || 0;\n    const rooms = Array.from({ length: roomsCount }, (_, i) => ({\n      id: `room-${i + 1}`,\n      name: `Room ${i + 1}`,\n      floor: 1,\n      type: 'classroom',\n      capacity: 30,\n      isActive: true\n    }));\n\n    const [newBuilding] = await db.insert(schoolBuildings).values({\n      ...building,\n      rooms: rooms as any,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }).returning();\n    return newBuilding;\n  }\n\n  async updateSchoolBuilding(id: string, building: Partial<InsertSchoolBuilding>): Promise<SchoolBuilding> {\n    const [updatedBuilding] = await db\n      .update(schoolBuildings)\n      .set({ ...building, updatedAt: new Date() })\n      .where(eq(schoolBuildings.id, id))\n      .returning();\n    return updatedBuilding;\n  }\n\n  async deleteSchoolBuilding(id: string): Promise<void> {\n    await db\n      .update(schoolBuildings)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(schoolBuildings.id, id));\n  }\n\n  // Supply Management operations\n  async getSchoolSupplies(schoolId: string): Promise<SchoolSupply[]> {\n    return await db\n      .select()\n      .from(schoolSupplies)\n      .where(and(eq(schoolSupplies.schoolId, schoolId), eq(schoolSupplies.isActive, true)))\n      .orderBy(desc(schoolSupplies.createdAt));\n  }\n\n  async createSchoolSupply(supplyData: InsertSchoolSupply): Promise<SchoolSupply> {\n    const [supply] = await db\n      .insert(schoolSupplies)\n      .values({\n        ...supplyData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return supply;\n  }\n\n  async updateSchoolSupply(id: string, supplyData: Partial<InsertSchoolSupply>): Promise<SchoolSupply> {\n    const [supply] = await db\n      .update(schoolSupplies)\n      .set({\n        ...supplyData,\n        updatedAt: new Date(),\n      })\n      .where(eq(schoolSupplies.id, id))\n      .returning();\n    return supply;\n  }\n\n  async deleteSchoolSupply(id: string): Promise<void> {\n    await db\n      .update(schoolSupplies)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(schoolSupplies.id, id));\n  }\n\n  // Supply Purchase operations\n  async createSupplyPurchase(purchaseData: InsertSupplyPurchase): Promise<SupplyPurchase> {\n    return db.transaction(async (tx) => {\n      // Convert string date to Date object if needed\n      const purchaseDate = typeof purchaseData.purchaseDate === 'string' \n        ? new Date(purchaseData.purchaseDate) \n        : purchaseData.purchaseDate;\n\n      // Create purchase record\n      const [purchase] = await tx.insert(supplyPurchases).values({\n        ...purchaseData,\n        purchaseDate,\n        createdAt: new Date(),\n      }).returning();\n\n      // Update supply stock and unit price\n      await tx\n        .update(schoolSupplies)\n        .set({\n          currentStock: sql`${schoolSupplies.currentStock} + ${purchaseData.quantity}`,\n          unitPrice: purchaseData.unitPrice, // Update to latest purchase price\n          updatedAt: new Date()\n        })\n        .where(eq(schoolSupplies.id, purchaseData.supplyId));\n\n      return purchase;\n    });\n  }\n\n  async getSupplyPurchases(supplyId: string): Promise<SupplyPurchase[]> {\n    return await db\n      .select()\n      .from(supplyPurchases)\n      .where(eq(supplyPurchases.supplyId, supplyId))\n      .orderBy(desc(supplyPurchases.purchaseDate));\n  }\n\n  // Supply Usage operations\n  async createSupplyUsage(usageData: InsertSupplyUsage): Promise<SupplyUsage> {\n    return db.transaction(async (tx) => {\n      // Check current stock\n      const [supply] = await tx.select().from(schoolSupplies).where(eq(schoolSupplies.id, usageData.supplyId));\n      if (!supply || (supply.currentStock || 0) < usageData.quantity) {\n        throw new Error('Insufficient stock for this usage');\n      }\n\n      // Convert string date to Date object if needed\n      const usageDate = typeof usageData.usageDate === 'string' \n        ? new Date(usageData.usageDate) \n        : usageData.usageDate;\n\n      // Create usage record\n      const [usage] = await tx.insert(supplyUsage).values({\n        ...usageData,\n        usageDate,\n        createdAt: new Date(),\n      }).returning();\n\n      // Update stock\n      await tx\n        .update(schoolSupplies)\n        .set({\n          currentStock: sql`${schoolSupplies.currentStock} - ${usageData.quantity}`,\n          updatedAt: new Date()\n        })\n        .where(eq(schoolSupplies.id, usageData.supplyId));\n\n      return usage;\n    });\n  }\n\n  async getSupplyUsage(supplyId: string): Promise<SupplyUsage[]> {\n    return await db\n      .select()\n      .from(supplyUsage)\n      .where(eq(supplyUsage.supplyId, supplyId))\n      .orderBy(desc(supplyUsage.usageDate));\n  }\n\n  // Supply Room Assignment operations\n  async assignSupplyToRoom(assignmentData: InsertSupplyRoomAssignment): Promise<SupplyRoomAssignment> {\n    return db.transaction(async (tx) => {\n      // Check available supply stock\n      const [supply] = await tx.select().from(schoolSupplies).where(eq(schoolSupplies.id, assignmentData.supplyId));\n      if (!supply || (supply.currentStock || 0) < assignmentData.quantity) {\n        throw new Error('Insufficient stock for this assignment');\n      }\n\n      // Check room capacity\n      const [building] = await tx.select().from(schoolBuildings).where(eq(schoolBuildings.id, assignmentData.buildingId));\n      if (!building) {\n        throw new Error('Building not found');\n      }\n\n      // Find the specific room in the building\n      const rooms = building.rooms as any[];\n      const room = rooms.find(r => r.id === assignmentData.roomId);\n      if (!room || room.type !== 'storage') {\n        throw new Error('Storage room not found or room is not a storage type');\n      }\n\n      // Check current room assignments for capacity\n      const currentAssignments = await tx\n        .select()\n        .from(supplyRoomAssignments)\n        .where(and(\n          eq(supplyRoomAssignments.roomId, assignmentData.roomId),\n          eq(supplyRoomAssignments.isActive, true)\n        ));\n\n      const currentUsedCapacity = currentAssignments.reduce((total, assignment) => total + (assignment.quantity || 0), 0);\n      const availableCapacity = (room.capacity || 0) - currentUsedCapacity;\n\n      if (assignmentData.quantity > availableCapacity) {\n        throw new Error(`Insufficient room capacity. Available: ${availableCapacity}, Required: ${assignmentData.quantity}`);\n      }\n\n      // Convert string date to Date object if needed\n      const assignedDate = typeof assignmentData.assignedDate === 'string' \n        ? new Date(assignmentData.assignedDate) \n        : assignmentData.assignedDate;\n\n      // Create assignment record\n      const [assignment] = await tx.insert(supplyRoomAssignments).values({\n        ...assignmentData,\n        assignedDate,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }).returning();\n\n      return assignment;\n    });\n  }\n\n  async getSupplyRoomAssignments(supplyId: string): Promise<SupplyRoomAssignment[]> {\n    return await db\n      .select()\n      .from(supplyRoomAssignments)\n      .where(and(eq(supplyRoomAssignments.supplyId, supplyId), eq(supplyRoomAssignments.isActive, true)))\n      .orderBy(desc(supplyRoomAssignments.assignedDate));\n  }\n\n  async getStorageRoomsWithCapacity(schoolId: string): Promise<any[]> {\n    const buildings = await db\n      .select()\n      .from(schoolBuildings)\n      .where(and(eq(schoolBuildings.schoolId, schoolId), eq(schoolBuildings.isActive, true)));\n\n    const storageRoomsWithCapacity = [];\n\n    for (const building of buildings) {\n      const rooms = building.rooms as any[];\n      const storageRooms = rooms.filter(room => room.type === 'storage' && room.isActive);\n\n      for (const room of storageRooms) {\n        // Get current assignments for this room\n        const currentAssignments = await db\n          .select()\n          .from(supplyRoomAssignments)\n          .where(and(\n            eq(supplyRoomAssignments.roomId, room.id),\n            eq(supplyRoomAssignments.buildingId, building.id),\n            eq(supplyRoomAssignments.isActive, true)\n          ));\n\n        const totalAssigned = currentAssignments.reduce((total, assignment) => total + (assignment.quantity || 0), 0);\n        const totalCapacity = room.capacity || 0;\n        const availableCapacity = totalCapacity - totalAssigned;\n\n        storageRoomsWithCapacity.push({\n          buildingId: building.id,\n          buildingName: building.buildingName,\n          roomId: room.id,\n          roomName: room.name,\n          floor: room.floor,\n          totalCapacity,\n          assignedCapacity: totalAssigned,\n          availableCapacity,\n          assignments: currentAssignments\n        });\n      }\n    }\n\n    return storageRoomsWithCapacity;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":62541},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  boolean,\n  integer,\n  decimal,\n  jsonb,\n  pgEnum,\n  index,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\n  \"superadmin\",\n  \"school_admin\", \n  \"branch_admin\",\n  \"teacher\",\n  \"student\",\n  \"parent\",\n]);\n\nexport const schoolTypeEnum = pgEnum(\"school_type\", [\n  \"K12\", \n  \"NIGERIAN\",\n  \"SKILL_ACQUISITION\",\n  \"ADULT_LEARNING\", \n  \"TRAINING_CENTER\",\n  \"VOCATIONAL\",\n  \"TERTIARY\"\n]);\n\nexport const schoolStatusEnum = pgEnum(\"school_status\", [\"ACTIVE\", \"DISABLED\"]);\n\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\"PENDING\", \"PAID\", \"UNPAID\"]);\n\nexport const invoiceStatusEnum = pgEnum(\"invoice_status\", [\"DRAFT\", \"SENT\", \"PAID\", \"OVERDUE\", \"CANCELLED\"]);\n\nexport const pricingTypeEnum = pgEnum(\"pricing_type\", [\n  \"per_student\",\n  \"per_staff\", \n  \"per_term\",\n  \"per_semester\",\n  \"per_school\",\n  \"per_month\",\n  \"per_year\",\n  \"one_time\",\n  \"pay_as_you_go\",\n  \"custom\",\n  \"free\"\n]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").notNull().unique(),\n  password: varchar(\"password\").notNull(),\n  name: varchar(\"name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"student\"),\n  schoolId: varchar(\"school_id\"),\n  branchId: varchar(\"branch_id\"),\n  forcePasswordChange: boolean(\"force_password_change\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schools table\nexport const schools = pgTable(\"schools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  shortName: varchar(\"short_name\").notNull().unique(),\n  abbreviation: varchar(\"abbreviation\"),\n  motto: text(\"motto\"),\n  state: varchar(\"state\"),\n  lga: varchar(\"lga\"),\n  address: text(\"address\"),\n  phones: jsonb(\"phones\").$type<string[]>().notNull().default(sql`'[]'::jsonb`),\n  email: varchar(\"email\"),\n  logoUrl: varchar(\"logo_url\"),\n  type: schoolTypeEnum(\"type\").notNull().default(\"K12\"),\n  status: schoolStatusEnum(\"status\").notNull().default(\"ACTIVE\"),\n  mainBranchId: varchar(\"main_branch_id\"),\n  paymentStatus: paymentStatusEnum(\"payment_status\").notNull().default(\"PENDING\"),\n  nextPaymentDue: timestamp(\"next_payment_due\"),\n  accessBlockedAt: timestamp(\"access_blocked_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Branches table\nexport const branches = pgTable(\"branches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  isMain: boolean(\"is_main\").default(false),\n  status: varchar(\"status\").default(\"active\"), // active, suspended, deleted\n  credentials: jsonb(\"credentials\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Features table\nexport const features = pgTable(\"features\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").notNull().unique(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\"), // Price in smallest currency unit (kobo) - optional\n  pricingType: pricingTypeEnum(\"pricing_type\").default(\"per_school\"), // Unit measurement for pricing\n  category: varchar(\"category\").default(\"general\"),\n  isCore: boolean(\"is_core\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  requiresDateRange: boolean(\"requires_date_range\").default(false), // If feature needs start/end dates\n  type: jsonb(\"type\").default('{\"module\": false, \"standalone\": false, \"both\": false}'), // Feature type information\n  menuLinks: jsonb(\"menu_links\").default('[]'), // Default menu links for the feature\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// School Features pivot table\nexport const schoolFeatures = pgTable(\"school_features\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  featureId: varchar(\"feature_id\").notNull(),\n  enabled: boolean(\"enabled\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  schoolFeatureUnique: unique().on(table.schoolId, table.featureId),\n}));\n\n// School Feature Setup table - for managing menu links per school\nexport const schoolFeatureSetup = pgTable(\"school_feature_setup\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  featureId: varchar(\"feature_id\").notNull(),\n  menuLinks: jsonb(\"menu_links\").notNull().default('[]'), // Customized menu links for this school\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  schoolFeatureSetupUnique: unique().on(table.schoolId, table.featureId),\n}));\n\n// Sections table - for organizing students within grades\nexport const sections = pgTable(\"sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"A\", \"B\", \"C\", \"Alpha\", \"Beta\"\n  code: varchar(\"code\").notNull(), // e.g., \"A\", \"B\", \"C\"\n  capacity: integer(\"capacity\").default(30), // Maximum students\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Grade Sections table\nexport const gradeSections = pgTable(\"grade_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  sectionId: varchar(\"section_id\"), // Reference to section within the grade\n  name: varchar(\"name\").notNull(),\n  code: varchar(\"code\").notNull(),\n  type: varchar(\"type\"), // \"primary\", \"junior\", \"senior\", \"nursery\"\n  order: integer(\"order\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Invoice templates table - for default and school-specific invoice templates\nexport const invoiceTemplates = pgTable(\"invoice_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\"), // null for default template\n  name: varchar(\"name\").notNull(),\n  templateType: varchar(\"template_type\").notNull().default(\"modern\"), // modern, classic, minimal\n  primaryColor: varchar(\"primary_color\").default(\"#2563eb\"),\n  accentColor: varchar(\"accent_color\").default(\"#64748b\"),\n  logoUrl: varchar(\"logo_url\"),\n  watermarkUrl: varchar(\"watermark_url\"),\n  backgroundImageUrl: varchar(\"background_image_url\"),\n  customization: jsonb(\"customization\").default('{\"showWatermark\": false, \"showBackgroundImage\": false, \"headerStyle\": \"default\", \"footerText\": \"\"}'),\n  isDefault: boolean(\"is_default\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Invoice Generation Assets table - for storing logos, watermarks, backgrounds\nexport const invoiceAssets = pgTable(\"invoice_assets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\"), // null for system-wide assets\n  name: varchar(\"name\").notNull(),\n  type: varchar(\"type\").notNull(), // \"logo\", \"watermark\", \"background\"\n  url: varchar(\"url\").notNull(),\n  size: integer(\"size\"), // File size in bytes\n  mimeType: varchar(\"mime_type\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Assets table for school asset management\nexport const assets = pgTable(\"assets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // \"Equipment\", \"Furniture\", \"Technology\", \"Sports\", \"Other\"\n  type: varchar(\"type\").notNull(), // More specific type within category\n  serialNumber: varchar(\"serial_number\"),\n  model: varchar(\"model\"),\n  brand: varchar(\"brand\"),\n  condition: varchar(\"condition\").notNull().default(\"Good\"), // \"Excellent\", \"Good\", \"Fair\", \"Poor\", \"Damaged\"\n  location: varchar(\"location\"), // References grade_sections\n  totalQuantity: integer(\"total_quantity\").default(1),\n  availableQuantity: integer(\"available_quantity\").default(1),\n  warrantyExpiry: timestamp(\"warranty_expiry\"),\n  maintenanceSchedule: text(\"maintenance_schedule\"),\n  notes: text(\"notes\"),\n  imageUrl: varchar(\"image_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  schoolAssetIdx: index(\"idx_assets_school\").on(table.schoolId),\n  categoryIdx: index(\"idx_assets_category\").on(table.category),\n  activeIdx: index(\"idx_assets_active\").on(table.isActive),\n}));\n\n// Asset Purchase History for tracking price changes and quantity additions\nexport const assetPurchases = pgTable(\"asset_purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assetId: varchar(\"asset_id\")\n    .notNull()\n    .references(() => assets.id, { onDelete: \"cascade\" }),\n  purchaseDate: timestamp(\"purchase_date\").notNull(),\n  purchasePrice: decimal(\"purchase_price\", { precision: 10, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  supplier: varchar(\"supplier\"),\n  invoiceNumber: varchar(\"invoice_number\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\")\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Asset Assignments for tracking where assets are assigned\nexport const assetAssignments = pgTable(\"asset_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assetId: varchar(\"asset_id\")\n    .notNull()\n    .references(() => assets.id, { onDelete: \"cascade\" }),\n  assignedTo: varchar(\"assigned_to\"), // Could be user ID, class, or location\n  assignmentType: varchar(\"assignment_type\").notNull(), // 'user', 'class', 'location'\n  location: varchar(\"location\"), // Specific location/grade section\n  quantity: integer(\"quantity\").notNull().default(1),\n  assignedDate: timestamp(\"assigned_date\").notNull(),\n  returnDate: timestamp(\"return_date\"),\n  status: varchar(\"status\").default(\"assigned\"), // 'assigned', 'returned', 'damaged'\n  notes: text(\"notes\"),\n  assignedBy: varchar(\"assigned_by\")\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// School Supplies table for consumable items management\nexport const schoolSupplies = pgTable(\"school_supplies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\").notNull(), // \"Uniforms\", \"Textbooks\", \"Stationery\", \"Sports\", \"Cleaning\", \"Other\"\n  type: varchar(\"type\").notNull(), // More specific type within category\n  unit: varchar(\"unit\").notNull().default(\"piece\"), // \"piece\", \"set\", \"kg\", \"liter\", \"meter\", etc.\n  currentStock: integer(\"current_stock\").default(0),\n  minimumStock: integer(\"minimum_stock\").default(0),\n  maximumStock: integer(\"maximum_stock\").default(1000),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n  supplier: varchar(\"supplier\"),\n  location: varchar(\"location\"), // Storage location - will be linked to room_id\n  roomId: varchar(\"room_id\"), // Reference to room within building\n  buildingId: varchar(\"building_id\"), // Reference to school building\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: varchar(\"created_by\")\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  schoolSupplyIdx: index(\"idx_supplies_school\").on(table.schoolId),\n  categoryIdx: index(\"idx_supplies_category\").on(table.category),\n  activeIdx: index(\"idx_supplies_active\").on(table.isActive),\n}));\n\n// Supply Purchase History for tracking supply purchases\nexport const supplyPurchases = pgTable(\"supply_purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplyId: varchar(\"supply_id\")\n    .notNull()\n    .references(() => schoolSupplies.id, { onDelete: \"cascade\" }),\n  purchaseDate: timestamp(\"purchase_date\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  supplier: varchar(\"supplier\"),\n  invoiceNumber: varchar(\"invoice_number\"),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\")\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Supply Usage/Distribution tracking\nexport const supplyUsage = pgTable(\"supply_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplyId: varchar(\"supply_id\")\n    .notNull()\n    .references(() => schoolSupplies.id, { onDelete: \"cascade\" }),\n  usageType: varchar(\"usage_type\").notNull(), // 'issued', 'sold', 'consumed', 'lost', 'damaged'\n  quantity: integer(\"quantity\").notNull(),\n  recipient: varchar(\"recipient\"), // Who received the supplies\n  purpose: varchar(\"purpose\"), // Purpose of usage\n  usageDate: timestamp(\"usage_date\").notNull(),\n  notes: text(\"notes\"),\n  createdBy: varchar(\"created_by\")\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Supply Room Assignments table\nexport const supplyRoomAssignments = pgTable(\"supply_room_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  supplyId: varchar(\"supply_id\")\n    .notNull()\n    .references(() => schoolSupplies.id, { onDelete: \"cascade\" }),\n  buildingId: varchar(\"building_id\")\n    .notNull()\n    .references(() => schoolBuildings.id),\n  roomId: varchar(\"room_id\").notNull(), // Room ID within the building\n  quantity: integer(\"quantity\").notNull(),\n  assignedDate: timestamp(\"assigned_date\").notNull(),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").default(true),\n  assignedBy: varchar(\"assigned_by\")\n    .notNull()\n    .references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  supplyRoomIdx: index(\"idx_supply_room\").on(table.supplyId, table.roomId),\n  buildingIdx: index(\"idx_supply_building\").on(table.buildingId),\n}));\n\n// Invoices table - updated for feature-based invoicing\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: varchar(\"invoice_number\").notNull().unique(),\n  schoolId: varchar(\"school_id\").notNull(),\n  templateId: varchar(\"template_id\"), // Reference to invoice template used\n  features: jsonb(\"features\").notNull(), // Array of {id, name, price}\n  totalAmount: decimal(\"total_amount\", { precision: 12, scale: 2 }).notNull(), // In kobo\n  customAmount: integer(\"custom_amount\"), // Override amount for negotiated pricing\n  status: invoiceStatusEnum(\"status\").notNull().default(\"DRAFT\"),\n  dueDate: timestamp(\"due_date\").notNull(),\n  paidAt: timestamp(\"paid_at\"),\n  emailSent: boolean(\"email_sent\").default(false),\n  emailSentAt: timestamp(\"email_sent_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Invoice Line Items table\nexport const invoiceLines = pgTable(\"invoice_lines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull(),\n  featureId: varchar(\"feature_id\").notNull(),\n  description: varchar(\"description\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  unitPrice: decimal(\"unit_price\", { precision: 12, scale: 2 }).notNull(),\n  unitMeasurement: pricingTypeEnum(\"unit_measurement\").notNull(),\n  startDate: timestamp(\"start_date\"), // For date-based features\n  endDate: timestamp(\"end_date\"), // For date-based features\n  negotiatedPrice: decimal(\"negotiated_price\", { precision: 12, scale: 2 }), // Final/negotiated price\n  total: decimal(\"total\", { precision: 12, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Subscriptions table (optional for future use)\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  plan: varchar(\"plan\").notNull(),\n  startsAt: timestamp(\"starts_at\").notNull(),\n  endsAt: timestamp(\"ends_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Academic year and term related tables\n\n// Academic Years table\nexport const academicYears = pgTable(\"academic_years\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"2025/2026\"\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  isCurrent: boolean(\"is_current\").default(false), // Only one current year per school\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Academic Terms table\nexport const academicTerms = pgTable(\"academic_terms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"Term 1\", \"First Semester\"\n  code: varchar(\"code\").notNull(), // e.g., \"T1\", \"S1\"\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  isCurrent: boolean(\"is_current\").default(false), // Only one current term per academic year\n  order: integer(\"order\").notNull(), // 1, 2, 3\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Academic Weeks table\nexport const academicWeeks = pgTable(\"academic_weeks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  academicTermId: varchar(\"academic_term_id\").notNull(),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  weekNumber: integer(\"week_number\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Classes table (e.g., Primary 1 A, SS2 Science)\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  gradeSectionId: varchar(\"grade_section_id\").notNull(), // Reference to grade (Primary 1, SS2, etc.)\n  sectionId: varchar(\"section_id\"), // Reference to section (A, B, C, etc.)\n  name: varchar(\"name\").notNull(), // e.g., \"Primary 1 A\", \"SS2 Science A\"\n  code: varchar(\"code\").notNull(), // e.g., \"P1A\", \"SS2SA\"\n  department: varchar(\"department\"), // For secondary: Science, Arts, Economics\n  capacity: integer(\"capacity\").default(30),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subjects table\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"Mathematics\", \"English\"\n  code: varchar(\"code\").notNull(), // e.g., \"MATH\", \"ENG\"\n  description: text(\"description\"),\n  isCore: boolean(\"is_core\").default(false), // Core subjects are mandatory\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Class Subjects table (Many-to-many relationship)\nexport const classSubjects = pgTable(\"class_subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").notNull(),\n  subjectId: varchar(\"subject_id\").notNull(),\n  teacherId: varchar(\"teacher_id\"), // Assigned teacher\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  classSubjectUnique: unique().on(table.classId, table.subjectId),\n}));\n\n// Staff Types table\nexport const staffTypes = pgTable(\"staff_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"Teacher\", \"Administrator\", \"Support Staff\"\n  code: varchar(\"code\").notNull(), // e.g., \"TCH\", \"ADM\", \"SUP\"\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Staff table\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  staffTypeId: varchar(\"staff_type_id\").notNull(),\n  employeeId: varchar(\"employee_id\").notNull(), // Unique employee identifier\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  hireDate: timestamp(\"hire_date\").notNull(),\n  salary: decimal(\"salary\", { precision: 12, scale: 2 }),\n  isActive: boolean(\"is_active\").default(true),\n  meta: jsonb(\"meta\"), // Additional flexible data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  employeeIdUnique: unique().on(table.schoolId, table.employeeId),\n}));\n\n// Staff Assignments table (for class and subject assignments)\nexport const staffAssignments = pgTable(\"staff_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").notNull(),\n  classId: varchar(\"class_id\"),\n  subjectId: varchar(\"subject_id\"),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  academicTermId: varchar(\"academic_term_id\"),\n  assignmentType: varchar(\"assignment_type\").notNull(), // \"class_teacher\", \"subject_teacher\", \"head_of_department\"\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schedules/Timetable table\nexport const schedules = pgTable(\"schedules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  classId: varchar(\"class_id\").notNull(),\n  subjectId: varchar(\"subject_id\").notNull(),\n  staffId: varchar(\"staff_id\").notNull(),\n  academicYearId: varchar(\"academic_year_id\").notNull(),\n  academicTermId: varchar(\"academic_term_id\").notNull(),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 1-7 (Monday to Sunday)\n  startTime: varchar(\"start_time\").notNull(), // \"08:00\"\n  endTime: varchar(\"end_time\").notNull(), // \"09:00\"\n  room: varchar(\"room\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// School Setup Sections table (groupings for classes like Primary, Junior Secondary, etc.)\nexport const schoolSections = pgTable(\"school_sections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"Primary\", \"Junior Secondary\", \"Senior Secondary\"\n  code: varchar(\"code\").notNull(), // e.g., \"PRI\", \"JSS\", \"SSS\"\n  description: text(\"description\"),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  sectionCodeUnique: unique().on(table.schoolId, table.branchId, table.code),\n}));\n\n// Enhanced Classes table with section relationships and levels\nexport const classLevels = pgTable(\"class_levels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  sectionId: varchar(\"section_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"JSS1\", \"SSS2\"\n  levelLabel: varchar(\"level_label\").default(\"A\"), // e.g., \"A\", \"B\", \"C\"\n  fullName: varchar(\"full_name\").notNull(), // e.g., \"JSS1A\", \"SSS2B\"\n  capacity: integer(\"capacity\").default(0),\n  sortOrder: integer(\"sort_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  classLevelUnique: unique().on(table.schoolId, table.branchId, table.fullName),\n}));\n\n// Enhanced Subjects table with department support for Senior Secondary\nexport const subjectsDepartments = pgTable(\"subjects_departments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(), // e.g., \"Science\", \"Arts\", \"Commercial\"\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  departmentNameUnique: unique().on(table.schoolId, table.branchId, table.name),\n}));\n\n// Enhanced Subjects with department relationships\nexport const enhancedSubjects = pgTable(\"enhanced_subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  code: varchar(\"code\").notNull(),\n  description: text(\"description\"),\n  departmentId: varchar(\"department_id\"), // For Senior Secondary subjects\n  isCore: boolean(\"is_core\").default(false), // Core vs Elective\n  creditUnits: integer(\"credit_units\").default(1),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  subjectCodeUnique: unique().on(table.schoolId, table.branchId, table.code),\n}));\n\n// Subject-Class assignments (many-to-many)\nexport const subjectClassAssignments = pgTable(\"subject_class_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subjectId: varchar(\"subject_id\").notNull(),\n  classLevelId: varchar(\"class_level_id\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  subjectClassUnique: unique().on(table.subjectId, table.classLevelId),\n}));\n\n\n\n// Branch Admins table\nexport const branchAdmins = pgTable(\"branch_admins\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\").notNull(),\n  userId: varchar(\"user_id\").notNull(),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n}, (table) => ({\n  branchAdminUnique: unique().on(table.branchId, table.userId),\n}));\n\n// Type exports for new tables\nexport type StaffType = typeof staffTypes.$inferSelect;\nexport type InsertStaffType = typeof staffTypes.$inferInsert;\nexport type Staff = typeof staff.$inferSelect;\nexport type InsertStaff = typeof staff.$inferInsert;\nexport type StaffAssignment = typeof staffAssignments.$inferSelect;\nexport type InsertStaffAssignment = typeof staffAssignments.$inferInsert;\nexport type Schedule = typeof schedules.$inferSelect;\nexport type InsertSchedule = typeof schedules.$inferInsert;\n\n// School Setup types\nexport type SchoolSection = typeof schoolSections.$inferSelect;\nexport type InsertSchoolSection = typeof schoolSections.$inferInsert;\nexport type ClassLevel = typeof classLevels.$inferSelect;\nexport type InsertClassLevel = typeof classLevels.$inferInsert;\nexport type SubjectDepartment = typeof subjectsDepartments.$inferSelect;\nexport type InsertSubjectDepartment = typeof subjectsDepartments.$inferInsert;\nexport type EnhancedSubject = typeof enhancedSubjects.$inferSelect;\nexport type InsertEnhancedSubject = typeof enhancedSubjects.$inferInsert;\nexport type SubjectClassAssignment = typeof subjectClassAssignments.$inferSelect;\nexport type InsertSubjectClassAssignment = typeof subjectClassAssignments.$inferInsert;\nexport type BranchAdmin = typeof branchAdmins.$inferSelect;\nexport type InsertBranchAdmin = typeof branchAdmins.$inferInsert;\n\n// Asset types\nexport type Asset = typeof assets.$inferSelect;\nexport type InsertAsset = typeof assets.$inferInsert;\n\n// Asset Zod schemas\nexport const insertAssetSchema = createInsertSchema(assets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAssetPurchaseSchema = createInsertSchema(assetPurchases).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssetAssignmentSchema = createInsertSchema(assetAssignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSchoolSupplySchema = createInsertSchema(schoolSupplies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupplyPurchaseSchema = createInsertSchema(supplyPurchases).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSupplyUsageSchema = createInsertSchema(supplyUsage).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSupplyRoomAssignmentSchema = createInsertSchema(supplyRoomAssignments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateAssetSchema = insertAssetSchema.partial();\nexport type InsertAssetInput = z.infer<typeof insertAssetSchema>;\nexport type UpdateAssetInput = z.infer<typeof updateAssetSchema>;\nexport type InsertAssetPurchase = z.infer<typeof insertAssetPurchaseSchema>;\nexport type InsertAssetAssignment = z.infer<typeof insertAssetAssignmentSchema>;\nexport type AssetPurchase = typeof assetPurchases.$inferSelect;\nexport type AssetAssignment = typeof assetAssignments.$inferSelect;\nexport type SchoolSupply = typeof schoolSupplies.$inferSelect;\nexport type InsertSchoolSupply = z.infer<typeof insertSchoolSupplySchema>;\nexport type SupplyPurchase = typeof supplyPurchases.$inferSelect;\nexport type InsertSupplyPurchase = z.infer<typeof insertSupplyPurchaseSchema>;\nexport type SupplyUsage = typeof supplyUsage.$inferSelect;\nexport type InsertSupplyUsage = z.infer<typeof insertSupplyUsageSchema>;\nexport type SupplyRoomAssignment = typeof supplyRoomAssignments.$inferSelect;\nexport type InsertSupplyRoomAssignment = z.infer<typeof insertSupplyRoomAssignmentSchema>;\n\n// School Suppliers table\nexport const schoolSuppliers = pgTable(\"school_suppliers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  name: varchar(\"name\").notNull(),\n  contactPerson: varchar(\"contact_person\"),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  productTypes: text(\"product_types\").array(), // Array of product types they supply\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  supplierNameUnique: unique().on(table.schoolId, table.name),\n}));\n\n// School Buildings/Blocks table\nexport const schoolBuildings = pgTable(\"school_buildings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  schoolId: varchar(\"school_id\").notNull(),\n  branchId: varchar(\"branch_id\"),\n  buildingName: varchar(\"building_name\").notNull(),\n  buildingCode: varchar(\"building_code\"),\n  description: text(\"description\"),\n  totalFloors: integer(\"total_floors\").default(1),\n  rooms: jsonb(\"rooms\").default([]), // Array of room objects with id, name, floor, type\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  buildingNameUnique: unique().on(table.schoolId, table.buildingName),\n}));\n\n// Enhanced Asset type with purchase history and assignments\nexport type AssetWithDetails = Asset & {\n  purchases: AssetPurchase[];\n  assignments: AssetAssignment[];\n  currentValue: number;\n  totalPurchaseCost: number;\n};\n\n// Supplier types\nexport type SchoolSupplier = typeof schoolSuppliers.$inferSelect;\nexport type InsertSchoolSupplier = typeof schoolSuppliers.$inferInsert;\n\n// Supplier Zod schemas\nexport const insertSchoolSupplierSchema = createInsertSchema(schoolSuppliers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateSchoolSupplierSchema = insertSchoolSupplierSchema.partial();\nexport type InsertSchoolSupplierInput = z.infer<typeof insertSchoolSupplierSchema>;\nexport type UpdateSchoolSupplierInput = z.infer<typeof updateSchoolSupplierSchema>;\n\n// Building types\nexport type SchoolBuilding = typeof schoolBuildings.$inferSelect;\nexport type InsertSchoolBuilding = typeof schoolBuildings.$inferInsert;\n\n// Building Zod schemas\nexport const insertSchoolBuildingSchema = createInsertSchema(schoolBuildings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const updateSchoolBuildingSchema = insertSchoolBuildingSchema.partial();\nexport type InsertSchoolBuildingInput = z.infer<typeof insertSchoolBuildingSchema>;\nexport type UpdateSchoolBuildingInput = z.infer<typeof updateSchoolBuildingSchema>;\n\n// Relations\nexport const userRelations = relations(users, ({ one }) => ({\n  school: one(schools, {\n    fields: [users.schoolId],\n    references: [schools.id],\n  }),\n  branch: one(branches, {\n    fields: [users.branchId],\n    references: [branches.id],\n  }),\n}));\n\nexport const schoolRelations = relations(schools, ({ many }) => ({\n  branches: many(branches),\n  users: many(users),\n  features: many(schoolFeatures),\n  gradeSections: many(gradeSections),\n  invoices: many(invoices),\n  subscriptions: many(subscriptions),\n}));\n\nexport const branchRelations = relations(branches, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [branches.schoolId],\n    references: [schools.id],\n  }),\n  users: many(users),\n}));\n\nexport const featureRelations = relations(features, ({ many }) => ({\n  schools: many(schoolFeatures),\n}));\n\nexport const schoolFeatureRelations = relations(schoolFeatures, ({ one }) => ({\n  school: one(schools, {\n    fields: [schoolFeatures.schoolId],\n    references: [schools.id],\n  }),\n  feature: one(features, {\n    fields: [schoolFeatures.featureId],\n    references: [features.id],\n  }),\n}));\n\nexport const gradeSectionRelations = relations(gradeSections, ({ one }) => ({\n  school: one(schools, {\n    fields: [gradeSections.schoolId],\n    references: [schools.id],\n  }),\n}));\n\nexport const invoiceRelations = relations(invoices, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [invoices.schoolId],\n    references: [schools.id],\n  }),\n  lines: many(invoiceLines),\n}));\n\nexport const invoiceLineRelations = relations(invoiceLines, ({ one }) => ({\n  invoice: one(invoices, {\n    fields: [invoiceLines.invoiceId],\n    references: [invoices.id],\n  }),\n}));\n\nexport const subscriptionRelations = relations(subscriptions, ({ one }) => ({\n  school: one(schools, {\n    fields: [subscriptions.schoolId],\n    references: [schools.id],\n  }),\n}));\n\n// Academic year relations\nexport const academicYearRelations = relations(academicYears, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [academicYears.schoolId],\n    references: [schools.id],\n  }),\n  branch: one(branches, {\n    fields: [academicYears.branchId],\n    references: [branches.id],\n  }),\n  terms: many(academicTerms),\n}));\n\nexport const academicTermRelations = relations(academicTerms, ({ one, many }) => ({\n  academicYear: one(academicYears, {\n    fields: [academicTerms.academicYearId],\n    references: [academicYears.id],\n  }),\n  school: one(schools, {\n    fields: [academicTerms.schoolId],\n    references: [schools.id],\n  }),\n  branch: one(branches, {\n    fields: [academicTerms.branchId],\n    references: [branches.id],\n  }),\n  weeks: many(academicWeeks),\n}));\n\nexport const academicWeekRelations = relations(academicWeeks, ({ one }) => ({\n  academicTerm: one(academicTerms, {\n    fields: [academicWeeks.academicTermId],\n    references: [academicTerms.id],\n  }),\n  school: one(schools, {\n    fields: [academicWeeks.schoolId],\n    references: [schools.id],\n  }),\n  branch: one(branches, {\n    fields: [academicWeeks.branchId],\n    references: [branches.id],\n  }),\n}));\n\nexport const classRelations = relations(classes, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [classes.schoolId],\n    references: [schools.id],\n  }),\n  branch: one(branches, {\n    fields: [classes.branchId],\n    references: [branches.id],\n  }),\n  gradeSection: one(gradeSections, {\n    fields: [classes.gradeSectionId],\n    references: [gradeSections.id],\n  }),\n  section: one(sections, {\n    fields: [classes.sectionId],\n    references: [sections.id],\n  }),\n  subjects: many(classSubjects),\n}));\n\nexport const subjectRelations = relations(subjects, ({ one, many }) => ({\n  school: one(schools, {\n    fields: [subjects.schoolId],\n    references: [schools.id],\n  }),\n  branch: one(branches, {\n    fields: [subjects.branchId],\n    references: [branches.id],\n  }),\n  classes: many(classSubjects),\n}));\n\nexport const classSubjectRelations = relations(classSubjects, ({ one }) => ({\n  class: one(classes, {\n    fields: [classSubjects.classId],\n    references: [classes.id],\n  }),\n  subject: one(subjects, {\n    fields: [classSubjects.subjectId],\n    references: [subjects.id],\n  }),\n  teacher: one(users, {\n    fields: [classSubjects.teacherId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSchoolSchema = createInsertSchema(schools).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBranchSchema = createInsertSchema(branches).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeatureSchema = createInsertSchema(features).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSchoolFeatureSchema = createInsertSchema(schoolFeatures).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSectionSchema = createInsertSchema(sections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGradeSectionSchema = createInsertSchema(gradeSections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvoiceLineSchema = createInsertSchema(invoiceLines).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceTemplateSchema = createInsertSchema(invoiceTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvoiceAssetSchema = createInsertSchema(invoiceAssets).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAcademicYearSchema = createInsertSchema(academicYears).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAcademicTermSchema = createInsertSchema(academicTerms).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAcademicWeekSchema = createInsertSchema(academicWeeks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertClassSubjectSchema = createInsertSchema(classSubjects).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type School = typeof schools.$inferSelect;\nexport type InsertSchool = z.infer<typeof insertSchoolSchema>;\nexport type Branch = typeof branches.$inferSelect;\nexport type InsertBranch = z.infer<typeof insertBranchSchema>;\nexport type Feature = typeof features.$inferSelect;\nexport type InsertFeature = z.infer<typeof insertFeatureSchema>;\nexport type SchoolFeature = typeof schoolFeatures.$inferSelect;\nexport type InsertSchoolFeature = z.infer<typeof insertSchoolFeatureSchema>;\nexport type Section = typeof sections.$inferSelect;\nexport type InsertSection = z.infer<typeof insertSectionSchema>;\nexport type GradeSection = typeof gradeSections.$inferSelect;\nexport type InsertGradeSection = z.infer<typeof insertGradeSectionSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type InvoiceLine = typeof invoiceLines.$inferSelect;\nexport type InsertInvoiceLine = z.infer<typeof insertInvoiceLineSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\n// Extended types for API responses\nexport type SchoolWithDetails = School & {\n  mainBranch?: Branch;\n  branches: Branch[];\n  features: (SchoolFeature & { feature: Feature })[];\n  gradeSections: GradeSection[];\n  _count?: {\n    users: number;\n    branches: number;\n  };\n};\n\nexport type InvoiceTemplate = typeof invoiceTemplates.$inferSelect;\nexport type InsertInvoiceTemplate = z.infer<typeof insertInvoiceTemplateSchema>;\nexport type InvoiceAsset = typeof invoiceAssets.$inferSelect;\nexport type InsertInvoiceAsset = z.infer<typeof insertInvoiceAssetSchema>;\n\nexport type InvoiceWithLines = Invoice & {\n  school: School;\n  lines: InvoiceLine[];\n};\n\nexport type AcademicYear = typeof academicYears.$inferSelect;\nexport type InsertAcademicYear = z.infer<typeof insertAcademicYearSchema>;\nexport type AcademicTerm = typeof academicTerms.$inferSelect;\nexport type InsertAcademicTerm = z.infer<typeof insertAcademicTermSchema>;\nexport type AcademicWeek = typeof academicWeeks.$inferSelect;\nexport type InsertAcademicWeek = z.infer<typeof insertAcademicWeekSchema>;\nexport type Class = typeof classes.$inferSelect;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type Subject = typeof subjects.$inferSelect;\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\nexport type ClassSubject = typeof classSubjects.$inferSelect;\nexport type InsertClassSubject = z.infer<typeof insertClassSubjectSchema>;\n\n// Connection Status Enum\nexport const connectionStatusEnum = pgEnum(\"connection_status\", [\n  \"connected\", \n  \"disconnected\", \n  \"error\", \n  \"testing\"\n]);\n\n// App Config table for comprehensive application configuration with connection status\nexport const appConfig = pgTable(\"app_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  \n  // Basic App Settings\n  appName: varchar(\"app_name\").default(\"Elite Scholar\"),\n  appLogo: varchar(\"app_logo\"),\n  domain: varchar(\"domain\"),\n  \n  // SendGrid Email Configuration\n  sendgridApiKey: varchar(\"sendgrid_api_key\"),\n  sendgridFromEmail: varchar(\"sendgrid_from_email\"),\n  sendgridFromName: varchar(\"sendgrid_from_name\").default(\"Elite Scholar\"),\n  sendgridStatus: connectionStatusEnum(\"sendgrid_status\").default(\"disconnected\"),\n  sendgridLastChecked: timestamp(\"sendgrid_last_checked\"),\n  sendgridErrorMessage: text(\"sendgrid_error_message\"),\n  \n  // SMTP Email Fallback Configuration\n  smtpHost: varchar(\"smtp_host\"),\n  smtpPort: varchar(\"smtp_port\").default(\"587\"),\n  smtpUser: varchar(\"smtp_user\"),\n  smtpPassword: varchar(\"smtp_password\"),\n  smtpSecure: boolean(\"smtp_secure\").default(false),\n  smtpStatus: connectionStatusEnum(\"smtp_status\").default(\"disconnected\"),\n  smtpLastChecked: timestamp(\"smtp_last_checked\"),\n  smtpErrorMessage: text(\"smtp_error_message\"),\n  \n  // Cloudinary Configuration\n  cloudinaryCloudName: varchar(\"cloudinary_cloud_name\"),\n  cloudinaryApiKey: varchar(\"cloudinary_api_key\"),\n  cloudinaryApiSecret: varchar(\"cloudinary_api_secret\"),\n  cloudinaryUploadPreset: varchar(\"cloudinary_upload_preset\"),\n  cloudinaryStatus: connectionStatusEnum(\"cloudinary_status\").default(\"disconnected\"),\n  cloudinaryLastChecked: timestamp(\"cloudinary_last_checked\"),\n  cloudinaryErrorMessage: text(\"cloudinary_error_message\"),\n  \n  // Twilio Communication Configuration\n  twilioAccountSid: varchar(\"twilio_account_sid\"),\n  twilioAuthToken: varchar(\"twilio_auth_token\"),\n  twilioPhoneNumber: varchar(\"twilio_phone_number\"),\n  twilioWhatsappNumber: varchar(\"twilio_whatsapp_number\"),\n  twilioSmsStatus: connectionStatusEnum(\"twilio_sms_status\").default(\"disconnected\"),\n  twilioWhatsappStatus: connectionStatusEnum(\"twilio_whatsapp_status\").default(\"disconnected\"),\n  twilioLastChecked: timestamp(\"twilio_last_checked\"),\n  twilioErrorMessage: text(\"twilio_error_message\"),\n  \n  // Invoice Template Settings\n  invoiceTemplate: text(\"invoice_template\"),\n  invoiceBackgroundImage: varchar(\"invoice_background_image\"),\n  invoiceLogo: varchar(\"invoice_logo\"),\n  \n  // System Settings\n  maintenanceMode: boolean(\"maintenance_mode\").default(false),\n  allowRegistration: boolean(\"allow_registration\").default(true),\n  maxFileUploadSize: integer(\"max_file_upload_size\").default(10485760), // 10MB default\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schema validation for app config\nexport const insertAppConfigSchema = createInsertSchema(appConfig).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  sendgridLastChecked: true,\n  smtpLastChecked: true,\n  cloudinaryLastChecked: true,\n  twilioLastChecked: true,\n});\n\n// App Config types\nexport type AppConfig = typeof appConfig.$inferSelect;\nexport type InsertAppConfig = z.infer<typeof insertAppConfigSchema>;\n\n// Connection test result type\nexport type ConnectionTestResult = {\n  service: string;\n  status: 'connected' | 'disconnected' | 'error';\n  message?: string;\n  lastChecked: Date;\n};\n","size_bytes":47287},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { lazy, Suspense, startTransition } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport LoginPage from \"@/pages/login\";\nimport SchoolLoginPage from \"@/pages/school-login\";\nimport SuperAdminDashboard from \"@/pages/superadmin/dashboard\";\nimport ProfilePage from \"@/pages/superadmin/profile\";\nimport SchoolsPage from \"@/pages/superadmin/schools\";\nimport InvoicesPage from \"@/pages/superadmin/invoices\";\nimport EnhancedInvoicesPage from \"@/pages/superadmin/invoices-enhanced\";\nimport SettingsPage from \"@/pages/superadmin/settings\";\n\n// School pages\nconst SchoolDashboard = lazy(() => import(\"./pages/school/dashboard\"));\nconst AcademicYearsPage = lazy(() => import(\"./pages/school/academic-years\"));\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const FeaturesPage = lazy(() => import(\"./pages/superadmin/features\"));\n  const AnalyticsPage = lazy(() => import(\"./pages/superadmin/analytics\"));\n\n  return (\n    <Switch>\n      {!user ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/login\" component={LoginPage} />\n          <Route path=\"/school-login\" component={SchoolLoginPage} />\n        </>\n      ) : (\n        <>\n          {user.role === \"superadmin\" && (\n            <>\n              <Route path=\"/\" component={SuperAdminDashboard} />\n              <Route path=\"/superadmin\" component={SuperAdminDashboard} />\n              <Route path=\"/superadmin/schools\" component={SchoolsPage} />\n              <Route path=\"/superadmin/invoices\" component={InvoicesPage} />\n              <Route path=\"/superadmin/invoices-enhanced\" component={EnhancedInvoicesPage} />\n              <Route path=\"/superadmin/invoice-pdf-generator\">\n                <Suspense fallback={<div>Loading PDF generator...</div>}>\n                  {(() => {\n                    const InvoicePDFGeneratorPage = lazy(() => import(\"./pages/superadmin/invoice-pdf-generator\"));\n                    return <InvoicePDFGeneratorPage />;\n                  })()}\n                </Suspense>\n              </Route>\n              <Route path=\"/superadmin/settings\" component={SettingsPage} />\n              <Route path=\"/superadmin/settings-enhanced\">\n                <Suspense fallback={<div>Loading settings...</div>}>\n                  {(() => {\n                    const SettingsEnhancedPage = lazy(() => import(\"./pages/superadmin/settings-enhanced\"));\n                    return <SettingsEnhancedPage />;\n                  })()}\n                </Suspense>\n              </Route>\n              <Route path=\"/superadmin/features\">\n                <Suspense fallback={<div>Loading...</div>}>\n                  <FeaturesPage />\n                </Suspense>\n              </Route>\n              <Route path=\"/superadmin/feature-assignment\">\n                <Suspense fallback={<div>Loading...</div>}>\n                  {(() => {\n                    const FeatureAssignmentPage = lazy(() => import(\"./pages/superadmin/feature-assignment\"));\n                    return <FeatureAssignmentPage />;\n                  })()}\n                </Suspense>\n              </Route>\n              <Route path=\"/superadmin/analytics\">\n                <Suspense fallback={<div>Loading...</div>}>\n                  <AnalyticsPage />\n                </Suspense>\n              </Route>\n              <Route path=\"/superadmin/users\" component={SuperAdminDashboard} />\n              <Route path=\"/superadmin/profile\" component={ProfilePage} />\n              <Route path=\"/superadmin/database\">\n                <Suspense fallback={<div>Loading database...</div>}>\n                  {(() => {\n                    const DatabasePage = lazy(() => import(\"./pages/superadmin/database\"));\n                    return <DatabasePage />;\n                  })()}\n                </Suspense>\n              </Route>\n            </>\n          )}\n          \n          {/* School-specific routes for all school roles */}\n          {(user.role === \"school_admin\" || user.role === \"teacher\" || user.role === \"student\" || user.role === \"parent\") && (\n            <>\n              <Route path=\"/\" component={() => (\n                <Suspense fallback={<div>Loading...</div>}>\n                  <SchoolDashboard />\n                </Suspense>\n              )} />\n              <Route path=\"/school\" component={() => (\n                <Suspense fallback={<div>Loading...</div>}>\n                  <SchoolDashboard />\n                </Suspense>\n              )} />\n              \n              {/* School Admin specific routes */}\n              {user.role === \"school_admin\" && (\n                <>\n                  <Route path=\"/school/academic-years\" component={() => (\n                    <Suspense fallback={<div>Loading...</div>}>\n                      <AcademicYearsPage />\n                    </Suspense>\n                  )} />\n                  <Route path=\"/school/classes\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const ClassesPage = lazy(() => import(\"./pages/school/classes\"));\n                        return <ClassesPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n\n                  {/* Specific asset setup route - must come before generic feature routes */}\n                  <Route path=\"/school/school-setup/asset-setup\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const EnhancedAssetSetupPage = lazy(() => import(\"./pages/school/enhanced-asset-setup\"));\n                        return <EnhancedAssetSetupPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  {/* Supply setup route */}\n                  <Route path=\"/school/school-setup/supply-setup\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const SupplySetupPage = lazy(() => import(\"./pages/school/supply-setup\"));\n                        return <SupplySetupPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  {/* Block Manager route */}\n                  <Route path=\"/school/school-premises-setup/block-manager\">\n                    <Suspense fallback={<div>Loading block manager...</div>}>\n                      {(() => {\n                        const BlockManagerPage = lazy(() => import(\"./pages/school/block-manager\"));\n                        return <BlockManagerPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  {/* Feature-based routes - New URL pattern /school/feature-name/* (but NOT /school/school-setup/*) */}\n                  <Route path=\"/school/:featureName/:page?\" component={({ params }) => {\n                    // Skip this route for school-setup paths to avoid conflicts with specific routes\n                    if (params?.featureName === 'school-setup') {\n                      return null;\n                    }\n                    return (\n                      <Suspense fallback={<div>Loading...</div>}>\n                        {(() => {\n                          const FeaturePage = lazy(() => import(\"./pages/school/feature-page\"));\n                          return <FeaturePage />;\n                        })()}\n                      </Suspense>\n                    );\n                  }} />\n                  \n                  {/* Legacy feature routes for backward compatibility */}\n                  <Route path=\"/school/features/:featureId\" component={() => (\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const FeatureOverview = lazy(() => import(\"./pages/school/features/[featureId]/index\"));\n                        return <FeatureOverview />;\n                      })()}\n                    </Suspense>\n                  )} />\n                  \n                  <Route path=\"/school/features/:featureId/list\" component={() => (\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const StaffList = lazy(() => import(\"./pages/school/features/staff-management/list\"));\n                        return <StaffList />;\n                      })()}\n                    </Suspense>\n                  )} />\n                  \n                  <Route path=\"/school/features/:featureId/create\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const CreatePage = lazy(() => import(\"./pages/school/features/create\"));\n                        return <CreatePage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/features/:featureId/types\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const TypesPage = lazy(() => import(\"./pages/school/features/types\"));\n                        return <TypesPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/features/:featureId/schedules\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const SchedulesPage = lazy(() => import(\"./pages/school/features/schedules\"));\n                        return <SchedulesPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  {/* School Setup routes */}\n                  <Route path=\"/school/setup\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const SetupIndexPage = lazy(() => import(\"./pages/school/setup/index\"));\n                        return <SetupIndexPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/setup/sections\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const SectionsPage = lazy(() => import(\"./pages/school/setup/sections\"));\n                        return <SectionsPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/setup/classes\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const ClassesPage = lazy(() => import(\"./pages/school/setup/classes\"));\n                        return <ClassesPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/setup/subjects\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const SubjectsPage = lazy(() => import(\"./pages/school/setup/subjects\"));\n                        return <SubjectsPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/setup/branches\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const BranchesPage = lazy(() => import(\"./pages/school/setup/branches\"));\n                        return <BranchesPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  \n                  <Route path=\"/school/setup/academic-years\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const AcademicYearsPage = lazy(() => import(\"./pages/school/setup/academic-years\"));\n                        return <AcademicYearsPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  <Route path=\"/school/users\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const UsersPage = lazy(() => import(\"./pages/school/users\"));\n                        return <UsersPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                  <Route path=\"/school/settings\">\n                    <Suspense fallback={<div>Loading...</div>}>\n                      {(() => {\n                        const SchoolSettingsPage = lazy(() => import(\"./pages/school/settings\"));\n                        return <SchoolSettingsPage />;\n                      })()}\n                    </Suspense>\n                  </Route>\n                </>\n              )}\n            </>\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":14022},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.5rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(222.2, 84%, 4.9%);\n  --secondary: hsl(217.2, 32.6%, 17.5%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(217.2, 32.6%, 17.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer components {\n  /* Elite Scholar specific styles matching the design */\n  .elite-primary {\n    @apply bg-primary text-primary-foreground;\n  }\n  \n  .elite-card {\n    @apply bg-white rounded-xl shadow-sm border border-slate-200;\n  }\n  \n  .elite-badge-green {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800;\n  }\n  \n  .elite-badge-blue {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800;\n  }\n  \n  .elite-badge-purple {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800;\n  }\n  \n  .elite-badge-yellow {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800;\n  }\n  \n  .elite-badge-red {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800;\n  }\n  \n  .elite-badge-gray {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700;\n  }\n  \n  /* Custom scrollbar for tables */\n  .elite-scrollbar::-webkit-scrollbar {\n    height: 6px;\n  }\n  \n  .elite-scrollbar::-webkit-scrollbar-track {\n    @apply bg-slate-100 rounded;\n  }\n  \n  .elite-scrollbar::-webkit-scrollbar-thumb {\n    @apply bg-slate-300 rounded;\n  }\n  \n  .elite-scrollbar::-webkit-scrollbar-thumb:hover {\n    @apply bg-slate-400;\n  }\n  \n  /* Loading animation */\n  .elite-spinner {\n    @apply w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin;\n  }\n}\n\n/* Override shadcn colors to match Elite Scholar theme */\n.bg-primary {\n  background-color: hsl(203.8863, 88.2845%, 53.1373%);\n}\n\n.text-primary {\n  color: hsl(203.8863, 88.2845%, 53.1373%);\n}\n\n.border-primary {\n  border-color: hsl(203.8863, 88.2845%, 53.1373%);\n}\n\n/* Button hover states */\n.bg-primary:hover {\n  background-color: hsl(203.8863, 88.2845%, 48%);\n}\n\n/* Focus ring color */\n.focus\\:ring-primary:focus {\n  --tw-ring-color: hsl(203.8863, 88.2845%, 53.1373%);\n}\n\n/* Custom table styles to match design */\n.table-header {\n  @apply bg-slate-50 text-xs font-medium text-slate-500 uppercase tracking-wider;\n}\n\n.table-row {\n  @apply bg-white divide-y divide-slate-200 hover:bg-slate-50;\n}\n\n.table-cell {\n  @apply px-6 py-4 whitespace-nowrap;\n}\n\n/* Elite Scholar specific font settings */\nh1, h2, h3, h4, h5, h6 {\n  font-family: var(--font-sans);\n  font-weight: 600;\n}\n\n/* Form input focus styles */\n.form-input:focus {\n  @apply ring-2 ring-primary border-transparent;\n}\n\n/* Modal overlay */\n.modal-overlay {\n  @apply fixed inset-0 bg-black bg-opacity-50 z-50;\n}\n\n/* Notification badge */\n.notification-badge {\n  @apply absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center;\n}\n\n/* Elite Scholar logo placeholder styles */\n.school-logo {\n  @apply w-10 h-10 rounded-lg object-cover;\n}\n\n.school-logo-fallback {\n  @apply w-10 h-10 rounded-lg bg-slate-100 flex items-center justify-center text-slate-600 font-medium;\n}\n\n/* File upload area */\n.file-upload-area {\n  @apply border-2 border-dashed border-slate-300 rounded-lg p-6 text-center hover:border-primary transition-colors;\n}\n\n/* Switch component override for Elite Scholar theme */\n.switch-thumb[data-state=\"checked\"] {\n  background-color: hsl(203.8863, 88.2845%, 53.1373%);\n}\n\n/* Custom pagination styles */\n.pagination-button {\n  @apply px-3 py-2 text-sm font-medium border rounded-md transition-colors;\n}\n\n.pagination-button-active {\n  @apply text-white bg-primary border-transparent;\n}\n\n.pagination-button-inactive {\n  @apply text-slate-500 bg-white border-slate-300 hover:bg-slate-50;\n}\n\n/* Ensure proper spacing for Font Awesome icons */\n.fas, .far, .fab {\n  display: inline-block;\n  font-style: normal;\n  font-variant: normal;\n  text-rendering: auto;\n  line-height: 1;\n}\n","size_bytes":6207},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/controllers/auth.ts":{"content":"import { Request, Response } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\nimport { AuthRequest } from \"../middleware/auth\";\n\n// Update user profile\nexport const updateProfile = async (req: AuthRequest, res: Response) => {\n  try {\n    const { name, email, currentPassword, newPassword } = req.body;\n    const userId = req.user?.userId;\n\n    if (!userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    // If updating password, verify current password\n    if (newPassword) {\n      if (!currentPassword) {\n        return res.status(400).json({ message: \"Current password is required\" });\n      }\n\n      const validPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!validPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n    }\n\n    // Prepare update data\n    const updateData: any = { name, email };\n    \n    if (newPassword) {\n      updateData.password = await bcrypt.hash(newPassword, 10);\n    }\n\n    const updatedUser = await storage.updateUser(userId, updateData);\n    \n    // Return user without password\n    const { password, ...userWithoutPassword } = updatedUser;\n    res.json(userWithoutPassword);\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    res.status(500).json({ message: \"Failed to update profile\" });\n  }\n};\n\n// Get current user\nexport const getCurrentUser = async (req: Request, res: Response) => {\n  try {\n    // Check for session-based authentication first (used by the app)\n    if ((req as any).session?.user) {\n      const sessionUser = (req as any).session.user;\n      const user = await storage.getUser(sessionUser.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      const { password, ...userWithoutPassword } = user;\n      return res.json(userWithoutPassword);\n    }\n\n    // Fallback to JWT authentication\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      return res.status(401).json({ message: \"No token provided\" });\n    }\n\n    const token = authHeader.split(\" \")[1];\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default_secret\") as any;\n    \n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    const { password, ...userWithoutPassword } = user;\n    res.json(userWithoutPassword);\n  } catch (error) {\n    console.error(\"Error fetching user:\", error);\n    res.status(401).json({ message: \"Invalid token\" });\n  }\n};\n\n// Login\nexport const login = async (req: Request, res: Response) => {\n  try {\n    const { email, password, shortName } = req.body;\n\n    // If shortName is provided, this is a school-specific login\n    if (shortName) {\n      return await schoolLogin(req, res);\n    }\n\n    // Regular super admin login\n    const user = await storage.getUserByEmail(email);\n    if (!user) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const validPassword = await bcrypt.compare(password, user.password);\n    if (!validPassword) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const token = jwt.sign(\n      {\n        userId: user.id,\n        role: user.role,\n        schoolId: user.schoolId,\n        branchId: user.branchId,\n      },\n      process.env.JWT_SECRET || \"default_secret\",\n      { expiresIn: \"7d\" }\n    );\n\n    const { password: _, ...userWithoutPassword } = user;\n    res.json({\n      user: userWithoutPassword,\n      token,\n    });\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    res.status(500).json({ message: \"Login failed\" });\n  }\n};\n\n// School-specific login\nexport const schoolLogin = async (req: Request, res: Response) => {\n  try {\n    const { email, password, shortName } = req.body;\n    // Normalize school short name\n    const normalizedShortName = shortName.toLowerCase().trim();\n\n    // Find school by short name\n    const school = await storage.getSchoolByShortName(normalizedShortName);\n    if (!school) {\n      return res.status(401).json({ message: \"Invalid school code\" });\n    }\n\n    // Check if school is active and payment is up to date\n    if (school.status !== \"ACTIVE\") {\n      return res.status(401).json({ message: \"School account is disabled\" });\n    }\n\n    if (school.paymentStatus === \"UNPAID\" && school.accessBlockedAt) {\n      return res.status(401).json({ message: \"School access blocked due to unpaid fees\" });\n    }\n\n    // Find user by email within this school\n    const user = await storage.getUserByEmailAndSchool(email, school.id);\n    if (!user) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const validPassword = await bcrypt.compare(password, user.password);\n    if (!validPassword) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const token = jwt.sign(\n      {\n        userId: user.id,\n        role: user.role,\n        schoolId: user.schoolId,\n        branchId: user.branchId,\n      },\n      process.env.JWT_SECRET || \"default_secret\",\n      { expiresIn: \"7d\" }\n    );\n\n    const { password: _, ...userWithoutPassword } = user;\n    res.json({\n      user: userWithoutPassword,\n      token,\n      school: {\n        id: school.id,\n        name: school.name,\n        shortName: school.shortName,\n        type: school.type,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error during school login:\", error);\n    res.status(500).json({ message: \"Login failed\" });\n  }\n};\n\n// Change password\nexport const changePassword = async (req: AuthRequest, res: Response) => {\n  try {\n    const { currentPassword, newPassword } = req.body;\n    const userId = req.user?.userId;\n\n    if (!userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const user = await storage.getUser(userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    if (currentPassword) {\n      const validPassword = await bcrypt.compare(currentPassword, user.password);\n      if (!validPassword) {\n        return res.status(400).json({ message: \"Current password is incorrect\" });\n      }\n    }\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    await storage.updateUser(userId, { \n      password: hashedPassword,\n      forcePasswordChange: false \n    });\n\n    res.json({ message: \"Password updated successfully\" });\n  } catch (error) {\n    console.error(\"Error changing password:\", error);\n    res.status(500).json({ message: \"Failed to change password\" });\n  }\n};","size_bytes":6848},"server/controllers/invoice.ts":{"content":"import { Router, Response } from \"express\";\nimport { z } from \"zod\";\nimport { storage } from \"../storage\";\nimport { authMiddleware, AuthRequest, superAdminOnly } from \"../middleware/auth\";\nimport { emailService } from \"../services/email\";\n\nconst router = Router();\n\n// Apply auth middleware to all routes\nrouter.use(authMiddleware);\nrouter.use(superAdminOnly);\n\n// Invoice creation schema\nconst createInvoiceSchema = z.object({\n  schoolId: z.string().min(1, \"School ID is required\"),\n  features: z.array(z.string()).min(1, \"At least one feature must be selected\"),\n  customAmount: z.string().optional(),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  notes: z.string().optional(),\n});\n\n// Get all invoices\nrouter.get(\"/\", async (req: AuthRequest, res: Response) => {\n  try {\n    const result = await storage.getInvoices();\n    res.json({\n      invoices: result.invoices || [],\n      total: result.total || 0\n    });\n  } catch (error) {\n    console.error(\"Get invoices error:\", error);\n    res.status(500).json({ \n      invoices: [],\n      total: 0,\n      message: \"Failed to fetch invoices\" \n    });\n  }\n});\n\n// Get invoice by ID\nrouter.get(\"/:id\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const invoice = await storage.getInvoice(id);\n    \n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n    \n    res.json(invoice);\n  } catch (error) {\n    console.error(\"Get invoice error:\", error);\n    res.status(500).json({ message: \"Failed to fetch invoice\" });\n  }\n});\n\n// Create invoice\nrouter.post(\"/\", async (req: AuthRequest, res: Response) => {\n  try {\n    const validatedData = createInvoiceSchema.parse(req.body);\n    \n    // Get school\n    const school = await storage.getSchool(validatedData.schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n    \n    // Get features with pricing\n    const features = await storage.getFeatures();\n    const selectedFeatures = features.filter(f => \n      validatedData.features.includes(f.id) && f.isActive\n    );\n    \n    if (selectedFeatures.length === 0) {\n      return res.status(400).json({ message: \"No valid features selected\" });\n    }\n    \n    // Calculate total amount\n    const calculatedTotal = selectedFeatures.reduce((sum, feature) => sum + feature.price, 0);\n    const finalAmount = validatedData.customAmount ? \n      parseFloat(validatedData.customAmount) * 100 : // Convert to kobo\n      calculatedTotal;\n    \n    // Create invoice data\n    const invoiceData = {\n      schoolId: validatedData.schoolId,\n      features: selectedFeatures.map(f => ({\n        id: f.id,\n        name: f.name,\n        price: f.price\n      })),\n      totalAmount: finalAmount,\n      customAmount: validatedData.customAmount ? parseFloat(validatedData.customAmount) * 100 : undefined,\n      dueDate: new Date(validatedData.dueDate),\n      notes: validatedData.notes,\n    };\n    \n    const invoice = await storage.createInvoice(invoiceData);\n    \n    // Send invoice email\n    try {\n      await emailService.sendInvoiceEmail(invoice, school);\n    } catch (emailError) {\n      console.error(\"Failed to send invoice email:\", emailError);\n      // Don't fail the invoice creation if email fails\n    }\n    \n    res.status(201).json(invoice);\n  } catch (error) {\n    console.error(\"Create invoice error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n    }\n    res.status(500).json({ message: \"Failed to create invoice\" });\n  }\n});\n\n// Update invoice\nrouter.patch(\"/:id\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const updates = req.body;\n    \n    const invoice = await storage.updateInvoice(id, updates);\n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n    \n    res.json(invoice);\n  } catch (error) {\n    console.error(\"Update invoice error:\", error);\n    res.status(500).json({ message: \"Failed to update invoice\" });\n  }\n});\n\n// Delete invoice\nrouter.delete(\"/:id\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    await storage.deleteInvoice(id);\n    res.json({ message: \"Invoice deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete invoice error:\", error);\n    res.status(500).json({ message: \"Failed to delete invoice\" });\n  }\n});\n\n// Send invoice email\nrouter.post(\"/:id/send-email\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    const invoice = await storage.getInvoice(id);\n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n    \n    const school = await storage.getSchool(invoice.schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n    \n    await emailService.sendInvoiceEmail(invoice, school);\n    \n    // Update email sent status\n    await storage.updateInvoice(id, { \n      emailSent: true, \n      emailSentAt: new Date() \n    });\n    \n    res.json({ message: \"Invoice email sent successfully\" });\n  } catch (error) {\n    console.error(\"Send invoice email error:\", error);\n    res.status(500).json({ message: \"Failed to send invoice email\" });\n  }\n});\n\n// Generate default invoice for school\nrouter.post(\"/generate-default\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.body;\n    \n    if (!schoolId) {\n      return res.status(400).json({ message: \"School ID is required\" });\n    }\n    \n    // Get school\n    const school = await storage.getSchool(schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n    \n    // Get default invoice template\n    const defaultTemplate = await storage.getDefaultInvoiceTemplate();\n    if (!defaultTemplate) {\n      return res.status(404).json({ message: \"Default invoice template not found\" });\n    }\n    \n    // Create invoice from template\n    const invoiceData = {\n      schoolId,\n      templateId: defaultTemplate.id,\n      features: defaultTemplate.features,\n      totalAmount: defaultTemplate.totalAmount,\n      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days from now\n      notes: \"Generated from default template\",\n    };\n    \n    const invoice = await storage.createInvoice(invoiceData);\n    \n    // Send invoice email\n    try {\n      await emailService.sendInvoiceEmail(invoice, school);\n    } catch (emailError) {\n      console.error(\"Failed to send invoice email:\", emailError);\n    }\n    \n    res.status(201).json(invoice);\n  } catch (error) {\n    console.error(\"Generate default invoice error:\", error);\n    res.status(500).json({ message: \"Failed to generate default invoice\" });\n  }\n});\n\n// Download invoice PDF\nrouter.get(\"/:id/download\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    const invoice = await storage.getInvoice(id);\n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n    \n    const school = await storage.getSchool(invoice.schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n    \n    // Generate PDF (for now, return JSON - PDF generation can be added later)\n    res.json({\n      message: \"PDF download functionality coming soon\",\n      invoice,\n      school\n    });\n  } catch (error) {\n    console.error(\"Download invoice error:\", error);\n    res.status(500).json({ message: \"Failed to download invoice\" });\n  }\n});\n\n// Mark invoice as paid\nrouter.patch(\"/:id/mark-paid\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    \n    const invoice = await storage.updateInvoice(id, {\n      status: \"PAID\",\n      paidAt: new Date()\n    });\n    \n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n    \n    res.json(invoice);\n  } catch (error) {\n    console.error(\"Mark invoice paid error:\", error);\n    res.status(500).json({ message: \"Failed to mark invoice as paid\" });\n  }\n});\n\nexport default router;","size_bytes":8173},"server/controllers/superadmin.ts":{"content":"import { Router, Response } from \"express\";\nimport bcrypt from \"bcrypt\";\nimport multer from \"multer\";\nimport { z } from \"zod\";\nimport { storage } from \"../storage\";\nimport { authMiddleware, AuthRequest, superAdminOnly } from \"../middleware/auth\";\nimport { cloudinaryService } from \"../services/cloudinary\";\nimport { emailService } from \"../services/email\";\nimport { generateGradeSections } from \"../services/gradeSection\";\n\n// Configure multer for file uploads\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\nconst router = Router();\n\n// Apply auth middleware to all routes\nrouter.use(authMiddleware);\nrouter.use(superAdminOnly);\n\n// Health check\nrouter.get(\"/health\", (req: AuthRequest, res: Response) => {\n  res.json({ status: \"ok\" });\n});\n\n// Get dashboard stats\nrouter.get(\"/stats\", async (req: AuthRequest, res: Response) => {\n  try {\n    const stats = await storage.getStats();\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Get stats error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get all schools with filters\nrouter.get(\"/schools\", async (req: AuthRequest, res: Response) => {\n  try {\n    const {\n      type,\n      status,\n      search,\n      page = 1,\n      limit = 10\n    } = req.query;\n\n    const offset = (Number(page) - 1) * Number(limit);\n\n    const filters = {\n      type: type as string,\n      status: status as string,\n      search: search as string,\n      limit: Number(limit),\n      offset,\n    };\n\n    const result = await storage.getSchools(filters);\n    \n    res.json({\n      schools: result.schools,\n      pagination: {\n        total: result.total,\n        page: Number(page),\n        limit: Number(limit),\n        totalPages: Math.ceil(result.total / Number(limit)),\n      },\n    });\n  } catch (error) {\n    console.error(\"Get schools error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get single school\nrouter.get(\"/schools/:schoolId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const school = await storage.getSchool(schoolId);\n    \n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    res.json(school);\n  } catch (error) {\n    console.error(\"Get school error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Create new school\nrouter.post(\"/schools\", upload.single(\"logo\"), async (req: AuthRequest, res: Response) => {\n  try {\n    // Debug logging\n    console.log(\"Create school request body:\", req.body);\n    console.log(\"Create school files:\", req.file);\n    \n    // Parse form data from multipart request\n    let requestData: any = {};\n    \n    if (req.body.school_data) {\n      requestData = JSON.parse(req.body.school_data);\n    } else if (req.body.schoolData) {\n      requestData = JSON.parse(req.body.schoolData);\n    } else {\n      // Fallback for direct JSON body\n      requestData = req.body;\n    }\n    \n    console.log(\"Parsed request data:\", requestData);\n    \n    const {\n      school_name: schoolNameField,\n      name: nameField,\n      short_name: shortNameField,\n      shortName: shortNameAlt,\n      abbreviation,\n      motto,\n      state,\n      lga,\n      address,\n      phones,\n      email,\n      type,\n      school_admin: { name: adminName, email: adminEmail } = {},\n      adminName: adminNameAlt,\n      adminEmail: adminEmailAlt,\n      default_password: defaultPassword = \"123456\",\n      selected_grade_groups: selectedGradeGroups = [],\n      initial_features: initialFeatures = [],\n      branches = []\n    } = requestData;\n\n    // Handle multiple field name formats\n    const schoolName = schoolNameField || nameField;\n    const shortName = shortNameField || shortNameAlt;\n    const finalAdminName = adminName || adminNameAlt;\n    const finalAdminEmail = adminEmail || adminEmailAlt;\n    \n    // Debug extracted values\n    console.log(\"Extracted schoolName:\", schoolNameField, nameField, \"->\", schoolName);\n    console.log(\"Extracted shortName:\", shortNameField, shortNameAlt, \"->\", shortName);\n    console.log(\"Extracted adminName:\", adminName, adminNameAlt, \"->\", finalAdminName);\n    console.log(\"Extracted adminEmail:\", adminEmail, adminEmailAlt, \"->\", finalAdminEmail);\n\n    // Validate required fields\n    if (!schoolName) {\n      return res.status(400).json({ message: \"School name is required\" });\n    }\n    if (!shortName) {\n      return res.status(400).json({ message: \"Short name is required\" });\n    }\n    if (!finalAdminName) {\n      return res.status(400).json({ message: \"Admin name is required\" });\n    }\n    if (!finalAdminEmail) {\n      return res.status(400).json({ message: \"Admin email is required\" });\n    }\n    if (!type || ![\"K12\", \"NIGERIAN\", \"SKILL_ACQUISITION\", \"ADULT_LEARNING\", \"TRAINING_CENTER\", \"VOCATIONAL\", \"TERTIARY\"].includes(type)) {\n      return res.status(400).json({ message: \"Valid school type is required\" });\n    }\n\n    // Check if shortName is unique\n    const existingSchool = await storage.getSchoolByShortName(shortName);\n    if (existingSchool) {\n      return res.status(400).json({ message: \"Short name already exists\" });\n    }\n\n    // Create school data\n    const schoolData = {\n      name: schoolName,\n      shortName,\n      abbreviation: abbreviation || \"\",\n      motto: motto || \"\",\n      state: state || \"\",\n      lga: lga || \"\",\n      address: address || \"\",\n      phones: typeof phones === 'string' && phones ? phones.split(\",\").map((p: string) => p.trim()).filter(Boolean) : [],\n      email: email || \"\",\n      type,\n      logoUrl: \"\",\n      paymentStatus: \"PENDING\" as const,\n      status: \"ACTIVE\" as const,\n    };\n\n    // Create the school\n    const school = await storage.createSchool(schoolData);\n\n    // Create main branch\n    const mainBranch = await storage.createBranch({\n      schoolId: school.id,\n      name: \"Main Branch\",\n      isMain: true,\n    });\n\n    // Update school with main branch reference\n    await storage.updateSchool(school.id, { mainBranchId: mainBranch.id });\n\n    // Create grade sections and classes based on selected grade groups\n    let gradeSections: any[] = [];\n    let classes: any[] = [];\n    \n    if (selectedGradeGroups && selectedGradeGroups.length > 0) {\n      // Define grade group mappings\n      const gradeGroupMappings = {\n        K12: {\n          \"Nursery\": { grades: [\"Pre-K\", \"Kindergarten\"], classes: 3 },\n          \"Primary\": { grades: [\"Grade 1\", \"Grade 2\", \"Grade 3\", \"Grade 4\", \"Grade 5\", \"Grade 6\"], classes: 6 },\n          \"Secondary\": { grades: [\"Grade 7\", \"Grade 8\", \"Grade 9\", \"Grade 10\", \"Grade 11\", \"Grade 12\"], classes: 6 }\n        },\n        NIGERIAN: {\n          \"Nursery\": { grades: [\"Nursery 1\", \"Nursery 2\"], classes: 3 },\n          \"Primary\": { grades: [\"Primary 1\", \"Primary 2\", \"Primary 3\", \"Primary 4\", \"Primary 5\", \"Primary 6\"], classes: 6 },\n          \"Secondary\": { grades: [\"JSS 1\", \"JSS 2\", \"JSS 3\", \"SSS 1\", \"SSS 2\", \"SSS 3\"], classes: 6 },\n          \"Islamiyya\": { grades: [\"Islamiyya 1\", \"Islamiyya 2\", \"Islamiyya 3\", \"Islamiyya 4\", \"Islamiyya 5\", \"Islamiyya 6\"], classes: 6 },\n          \"Adult Learning\": { grades: [\"Adult Basic\", \"Adult Intermediate\", \"Adult Advanced\"], classes: 6 }\n        }\n      };\n\n      const mappings = gradeGroupMappings[school.type as \"K12\" | \"NIGERIAN\"];\n      let gradeOrder = 1;\n\n      for (const groupName of selectedGradeGroups) {\n        const group = mappings[groupName as keyof typeof mappings];\n        if (group) {\n          // Create grade sections for this group\n          for (const gradeName of group.grades) {\n            const gradeSection = {\n              schoolId: school.id,\n              code: `${school.shortName}_${gradeName.replace(/\\s+/g, '_').toUpperCase()}`,\n              name: gradeName,\n              order: gradeOrder++,\n            };\n            gradeSections.push(gradeSection);\n          }\n\n          // Create classes for this group\n          const numClasses = (groupName === \"Islamiyya\" || groupName === \"Adult Learning\") ? 6 : group.classes;\n          for (let i = 1; i <= numClasses; i++) {\n            const className = {\n              name: `${groupName} Class ${i}`,\n              schoolId: school.id,\n              branchId: mainBranch.id,\n              capacity: 30,\n              isActive: true,\n            };\n            classes.push(className);\n          }\n        }\n      }\n\n      // Handle non-K12/NIGERIAN school types with appropriate grade structures\n      if (![\"K12\", \"NIGERIAN\"].includes(school.type)) {\n        const gradeStructures = {\n          \"SKILL_ACQUISITION\": {\n            grades: [\"Foundation Level\", \"Basic Skills\", \"Intermediate Skills\", \"Advanced Skills\", \"Specialization\", \"Certification\"],\n            description: \"Skills-based progression levels\"\n          },\n          \"ADULT_LEARNING\": {\n            grades: [\"Literacy Level 1\", \"Literacy Level 2\", \"Basic Education\", \"Secondary Education\", \"Higher Education Prep\", \"Professional Development\"],\n            description: \"Adult education progression\"\n          },\n          \"TRAINING_CENTER\": {\n            grades: [\"Orientation\", \"Basic Training\", \"Intermediate Training\", \"Advanced Training\", \"Specialization\", \"Professional Certification\"],\n            description: \"Professional training levels\"\n          },\n          \"VOCATIONAL\": {\n            grades: [\"Year 1\", \"Year 2\", \"Year 3\", \"Advanced Certificate\", \"Diploma Level\", \"Professional Certificate\"],\n            description: \"Vocational education progression\"\n          },\n          \"TERTIARY\": {\n            grades: [\"Year 1\", \"Year 2\", \"Year 3\", \"Year 4\", \"Postgraduate\", \"Research Level\"],\n            description: \"Higher education levels\"\n          }\n        };\n\n        const structure = gradeStructures[school.type as keyof typeof gradeStructures];\n        if (structure) {\n          for (let i = 0; i < structure.grades.length; i++) {\n            const gradeName = structure.grades[i];\n            \n            // Create grade section\n            const gradeSection = {\n              schoolId: school.id,\n              code: `${school.shortName}_${gradeName.replace(/\\s+/g, '_').toUpperCase()}`,\n              name: gradeName,\n              order: i + 1,\n            };\n            gradeSections.push(gradeSection);\n            \n            // Create 2-3 classes per grade level\n            const numClasses = school.type === \"TERTIARY\" ? 2 : 3;\n            for (let j = 1; j <= numClasses; j++) {\n              const className = {\n                name: `${gradeName} - Class ${String.fromCharCode(64 + j)}`,\n                schoolId: school.id,\n                branchId: mainBranch.id,\n                capacity: school.type === \"TERTIARY\" ? 40 : 25,\n                isActive: true,\n              };\n              classes.push(className);\n            }\n          }\n        }\n      }\n\n      await storage.createGradeSections(gradeSections);\n      if (classes.length > 0) {\n        // For now, we just log the classes. In future, implement full class creation\n        console.log(`Would create ${classes.length} classes for school ${school.id}:`, classes.map(c => c.name));\n      }\n    } else if ([\"K12\", \"NIGERIAN\"].includes(school.type)) {\n      // Fallback to default sections if none selected\n      // Create default grade sections with proper code field\n      const defaultGrades = school.type === \"K12\" \n        ? [\"Pre-K\", \"Kindergarten\", \"Grade 1\", \"Grade 2\", \"Grade 3\", \"Grade 4\", \"Grade 5\", \"Grade 6\", \"Grade 7\", \"Grade 8\", \"Grade 9\", \"Grade 10\", \"Grade 11\", \"Grade 12\"]\n        : [\"Nursery 1\", \"Nursery 2\", \"Primary 1\", \"Primary 2\", \"Primary 3\", \"Primary 4\", \"Primary 5\", \"Primary 6\", \"JSS 1\", \"JSS 2\", \"JSS 3\", \"SSS 1\", \"SSS 2\", \"SSS 3\"];\n      \n      gradeSections = defaultGrades.map((grade, index) => ({\n        schoolId: school.id,\n        code: `${school.shortName}_${grade.replace(/\\s+/g, '_').toUpperCase()}`,\n        name: grade,\n        order: index + 1,\n      }));\n      await storage.createGradeSections(gradeSections);\n    }\n\n    // Create school admin user with proper credentials\n    const hashedPassword = await bcrypt.hash(defaultPassword, 10);\n    console.log(\"Creating admin user:\", { \n      adminName: finalAdminName, \n      adminEmail: finalAdminEmail, \n      defaultPassword, \n      schoolId: school.id \n    });\n    \n    const adminUser = await storage.createUser({\n      name: finalAdminName,\n      email: finalAdminEmail,\n      password: hashedPassword,\n      role: \"school_admin\",\n      schoolId: school.id,\n      branchId: mainBranch.id,\n      forcePasswordChange: true,\n    });\n    \n    console.log(\"Admin user created successfully:\", { id: adminUser.id, email: adminUser.email, role: adminUser.role });\n\n    // Enable initial features if selected\n    if (initialFeatures && initialFeatures.length > 0) {\n      try {\n        // Get all features to map keys to IDs\n        const allFeatures = await storage.getAllFeatures();\n        const featureMap = new Map(allFeatures.map(f => [f.key, f.id]));\n        \n        for (const featureKey of initialFeatures) {\n          const featureId = featureMap.get(featureKey);\n          if (featureId) {\n            await storage.toggleSchoolFeature(school.id, featureId, true);\n            console.log(`Enabled feature ${featureKey} (${featureId}) for school ${school.id}`);\n          } else {\n            console.warn(`Feature with key '${featureKey}' not found in features table`);\n          }\n        }\n      } catch (featureError) {\n        console.error(\"Failed to enable initial features:\", featureError);\n        // Continue without failing the school creation\n      }\n    }\n\n    // Send welcome email with enhanced styling\n    try {\n      await emailService.sendSchoolCreationEmail(\n        finalAdminEmail,\n        school.name,\n        shortName,\n        finalAdminName,\n        {\n          pathBased: `http://localhost:5000/s/${shortName}/login`,\n          subdomain: abbreviation?.toLowerCase() || shortName,\n        }\n      );\n    } catch (emailError) {\n      console.error(\"Failed to send welcome email:\", emailError);\n      // Continue without failing the school creation\n    }\n\n    res.status(201).json({\n      school,\n      admin: adminUser,\n      branch: mainBranch,\n      gradeSections,\n      classes: classes.length > 0 ? classes : undefined,\n      message: \"School created successfully. Welcome email sent to admin.\",\n    });\n  } catch (error) {\n    console.error(\"Create school error:\", error);\n    res.status(500).json({ message: \"Failed to create school\" });\n  }\n});\n\n// Update school with logo support\nrouter.put(\"/schools/:schoolId\", upload.single(\"logo\"), async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    let schoolData;\n    \n    try {\n      schoolData = JSON.parse(req.body.schoolData || \"{}\");\n    } catch (error) {\n      return res.status(400).json({ message: \"Invalid school data format\" });\n    }\n\n    // Get existing school\n    const existingSchool = await storage.getSchool(schoolId);\n    if (!existingSchool) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    // Handle logo upload if provided\n    let logoUrl = existingSchool.logoUrl;\n    if (req.file) {\n      try {\n        const uploadResult = await cloudinaryService.uploadImage(req.file.buffer);\n        logoUrl = uploadResult.secure_url;\n      } catch (uploadError) {\n        console.error(\"Logo upload error:\", uploadError);\n        return res.status(400).json({ message: \"Failed to upload logo\" });\n      }\n    }\n\n    // Update school\n    const updatedSchool = await storage.updateSchool(schoolId, {\n      name: schoolData.schoolName,\n      shortName: schoolData.shortName,\n      abbreviation: schoolData.abbreviation,\n      motto: schoolData.motto,\n      state: schoolData.state,\n      lga: schoolData.lga,\n      address: schoolData.address,\n      phones: schoolData.phones,\n      email: schoolData.email,\n      logoUrl,\n    });\n\n    res.json({\n      school: updatedSchool,\n      message: \"School updated successfully\",\n    });\n  } catch (error) {\n    console.error(\"Update school error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update school (simple patch)\nrouter.patch(\"/schools/:schoolId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const updates = req.body;\n\n    const school = await storage.updateSchool(schoolId, updates);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    res.json(school);\n  } catch (error) {\n    console.error(\"Update school error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update school status\nrouter.patch(\"/schools/:schoolId/status\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const { status } = req.body;\n\n    if (![\"ACTIVE\", \"SUSPENDED\"].includes(status)) {\n      return res.status(400).json({ message: \"Invalid status\" });\n    }\n\n    const school = await storage.updateSchool(schoolId, { status });\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    res.json(school);\n  } catch (error) {\n    console.error(\"Update school status error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Enable school\nrouter.post(\"/schools/:schoolId/enable\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    \n    const school = await storage.updateSchool(schoolId, { \n      status: \"ACTIVE\",\n      accessBlockedAt: null \n    });\n    \n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    res.json({ \n      school,\n      message: \"School enabled successfully\" \n    });\n  } catch (error) {\n    console.error(\"Enable school error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Disable school\nrouter.post(\"/schools/:schoolId/disable\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    \n    const school = await storage.updateSchool(schoolId, { \n      status: \"DISABLED\",\n      accessBlockedAt: new Date()\n    });\n    \n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    res.json({ \n      school,\n      message: \"School disabled successfully\" \n    });\n  } catch (error) {\n    console.error(\"Disable school error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Delete school\nrouter.delete(\"/schools/:schoolId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    \n    await storage.deleteSchool(schoolId);\n    res.json({ message: \"School deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete school error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Branch Management\nrouter.get(\"/schools/:schoolId/branches\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const branches = await storage.getSchoolBranches(schoolId);\n    res.json(branches);\n  } catch (error) {\n    console.error(\"Get branches error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/schools/:schoolId/branches\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const { name } = req.body;\n\n    if (!name) {\n      return res.status(400).json({ message: \"Branch name is required\" });\n    }\n\n    const branch = await storage.createBranch({\n      schoolId,\n      name,\n      status: \"active\",\n      isMain: false,\n    });\n\n    res.status(201).json(branch);\n  } catch (error) {\n    console.error(\"Create branch error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.put(\"/schools/:schoolId/branches/:branchId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId, branchId } = req.params;\n    const { name } = req.body;\n\n    if (!name) {\n      return res.status(400).json({ message: \"Branch name is required\" });\n    }\n\n    const branch = await storage.updateBranch(branchId, { name });\n    res.json(branch);\n  } catch (error) {\n    console.error(\"Update branch error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.patch(\"/schools/:schoolId/branches/:branchId/status\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId, branchId } = req.params;\n    const { status } = req.body;\n\n    if (![\"active\", \"suspended\", \"deleted\"].includes(status)) {\n      return res.status(400).json({ message: \"Invalid status\" });\n    }\n\n    const branch = await storage.updateBranch(branchId, { status });\n    res.json(branch);\n  } catch (error) {\n    console.error(\"Update branch status error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Feature Management\nrouter.post(\"/features\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { key, name, description, category, price, pricingType, isCore } = req.body;\n\n    if (!key || !name) {\n      return res.status(400).json({ message: \"Feature key and name are required\" });\n    }\n\n    const feature = await storage.createFeature({\n      key,\n      name,\n      description: description || \"\",\n      category: category || \"general\",\n      price: price || null,\n      pricingType: pricingType || null,\n      isCore: isCore || false,\n    });\n\n    res.status(201).json(feature);\n  } catch (error) {\n    console.error(\"Create feature error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.put(\"/features/:featureId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { featureId } = req.params;\n    const updates = req.body;\n\n    const feature = await storage.updateFeature(featureId, updates);\n    if (!feature) {\n      return res.status(404).json({ message: \"Feature not found\" });\n    }\n\n    res.json(feature);\n  } catch (error) {\n    console.error(\"Update feature error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get all features\nrouter.get(\"/features\", async (req: AuthRequest, res: Response) => {\n  try {\n    const features = await storage.getAllFeatures();\n    res.json(features);\n  } catch (error) {\n    console.error(\"Get features error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get school features\nrouter.get(\"/schools/:schoolId/features\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const schoolFeatures = await storage.getSchoolFeatures(schoolId);\n    \n    // Filter out any school features where the feature reference is null\n    const validSchoolFeatures = schoolFeatures.filter(sf => sf.feature && sf.feature.key);\n    \n    console.log(`Retrieved ${validSchoolFeatures.length} valid school features for school ${schoolId}`);\n    res.json(validSchoolFeatures);\n  } catch (error) {\n    console.error(\"Get school features error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get enabled school features for invoice creation (placed in main routes)\n// This route is handled in main routes.ts file\n\n// Enable school feature\nrouter.post(\"/schools/:schoolId/features/:featureKey/enable\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId, featureKey } = req.params;\n    \n    // First get the feature by key\n    const features = await storage.getAllFeatures();\n    const feature = features.find(f => f.key === featureKey);\n    \n    if (!feature) {\n      return res.status(404).json({ message: \"Feature not found\" });\n    }\n    \n    await storage.toggleSchoolFeature(schoolId, feature.id, true);\n    res.json({ message: \"Feature enabled successfully\" });\n  } catch (error) {\n    console.error(\"Enable feature error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Disable school feature\nrouter.post(\"/schools/:schoolId/features/:featureKey/disable\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId, featureKey } = req.params;\n    \n    // First get the feature by key\n    const features = await storage.getAllFeatures();\n    const feature = features.find(f => f.key === featureKey);\n    \n    if (!feature) {\n      return res.status(404).json({ message: \"Feature not found\" });\n    }\n    \n    await storage.toggleSchoolFeature(schoolId, feature.id, false);\n    res.json({ message: \"Feature disabled successfully\" });\n  } catch (error) {\n    console.error(\"Disable feature error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Assign/toggle school feature\nrouter.post(\"/schools/:schoolId/features\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const { featureId, enabled } = req.body;\n\n    console.log(`Toggling feature ${featureId} for school ${schoolId}: ${enabled}`);\n\n    await storage.toggleSchoolFeature(schoolId, featureId, enabled);\n    res.json({ message: `Feature ${enabled ? 'enabled' : 'disabled'} successfully` });\n  } catch (error) {\n    console.error(\"Toggle school feature error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Bulk assign features to school\nrouter.post(\"/schools/:schoolId/features/bulk\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const { featureIds } = req.body;\n\n    console.log(`Bulk assigning ${featureIds.length} features to school ${schoolId}`);\n\n    for (const featureId of featureIds) {\n      await storage.toggleSchoolFeature(schoolId, featureId, true);\n    }\n\n    res.json({ message: \"Features assigned successfully\" });\n  } catch (error) {\n    console.error(\"Bulk assign features error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete(\"/features/:featureId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { featureId } = req.params;\n    \n    // Soft delete the feature\n    await storage.updateFeature(featureId, { deletedAt: new Date() });\n    res.json({ message: \"Feature deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete feature error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Database viewer routes\nrouter.get(\"/database/tables\", async (req: AuthRequest, res: Response) => {\n  try {\n    const tablesInfo = await storage.getTablesInfo();\n    res.json(tablesInfo);\n  } catch (error) {\n    console.error(\"Error fetching tables info:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/database/tables/:tableName\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { tableName } = req.params;\n    const tableData = await storage.getTableData(tableName);\n    res.json(tableData);\n  } catch (error) {\n    console.error(\"Error fetching table data:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\n// Get school features with menu links\nrouter.get(\"/schools/:schoolId/features-with-menu\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    \n    // Get school features with default menu links from features table\n    const schoolFeaturesData = await storage.getSchoolFeaturesWithMenu(schoolId);\n    \n    res.json(schoolFeaturesData);\n  } catch (error) {\n    console.error(\"Get school features with menu error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get school feature setup (customized menu links)\nrouter.get(\"/schools/:schoolId/feature-setup\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    \n    const featureSetup = await storage.getSchoolFeatureSetup(schoolId);\n    \n    res.json(featureSetup);\n  } catch (error) {\n    console.error(\"Get school feature setup error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update school feature setup (menu links)\nrouter.put(\"/schools/:schoolId/feature-setup\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const { featureId, menuLinks } = req.body;\n    \n    if (!featureId || !menuLinks) {\n      return res.status(400).json({ message: \"Feature ID and menu links are required\" });\n    }\n    \n    await storage.updateSchoolFeatureSetup(schoolId, featureId, menuLinks);\n    \n    res.json({ message: \"Feature setup updated successfully\" });\n  } catch (error) {\n    console.error(\"Update school feature setup error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Bulk assign features to multiple schools\nrouter.post(\"/schools/features/bulk-assign\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolIds, featureIds } = req.body;\n    \n    if (!schoolIds || !featureIds || !Array.isArray(schoolIds) || !Array.isArray(featureIds)) {\n      return res.status(400).json({ message: \"School IDs and Feature IDs arrays are required\" });\n    }\n    \n    await storage.bulkAssignFeaturesToSchools(schoolIds, featureIds);\n    \n    res.json({ message: \"Features assigned to schools successfully\" });\n  } catch (error) {\n    console.error(\"Bulk assign features error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update feature menu links (superadmin)\nrouter.put(\"/features/:featureId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { featureId } = req.params;\n    const { menuLinks } = req.body;\n    \n    console.log('Updating feature menu links:', { featureId, menuLinks });\n    \n    if (!menuLinks) {\n      return res.status(400).json({ message: \"Menu links are required\" });\n    }\n    \n    // Ensure menuLinks is properly structured\n    const processedMenuLinks = menuLinks.map((link: any) => ({\n      name: link.name,\n      href: link.href,\n      icon: link.icon || 'fas fa-home',\n      enabled: link.enabled !== undefined ? link.enabled : true\n    }));\n    \n    const feature = await storage.updateFeature(featureId, { menuLinks: processedMenuLinks });\n    \n    console.log('Feature updated successfully:', feature);\n    res.json({ feature });\n  } catch (error) {\n    console.error(\"Update feature menu links error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n\n\n// Get school feature setup (menu links) \nrouter.get(\"/schools/:schoolId/feature-setup/:featureId\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId, featureId } = req.params;\n    \n    const setup = await storage.getSchoolFeatureSetup(schoolId, featureId);\n    \n    res.json(setup);\n  } catch (error) {\n    console.error(\"Get school feature setup error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update school feature setup (menu links)\nrouter.put(\"/schools/:schoolId/feature-setup\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    const { featureId, menuLinks } = req.body;\n    \n    console.log('Update school feature setup request:', { schoolId, featureId, menuLinks });\n    \n    if (!featureId || !menuLinks) {\n      console.log('Missing required fields:', { featureId: !!featureId, menuLinks: !!menuLinks });\n      return res.status(400).json({ message: \"Feature ID and menu links are required\" });\n    }\n    \n    await storage.updateSchoolFeatureSetup(schoolId, featureId, menuLinks);\n    \n    console.log('School feature setup updated successfully');\n    res.json({ success: true, message: \"School feature setup updated successfully\" });\n  } catch (error) {\n    console.error(\"Update school feature setup error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nexport default router;","size_bytes":32019},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage\";\nimport type { User } from \"@shared/schema\";\n\nexport interface AuthRequest extends Request {\n  user?: User;\n}\n\nexport const authMiddleware = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  try {\n    // Check for token in Authorization header first, then in session\n    let token = req.headers.authorization?.replace(\"Bearer \", \"\");\n    \n    // If no Authorization header, check session for authenticated user\n    if (!token && (req as any).session?.user) {\n      // For session-based auth, use the user object directly\n      req.user = (req as any).session.user;\n      return next();\n    }\n\n    if (!token) {\n      return res.status(401).json({ message: \"No token provided\" });\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || \"default_secret\") as any;\n    \n    // Verify user still exists\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ message: \"User not found\" });\n    }\n\n    req.user = user;\n\n    next();\n  } catch (error) {\n    return res.status(401).json({ message: \"Invalid token\" });\n  }\n};\n\nexport const roleMiddleware = (allowedRoles: string[]) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n};\n\nexport const superAdminOnly = roleMiddleware([\"superadmin\"]);\nexport const schoolAdminOnly = roleMiddleware([\"superadmin\", \"school_admin\"]);\nexport const branchAdminOnly = roleMiddleware([\"superadmin\", \"school_admin\", \"branch_admin\"]);\n","size_bytes":1847},"server/middleware/feature.ts":{"content":"import { Response, NextFunction } from \"express\";\nimport { AuthRequest } from \"./auth\";\nimport { storage } from \"../storage\";\n\nexport const featureEnabledMiddleware = (featureKey: string) => {\n  return async (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user?.schoolId) {\n      return res.status(403).json({ message: \"School access required\" });\n    }\n\n    try {\n      const schoolFeatures = await storage.getSchoolFeatures(req.user.schoolId);\n      const feature = schoolFeatures.find(sf => sf.feature.key === featureKey);\n\n      if (!feature || !feature.enabled) {\n        return res.status(403).json({ message: `Feature ${featureKey} is not enabled for this school` });\n      }\n\n      next();\n    } catch (error) {\n      return res.status(500).json({ message: \"Error checking feature access\" });\n    }\n  };\n};\n\nexport const paymentMiddleware = async (\n  req: AuthRequest,\n  res: Response,\n  next: NextFunction\n) => {\n  if (!req.user?.schoolId) {\n    return res.status(403).json({ message: \"School access required\" });\n  }\n\n  try {\n    const school = await storage.getSchool(req.user.schoolId);\n    \n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    // Allow access if payment is PAID or PENDING\n    if (school.paymentStatus === \"PAID\" || school.paymentStatus === \"PENDING\") {\n      return next();\n    }\n\n    // Block access if UNPAID and more than 7 days overdue\n    if (school.paymentStatus === \"UNPAID\" && school.accessBlockedAt) {\n      const daysSinceBlocked = Math.floor(\n        (Date.now() - school.accessBlockedAt.getTime()) / (1000 * 60 * 60 * 24)\n      );\n\n      if (daysSinceBlocked >= 7) {\n        return res.status(402).json({ \n          message: \"Payment required. School access has been suspended due to unpaid invoices.\",\n          paymentStatus: school.paymentStatus,\n          daysOverdue: daysSinceBlocked\n        });\n      }\n    }\n\n    next();\n  } catch (error) {\n    return res.status(500).json({ message: \"Error checking payment status\" });\n  }\n};\n","size_bytes":2047},"server/services/cloudinary.ts":{"content":"import { v2 as cloudinary, ConfigOptions } from 'cloudinary';\nimport { storage } from '../storage';\n\nexport class CloudinaryService {\n  private isConfigured = false;\n\n  async configure(config?: { cloudName: string; apiKey: string; apiSecret: string }) {\n    try {\n      let cloudinaryConfig: ConfigOptions;\n\n      if (config) {\n        cloudinaryConfig = {\n          cloud_name: config.cloudName,\n          api_key: config.apiKey,\n          api_secret: config.apiSecret,\n        };\n      } else {\n        // Get config from app settings\n        const appConfig = await storage.getAppConfig();\n        if (!appConfig?.cloudinaryCloudName || !appConfig?.cloudinaryApiKey || !appConfig?.cloudinaryApiSecret) {\n          throw new Error('Cloudinary configuration is incomplete');\n        }\n\n        cloudinaryConfig = {\n          cloud_name: appConfig.cloudinaryCloudName,\n          api_key: appConfig.cloudinaryApiKey,\n          api_secret: appConfig.cloudinaryApiSecret,\n        };\n      }\n\n      cloudinary.config(cloudinaryConfig);\n      this.isConfigured = true;\n      \n      // Test connection\n      await cloudinary.api.ping();\n      await storage.updateServiceStatus('cloudinary', 'connected');\n      \n      return true;\n    } catch (error) {\n      this.isConfigured = false;\n      const message = error instanceof Error ? error.message : 'Configuration failed';\n      await storage.updateServiceStatus('cloudinary', 'error', message);\n      throw error;\n    }\n  }\n\n  async uploadImage(\n    file: Buffer | string,\n    options: {\n      folder?: string;\n      publicId?: string;\n      transformation?: any;\n      resourceType?: 'image' | 'video' | 'raw' | 'auto';\n    } = {}\n  ) {\n    if (!this.isConfigured) {\n      await this.configure();\n    }\n\n    try {\n      const uploadOptions: any = {\n        folder: options.folder || 'elite-scholar',\n        resource_type: options.resourceType || 'image',\n        use_filename: true,\n        unique_filename: false,\n        overwrite: true,\n      };\n\n      if (options.publicId) {\n        uploadOptions.public_id = options.publicId;\n      }\n\n      if (options.transformation) {\n        uploadOptions.transformation = options.transformation;\n      }\n\n      let result;\n      if (typeof file === 'string') {\n        // File path or base64 string\n        result = await cloudinary.uploader.upload(file, uploadOptions);\n      } else {\n        // Buffer - convert to base64\n        const base64String = `data:image/jpeg;base64,${file.toString('base64')}`;\n        result = await cloudinary.uploader.upload(base64String, uploadOptions);\n      }\n\n      return {\n        url: result.secure_url,\n        publicId: result.public_id,\n        width: result.width,\n        height: result.height,\n        format: result.format,\n        bytes: result.bytes,\n      };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Upload failed';\n      await storage.updateServiceStatus('cloudinary', 'error', message);\n      throw error;\n    }\n  }\n\n  async uploadInvoiceAsset(\n    file: Buffer | string,\n    type: 'logo' | 'watermark' | 'background',\n    schoolId?: string\n  ) {\n    const folder = schoolId ? `elite-scholar/schools/${schoolId}/invoices` : 'elite-scholar/system/invoices';\n    \n    const transformation: any = {};\n    \n    // Apply type-specific transformations\n    switch (type) {\n      case 'logo':\n        transformation.width = 200;\n        transformation.height = 100;\n        transformation.crop = 'fit';\n        transformation.quality = 'auto:good';\n        break;\n      case 'watermark':\n        transformation.width = 300;\n        transformation.height = 300;\n        transformation.crop = 'fit';\n        transformation.opacity = 30;\n        transformation.quality = 'auto:low';\n        break;\n      case 'background':\n        transformation.width = 800;\n        transformation.height = 1000;\n        transformation.crop = 'fill';\n        transformation.quality = 'auto:good';\n        break;\n    }\n\n    return await this.uploadImage(file, {\n      folder,\n      publicId: `${type}_${Date.now()}`,\n      transformation,\n    });\n  }\n\n  async deleteAsset(publicId: string) {\n    if (!this.isConfigured) {\n      await this.configure();\n    }\n\n    try {\n      const result = await cloudinary.uploader.destroy(publicId);\n      return result.result === 'ok';\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Delete failed';\n      await storage.updateServiceStatus('cloudinary', 'error', message);\n      throw error;\n    }\n  }\n\n  async getSignedUrl(publicId: string, options: any = {}) {\n    if (!this.isConfigured) {\n      await this.configure();\n    }\n\n    try {\n      return cloudinary.url(publicId, {\n        sign_url: true,\n        ...options,\n      });\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async testConnection() {\n    try {\n      await this.configure();\n      const result = await cloudinary.api.ping();\n      return result.status === 'ok';\n    } catch (error) {\n      return false;\n    }\n  }\n\n  isReady() {\n    return this.isConfigured;\n  }\n}\n\nexport const cloudinaryService = new CloudinaryService();","size_bytes":5133},"server/services/email.ts":{"content":"import nodemailer from \"nodemailer\";\n\ninterface EmailOptions {\n  to: string;\n  subject: string;\n  html: string;\n  attachments?: Array<{\n    filename: string;\n    content: Buffer;\n    contentType: string;\n  }>;\n}\n\nclass EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST || \"smtp.gmail.com\",\n      port: parseInt(process.env.SMTP_PORT || \"587\"),\n      secure: false,\n      auth: {\n        user: process.env.SMTP_USER || process.env.EMAIL_USER || \"admin@elitescholar.com\",\n        pass: process.env.SMTP_PASS || process.env.EMAIL_PASS || \"default_password\",\n      },\n    });\n  }\n\n  async sendEmail(options: EmailOptions): Promise<boolean> {\n    try {\n      const mailOptions = {\n        from: `Elite Scholar <${process.env.SMTP_USER || \"admin@elitescholar.com\"}>`,\n        to: options.to,\n        subject: options.subject,\n        html: options.html,\n        attachments: options.attachments,\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      return true;\n    } catch (error) {\n      console.error(\"Email send error:\", error);\n      return false;\n    }\n  }\n\n  async testConnection(settings: any): Promise<void> {\n    // Create transporter with provided settings\n    const testTransporter = nodemailer.createTransport({\n      host: settings.smtpHost,\n      port: parseInt(settings.smtpPort || \"587\"),\n      secure: settings.smtpSecure,\n      auth: {\n        user: settings.smtpUser,\n        pass: settings.smtpPassword,\n      },\n    });\n\n    // Verify connection\n    await testTransporter.verify();\n\n    // Send test email\n    await testTransporter.sendMail({\n      from: `${settings.emailFromName} <${settings.emailFromAddress || settings.smtpUser}>`,\n      to: settings.smtpUser, // Send to configured email\n      subject: \"Elite Scholar - Email Test\",\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #2563eb;\">Email Configuration Test</h2>\n          <p>Congratulations! Your email configuration is working correctly.</p>\n          <p>This is a test email sent from <strong>${settings.appName}</strong>.</p>\n          <hr style=\"margin: 20px 0; border: none; border-top: 1px solid #e5e7eb;\">\n          <p style=\"color: #6b7280; font-size: 14px;\">\n            Sent from ${settings.appName} | ${settings.domain || \"Your School Management System\"}\n          </p>\n        </div>\n      `,\n    });\n  }\n\n  async sendSchoolCreationEmail(\n    adminEmail: string,\n    schoolName: string,\n    shortName: string,\n    adminName: string,\n    loginUrls: { subdomain?: string; pathBased: string }\n  ): Promise<boolean> {\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #2563eb; color: white; padding: 20px; text-align: center; }\n          .content { padding: 20px; background: #f8fafc; }\n          .login-info { background: white; padding: 15px; border-radius: 8px; margin: 20px 0; }\n          .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }\n          .btn { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Welcome to Elite Scholar</h1>\n          </div>\n          <div class=\"content\">\n            <h2>Your School Has Been Created Successfully!</h2>\n            <p>Dear ${adminName},</p>\n            <p>Congratulations! Your school <strong>${schoolName}</strong> has been successfully set up on the Elite Scholar platform.</p>\n            \n            <div class=\"login-info\">\n              <h3>Login Information:</h3>\n              <p><strong>Email:</strong> ${adminEmail}</p>\n              <p><strong>Temporary Password:</strong> 123456</p>\n              <p><em>You will be required to change this password on your first login.</em></p>\n            </div>\n\n            <div class=\"login-info\">\n              <h3>Access Your School Dashboard:</h3>\n              ${loginUrls.subdomain ? `\n                <p><strong>Primary URL:</strong> <a href=\"${loginUrls.subdomain}\" class=\"btn\">Login via Subdomain</a></p>\n                <p>${loginUrls.subdomain}</p>\n              ` : ''}\n              <p><strong>Alternative URL:</strong> <a href=\"${loginUrls.pathBased}\" class=\"btn\">Login via Path</a></p>\n              <p>${loginUrls.pathBased}</p>\n            </div>\n\n            <p>If you have any questions or need assistance, please don't hesitate to contact our support team.</p>\n            <p>Best regards,<br>The Elite Scholar Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>Powered by Elite Edu Tech</p>\n            <p>This is an automated message. Please do not reply to this email.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    return this.sendEmail({\n      to: adminEmail,\n      subject: `Welcome to Elite Scholar - ${schoolName} Setup Complete`,\n      html,\n    });\n  }\n\n  async sendInvoiceEmail(\n    schoolEmail: string,\n    schoolName: string,\n    invoiceNumber: string,\n    amount: string,\n    dueDate: string,\n    pdfBuffer?: Buffer\n  ): Promise<boolean> {\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #2563eb; color: white; padding: 20px; text-align: center; }\n          .content { padding: 20px; background: #f8fafc; }\n          .invoice-info { background: white; padding: 15px; border-radius: 8px; margin: 20px 0; }\n          .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }\n          .amount { font-size: 24px; font-weight: bold; color: #2563eb; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Elite Scholar Invoice</h1>\n          </div>\n          <div class=\"content\">\n            <h2>New Invoice - ${invoiceNumber}</h2>\n            <p>Dear ${schoolName} Administrator,</p>\n            <p>We have generated a new invoice for your school's subscription services.</p>\n            \n            <div class=\"invoice-info\">\n              <h3>Invoice Details:</h3>\n              <p><strong>Invoice Number:</strong> ${invoiceNumber}</p>\n              <p><strong>Amount:</strong> <span class=\"amount\">₦${amount}</span></p>\n              <p><strong>Due Date:</strong> ${dueDate}</p>\n            </div>\n\n            <p>Please ensure payment is made before the due date to avoid any interruption in services.</p>\n            <p>If you have any questions regarding this invoice, please contact our billing department.</p>\n            <p>Thank you for choosing Elite Scholar.</p>\n            <p>Best regards,<br>The Elite Scholar Billing Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>Powered by Elite Edu Tech</p>\n            <p>This is an automated message. Please do not reply to this email.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const attachments = pdfBuffer ? [{\n      filename: `${invoiceNumber}.pdf`,\n      content: pdfBuffer,\n      contentType: \"application/pdf\",\n    }] : undefined;\n\n    return this.sendEmail({\n      to: schoolEmail,\n      subject: `Elite Scholar Invoice ${invoiceNumber} - ${schoolName}`,\n      html,\n      attachments,\n    });\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":7827},"server/services/gradeSection.ts":{"content":"import { InsertGradeSection } from \"@shared/schema\";\n\nexport function generateGradeSections(schoolId: string, schoolType: \"K12\" | \"NIGERIAN\"): InsertGradeSection[] {\n  const gradeSections: InsertGradeSection[] = [];\n\n  if (schoolType === \"K12\") {\n    // Generate K12 grades (Grade 1 to Grade 12)\n    for (let i = 1; i <= 12; i++) {\n      gradeSections.push({\n        schoolId,\n        name: `Grade ${i}`,\n        code: `G${i}`,\n        order: i,\n      });\n    }\n  } else if (schoolType === \"NIGERIAN\") {\n    let order = 1;\n\n    // Nursery Section (KG1-KG3)\n    for (let i = 1; i <= 3; i++) {\n      gradeSections.push({\n        schoolId,\n        name: `KG ${i}`,\n        code: `KG${i}`,\n        order: order++,\n      });\n    }\n\n    // Primary Section (P1-P6)\n    for (let i = 1; i <= 6; i++) {\n      gradeSections.push({\n        schoolId,\n        name: `Primary ${i}`,\n        code: `P${i}`,\n        order: order++,\n      });\n    }\n\n    // Junior Secondary Section (JSS1-JSS3)\n    for (let i = 1; i <= 3; i++) {\n      gradeSections.push({\n        schoolId,\n        name: `JSS ${i}`,\n        code: `JSS${i}`,\n        order: order++,\n      });\n    }\n\n    // Senior Secondary Section (SSS1-SSS3)\n    for (let i = 1; i <= 3; i++) {\n      gradeSections.push({\n        schoolId,\n        name: `SSS ${i}`,\n        code: `SSS${i}`,\n        order: order++,\n      });\n    }\n  }\n\n  return gradeSections;\n}\n","size_bytes":1394},"client/src/hooks/use-auth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuthStore } from \"@/store/auth\";\n\nexport function useAuth() {\n  const { user, token, logout } = useAuthStore();\n\n  const { data: userData, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      if (!token) {\n        return null;\n      }\n\n      const response = await fetch(\"/api/auth/me\", {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          logout();\n          return null;\n        }\n        throw new Error(\"Failed to fetch user data\");\n      }\n\n      return response.json();\n    },\n    enabled: !!token,\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  // If we have a token but failed to get user data, clear auth\n  if (token && error && !isLoading) {\n    logout();\n  }\n\n  return {\n    user: userData || user,\n    isLoading: token ? isLoading : false,\n    isAuthenticated: !!(userData || user),\n    logout,\n  };\n}\n","size_bytes":1042},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface LoginData {\n  email: string;\n  password: string;\n  shortName?: string;\n}\n\nexport interface AuthResponse {\n  user: {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n    schoolId?: string;\n    branchId?: string;\n    forcePasswordChange: boolean;\n  };\n  token: string;\n}\n\nexport interface SchoolsResponse {\n  schools: any[];\n  pagination: {\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  };\n}\n\nexport interface InvoicesResponse {\n  invoices: any[];\n  pagination: {\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  };\n}\n\nexport interface StatsResponse {\n  totalSchools: number;\n  activeSubscriptions: number;\n  pendingInvoices: number;\n  monthlyRevenue: string;\n}\n\nexport interface CreateInvoiceData {\n  schoolId: string;\n  term?: string;\n  dueDate: string;\n  notes?: string;\n  lines: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: number;\n  }>;\n  sendEmail: boolean;\n}\n\nexport interface GenerateTermInvoiceData {\n  schoolId: string;\n  term: string;\n  templateInvoiceId?: string;\n}\n\nexport const api = {\n  auth: {\n    login: async (data: LoginData): Promise<AuthResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n\n    me: async (): Promise<any> => {\n      const response = await apiRequest(\"GET\", \"/api/auth/me\");\n      return response.json();\n    },\n\n    changePassword: async (data: { currentPassword?: string; newPassword: string }): Promise<void> => {\n      await apiRequest(\"POST\", \"/api/auth/change-password\", data);\n    },\n\n    updateProfile: async (data: { name: string; email: string; currentPassword?: string; newPassword?: string; confirmPassword?: string }): Promise<any> => {\n      const response = await apiRequest(\"PATCH\", \"/api/auth/profile\", data);\n      return response.json();\n    },\n  },\n\n  superadmin: {\n    getStats: async (): Promise<StatsResponse> => {\n      const response = await apiRequest(\"GET\", \"/api/superadmin/stats\");\n      return response.json();\n    },\n\n    getSchools: async (params?: {\n      page?: number;\n      type?: string;\n      status?: string;\n      search?: string;\n      limit?: number;\n    }): Promise<SchoolsResponse> => {\n      const searchParams = new URLSearchParams();\n      if (params?.page) searchParams.append(\"page\", params.page.toString());\n      if (params?.type) searchParams.append(\"type\", params.type);\n      if (params?.status) searchParams.append(\"status\", params.status);\n      if (params?.search) searchParams.append(\"search\", params.search);\n      if (params?.limit) searchParams.append(\"limit\", params.limit.toString());\n\n      const url = `/api/superadmin/schools${searchParams.toString() ? `?${searchParams.toString()}` : \"\"}`;\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n\n    getSchool: async (schoolId: string): Promise<any> => {\n      const response = await apiRequest(\"GET\", `/api/superadmin/schools/${schoolId}`);\n      return response.json();\n    },\n\n    createSchool: async (formData: FormData): Promise<any> => {\n      const authData = localStorage.getItem(\"elite-scholar-auth\");\n      const token = authData ? JSON.parse(authData).state?.token : null;\n      \n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      \n      const response = await fetch(\"/api/superadmin/schools\", {\n        method: \"POST\",\n        headers,\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n\n      return response.json();\n    },\n\n    updateSchool: async (schoolId: string, formData: FormData): Promise<any> => {\n      const authData = localStorage.getItem(\"elite-scholar-auth\");\n      const token = authData ? JSON.parse(authData).state?.token : null;\n      \n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      \n      const response = await fetch(`/api/superadmin/schools/${schoolId}`, {\n        method: \"PUT\",\n        headers,\n        body: formData,\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n\n      return response.json();\n    },\n\n    updateSchoolStatus: async (schoolId: string, status: \"ACTIVE\" | \"DISABLED\"): Promise<any> => {\n      const endpoint = status === \"ACTIVE\" ? \"enable\" : \"disable\";\n      const response = await apiRequest(\"POST\", `/api/superadmin/schools/${schoolId}/${endpoint}`);\n      return response.json();\n    },\n\n    getFeatures: async (): Promise<any[]> => {\n      const response = await apiRequest(\"GET\", \"/api/superadmin/features\");\n      return response.json();\n    },\n\n    getSchoolFeatures: async (schoolId: string): Promise<any[]> => {\n      const response = await apiRequest(\"GET\", `/api/superadmin/schools/${schoolId}/features`);\n      return response.json();\n    },\n\n    // Get enabled school features for invoice creation\n    getEnabledSchoolFeatures: async (schoolId: string): Promise<any[]> => {\n      const response = await apiRequest(\"GET\", `/api/schools/${schoolId}/enabled-features`);\n      return response.json();\n    },\n\n    toggleSchoolFeature: async (\n      schoolId: string,\n      featureKey: string,\n      action: \"enable\" | \"disable\"\n    ): Promise<any> => {\n      const response = await apiRequest(\"POST\", `/api/superadmin/schools/${schoolId}/features/${featureKey}/${action}`);\n      return response.json();\n    },\n\n    // Branch Management\n    getSchoolBranches: async (schoolId: string): Promise<any[]> => {\n      const response = await apiRequest(\"GET\", `/api/superadmin/schools/${schoolId}/branches`);\n      return response.json();\n    },\n\n    createBranch: async (schoolId: string, data: { name: string }): Promise<any> => {\n      const response = await apiRequest(\"POST\", `/api/superadmin/schools/${schoolId}/branches`, data);\n      return response.json();\n    },\n\n    updateBranch: async (schoolId: string, branchId: string, data: { name: string }): Promise<any> => {\n      const response = await apiRequest(\"PUT\", `/api/superadmin/schools/${schoolId}/branches/${branchId}`, data);\n      return response.json();\n    },\n\n    updateBranchStatus: async (schoolId: string, branchId: string, status: string): Promise<any> => {\n      const response = await apiRequest(\"PATCH\", `/api/superadmin/schools/${schoolId}/branches/${branchId}/status`, { status });\n      return response.json();\n    },\n\n    // Feature Management\n    createFeature: async (data: any): Promise<any> => {\n      const response = await apiRequest(\"POST\", \"/api/superadmin/features\", data);\n      return response.json();\n    },\n\n    updateFeature: async (featureId: string, data: any): Promise<any> => {\n      const response = await apiRequest(\"PUT\", `/api/superadmin/features/${featureId}`, data);\n      return response.json();\n    },\n\n    deleteFeature: async (featureId: string): Promise<void> => {\n      await apiRequest(\"DELETE\", `/api/superadmin/features/${featureId}`);\n    },\n\n    updatePaymentStatus: async (\n      schoolId: string,\n      status: string,\n      dueDate?: string\n    ): Promise<any> => {\n      const response = await apiRequest(\"POST\", `/api/superadmin/schools/${schoolId}/payment-status`, {\n        status,\n        dueDate,\n      });\n      return response.json();\n    },\n\n    getAppSettings: async (): Promise<any> => {\n      const response = await apiRequest(\"GET\", \"/api/superadmin/settings\");\n      return response.json();\n    },\n\n    updateAppSettings: async (data: any): Promise<any> => {\n      const response = await apiRequest(\"PUT\", \"/api/superadmin/settings\", data);\n      return response.json();\n    },\n\n    testEmailConnection: async (): Promise<any> => {\n      const response = await apiRequest(\"POST\", \"/api/superadmin/test-email\");\n      return response.json();\n    },\n\n    // Invoice Template Management\n    getInvoiceTemplates: async (): Promise<any[]> => {\n      const response = await apiRequest(\"GET\", \"/api/superadmin/invoice-templates\");\n      return response.json();\n    },\n\n    createInvoiceTemplate: async (data: any): Promise<any> => {\n      const response = await apiRequest(\"POST\", \"/api/superadmin/invoice-templates\", data);\n      return response.json();\n    },\n\n    updateInvoiceTemplate: async (templateId: string, data: any): Promise<any> => {\n      const response = await apiRequest(\"PUT\", `/api/superadmin/invoice-templates/${templateId}`, data);\n      return response.json();\n    },\n\n    deleteInvoiceTemplate: async (templateId: string): Promise<void> => {\n      await apiRequest(\"DELETE\", `/api/superadmin/invoice-templates/${templateId}`);\n    },\n  },\n\n  invoices: {\n    getInvoices: async (params?: {\n      page?: number;\n      schoolId?: string;\n      status?: string;\n      limit?: number;\n    }): Promise<InvoicesResponse> => {\n      const searchParams = new URLSearchParams();\n      if (params?.page) searchParams.append(\"page\", params.page.toString());\n      if (params?.schoolId) searchParams.append(\"schoolId\", params.schoolId);\n      if (params?.status) searchParams.append(\"status\", params.status);\n      if (params?.limit) searchParams.append(\"limit\", params.limit.toString());\n\n      const url = `/api/invoices${searchParams.toString() ? `?${searchParams.toString()}` : \"\"}`;\n      const response = await apiRequest(\"GET\", url);\n      return response.json();\n    },\n\n    getInvoice: async (invoiceId: string): Promise<any> => {\n      const response = await apiRequest(\"GET\", `/api/invoices/${invoiceId}`);\n      return response.json();\n    },\n\n    create: async (data: CreateInvoiceData): Promise<any> => {\n      const response = await apiRequest(\"POST\", \"/api/invoices\", data);\n      return response.json();\n    },\n\n    markPaid: async (invoiceId: string): Promise<any> => {\n      const response = await apiRequest(\"POST\", `/api/invoices/${invoiceId}/mark-paid`);\n      return response.json();\n    },\n\n    generateTermInvoice: async (data: GenerateTermInvoiceData): Promise<any> => {\n      const response = await apiRequest(\"POST\", \"/api/invoices/generate-term-invoice\", data);\n      return response.json();\n    },\n  },\n};\n","size_bytes":10420},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const authData = localStorage.getItem(\"elite-scholar-auth\");\n  const token = authData ? JSON.parse(authData).state?.token : null;\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const authData = localStorage.getItem(\"elite-scholar-auth\");\n    const token = authData ? JSON.parse(authData).state?.token : null;\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1933},"client/src/lib/types.ts":{"content":"// User types\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: \"superadmin\" | \"school_admin\" | \"branch_admin\" | \"teacher\" | \"student\" | \"parent\";\n  schoolId?: string;\n  branchId?: string;\n  forcePasswordChange: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n// School types\nexport interface School {\n  id: string;\n  name: string;\n  shortName: string;\n  abbreviation?: string;\n  motto?: string;\n  state?: string;\n  lga?: string;\n  address?: string;\n  phones: string[];\n  email?: string;\n  logoUrl?: string;\n  type: \"K12\" | \"NIGERIAN\";\n  status: \"ACTIVE\" | \"DISABLED\";\n  mainBranchId?: string;\n  paymentStatus: \"PENDING\" | \"PAID\" | \"UNPAID\";\n  nextPaymentDue?: string;\n  accessBlockedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Branch {\n  id: string;\n  schoolId: string;\n  name: string;\n  isMain: boolean;\n  credentials?: any;\n  createdAt: string;\n}\n\nexport interface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description?: string;\n  price: number;\n  category: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nexport interface SchoolFeature {\n  id: string;\n  schoolId: string;\n  featureId: string;\n  enabled: boolean;\n  createdAt: string;\n  feature: Feature;\n}\n\nexport interface GradeSection {\n  id: string;\n  schoolId: string;\n  name: string;\n  code: string;\n  order: number;\n  createdAt: string;\n}\n\nexport interface SchoolWithDetails extends School {\n  mainBranch?: Branch;\n  branches: Branch[];\n  features: SchoolFeature[];\n  gradeSections: GradeSection[];\n  _count?: {\n    users: number;\n    branches: number;\n  };\n}\n\n// Invoice types\nexport interface Invoice {\n  id: string;\n  invoiceNumber: string;\n  schoolId: string;\n  term?: string;\n  status: \"DRAFT\" | \"SENT\" | \"PAID\" | \"OVERDUE\" | \"CANCELLED\";\n  subtotal: string;\n  tax: string;\n  total: string;\n  dueDate: string;\n  paidAt?: string;\n  emailSent: boolean;\n  emailSentAt?: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface InvoiceLine {\n  id: string;\n  invoiceId: string;\n  description: string;\n  quantity: number;\n  unitPrice: string;\n  total: string;\n  createdAt: string;\n}\n\nexport interface InvoiceWithLines extends Invoice {\n  school: School;\n  lines: InvoiceLine[];\n}\n\n// Subscription types\nexport interface Subscription {\n  id: string;\n  schoolId: string;\n  plan: string;\n  startsAt: string;\n  endsAt: string;\n  createdAt: string;\n}\n\n// API Response types\nexport interface PaginationMeta {\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[];\n  pagination: PaginationMeta;\n}\n\n// Form types\nexport interface CreateSchoolFormData {\n  schoolName: string;\n  shortName: string;\n  abbreviation?: string;\n  motto?: string;\n  state?: string;\n  lga?: string;\n  address?: string;\n  phones: string[];\n  email?: string;\n  type: \"K12\" | \"NIGERIAN\";\n  schoolAdmin: {\n    name: string;\n    email: string;\n  };\n  defaultPassword: string;\n  initialFeatures: string[];\n  branches: Array<{\n    name: string;\n    credentials?: any;\n  }>;\n}\n\nexport interface CreateInvoiceFormData {\n  schoolId: string;\n  term?: string;\n  dueDate: string;\n  notes?: string;\n  lines: Array<{\n    description: string;\n    quantity: number;\n    unitPrice: number;\n  }>;\n  sendEmail: boolean;\n}\n\n// Auth types\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  schoolId?: string;\n  branchId?: string;\n  forcePasswordChange: boolean;\n}\n\nexport interface LoginFormData {\n  email: string;\n  password: string;\n  shortName?: string;\n}\n\nexport interface AuthResponse {\n  user: AuthUser;\n  token: string;\n}\n\n// Stats types\nexport interface DashboardStats {\n  totalSchools: number;\n  activeSubscriptions: number;\n  pendingInvoices: number;\n  monthlyRevenue: string;\n}\n","size_bytes":3824},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { useAuthStore } from \"@/store/auth\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { setAuth } = useAuthStore();\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    shortName: \"\",\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: api.auth.login,\n    onSuccess: (data) => {\n      setAuth(data.user, data.token);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to Elite Scholar!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(formData);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8 items-center\">\n        {/* Left side - Branding */}\n        <div className=\"text-center lg:text-left\">\n          <div className=\"flex items-center justify-center lg:justify-start space-x-3 mb-8\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-graduation-cap text-white text-xl\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900\">Elite Scholar</h1>\n              <p className=\"text-slate-600\">School Management System</p>\n            </div>\n          </div>\n\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-slate-900 mb-6\">\n            Comprehensive School Management\n          </h2>\n          <p className=\"text-xl text-slate-600 mb-8\">\n            Streamline your educational institution with our powerful platform featuring \n            invoice management, payment tracking, and automated workflows.\n          </p>\n\n          <div className=\"grid grid-cols-2 gap-4 mb-8\">\n            <div className=\"text-center p-4 bg-white rounded-lg shadow-sm\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <i className=\"fas fa-file-invoice text-blue-600\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-900\">Invoice Management</h3>\n              <p className=\"text-sm text-slate-600\">Automated billing and payment tracking</p>\n            </div>\n            <div className=\"text-center p-4 bg-white rounded-lg shadow-sm\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                <i className=\"fas fa-school text-green-600\"></i>\n              </div>\n              <h3 className=\"font-semibold text-slate-900\">Multi-tenant</h3>\n              <p className=\"text-sm text-slate-600\">Support for multiple schools and branches</p>\n            </div>\n          </div>\n\n          <div className=\"text-center lg:text-left\">\n            <p className=\"text-sm text-slate-400\">\n              Powered by<br />\n              <span className=\"font-semibold text-slate-600\">Elite Edu Tech</span>\n            </p>\n          </div>\n        </div>\n\n        {/* Right side - Login Form */}\n        <div className=\"flex justify-center\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-2xl\">Welcome Back</CardTitle>\n              <CardDescription>\n                Sign in to your Elite Scholar account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"login-form\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"admin@school.edu\"\n                    value={formData.email}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    value={formData.password}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"shortName\">School Code (Optional)</Label>\n                  <Input\n                    id=\"shortName\"\n                    name=\"shortName\"\n                    type=\"text\"\n                    placeholder=\"school-code\"\n                    value={formData.shortName}\n                    onChange={handleInputChange}\n                    data-testid=\"input-shortname\"\n                  />\n                  <p className=\"text-xs text-slate-500\">\n                    Leave empty for Super Admin login\n                  </p>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                      Signing in...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-sign-in-alt mr-2\"></i>\n                      Sign In\n                    </>\n                  )}\n                </Button>\n              </form>\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-sm text-slate-600\">\n                  Need help? Contact support at{\" \"}\n                  <a href=\"mailto:support@elitescholar.com\" className=\"text-primary hover:underline\">\n                    support@elitescholar.com\n                  </a>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7205},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/store/auth.ts":{"content":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n  schoolId?: string;\n  branchId?: string;\n  forcePasswordChange: boolean;\n}\n\ninterface AuthState {\n  user: AuthUser | null;\n  token: string | null;\n  login: (user: AuthUser, token: string) => void;\n  setAuth: (user: AuthUser, token: string) => void;\n  logout: () => void;\n  updateUser: (user: Partial<AuthUser>) => void;\n}\n\nexport const useAuthStore = create<AuthState>()(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      login: (user: AuthUser, token: string) => {\n        set({ user, token });\n      },\n      setAuth: (user: AuthUser, token: string) => {\n        set({ user, token });\n      },\n      logout: () => {\n        set({ user: null, token: null });\n      },\n      updateUser: (userData: Partial<AuthUser>) => {\n        const currentUser = get().user;\n        if (currentUser) {\n          set({ user: { ...currentUser, ...userData } });\n        }\n      },\n    }),\n    {\n      name: \"elite-scholar-auth\",\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n      }),\n    }\n  )\n);\n","size_bytes":1214},"client/src/components/superadmin/feature-toggle.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { api } from \"@/lib/api\";\nimport { SchoolWithDetails } from \"@/lib/types\";\n\ninterface FeatureToggleProps {\n  school: SchoolWithDetails;\n  onClose: () => void;\n  onToggle: (featureKey: string, enabled: boolean) => void;\n}\n\nexport default function FeatureToggle({ school, onClose, onToggle }: FeatureToggleProps) {\n  const [pendingToggles, setPendingToggles] = useState<Record<string, boolean>>({});\n\n  const { data: allFeatures, isLoading: featuresLoading } = useQuery({\n    queryKey: [\"/api/superadmin/features\"],\n    queryFn: () => api.superadmin.getFeatures(),\n  });\n\n  const { data: schoolFeatures, isLoading: schoolFeaturesLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", school.id, \"features\"],\n    queryFn: () => api.superadmin.getSchoolFeatures(school.id),\n  });\n\n  const schoolFeatureMap = (schoolFeatures || []).reduce((acc, sf) => {\n    if (sf.feature && sf.feature.key) {\n      acc[sf.feature.key] = sf.enabled;\n    }\n    return acc;\n  }, {} as Record<string, boolean>);\n\n  const isLoading = featuresLoading || schoolFeaturesLoading;\n\n  const handleToggle = (featureKey: string, enabled: boolean) => {\n    setPendingToggles({ ...pendingToggles, [featureKey]: enabled });\n    onToggle(featureKey, enabled);\n    \n    // Remove from pending after a delay (assuming the mutation completes)\n    setTimeout(() => {\n      setPendingToggles(prev => {\n        const updated = { ...prev };\n        delete updated[featureKey];\n        return updated;\n      });\n    }, 1000);\n  };\n\n  const isFeatureEnabled = (featureKey: string) => {\n    if (featureKey in pendingToggles) {\n      return pendingToggles[featureKey];\n    }\n    return schoolFeatureMap[featureKey] || false;\n  };\n\n  const isFeaturePending = (featureKey: string) => {\n    return featureKey in pendingToggles;\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={true} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Loading...</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              {[...Array(6)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-slate-200 rounded\"></div>\n              ))}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"feature-toggle-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-slate-900\">Manage School Features</DialogTitle>\n          <DialogDescription>\n            Enable or disable features for {school.name}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {allFeatures?.map((feature) => {\n              const enabled = isFeatureEnabled(feature.key);\n              const pending = isFeaturePending(feature.key);\n              \n              return (\n                <div \n                  key={feature.id} \n                  className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg\"\n                  data-testid={`feature-toggle-${feature.key}`}\n                >\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-slate-900\">{feature.name}</h4>\n                    <p className=\"text-sm text-slate-500\">{feature.description || feature.key}</p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    {pending && (\n                      <div className=\"w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n                    )}\n                    <Switch\n                      checked={enabled}\n                      onCheckedChange={(checked) => handleToggle(feature.key, checked)}\n                      disabled={pending}\n                      data-testid={`switch-${feature.key}`}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        \n        <div className=\"px-6 py-4 border-t border-slate-200 flex justify-end space-x-3\">\n          <Button \n            onClick={onClose}\n            variant=\"outline\"\n            data-testid=\"button-close\"\n          >\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4823},"client/src/components/superadmin/invoice-form.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { SchoolWithDetails } from \"@/lib/types\";\n\nconst invoiceFormSchema = z.object({\n  schoolId: z.string(),\n  term: z.string().optional(),\n  dueDate: z.string(),\n  notes: z.string().optional(),\n  lines: z.array(z.object({\n    description: z.string().min(1, \"Description is required\"),\n    quantity: z.number().min(1, \"Quantity must be at least 1\"),\n    unitPrice: z.number().min(0, \"Unit price must be positive\"),\n  })).min(1, \"At least one line item is required\"),\n  sendEmail: z.boolean().default(false),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceFormSchema>;\n\ninterface InvoiceFormProps {\n  school: SchoolWithDetails;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function InvoiceForm({ school, onClose, onSuccess }: InvoiceFormProps) {\n  const { toast } = useToast();\n\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      schoolId: school.id,\n      term: \"\",\n      dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 30 days from now\n      notes: \"\",\n      lines: [\n        {\n          description: \"Platform Subscription Fee\",\n          quantity: 1,\n          unitPrice: 150000,\n        },\n      ],\n      sendEmail: true,\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"lines\",\n  });\n\n  const createInvoiceMutation = useMutation({\n    mutationFn: (data: InvoiceFormData) => api.invoices.create(data),\n    onSuccess: () => {\n      toast({\n        title: \"Invoice created successfully\",\n        description: \"The invoice has been created and email notification sent.\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating invoice\",\n        description: error.message || \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateTermInvoiceMutation = useMutation({\n    mutationFn: (data: { schoolId: string; term: string }) => \n      api.invoices.generateTermInvoice(data),\n    onSuccess: () => {\n      toast({\n        title: \"Term invoice generated successfully\",\n        description: \"The term invoice has been created and email notification sent.\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error generating term invoice\",\n        description: error.message || \"Failed to generate term invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addLineItem = () => {\n    append({\n      description: \"\",\n      quantity: 1,\n      unitPrice: 0,\n    });\n  };\n\n  const removeLineItem = (index: number) => {\n    if (fields.length > 1) {\n      remove(index);\n    }\n  };\n\n  const calculateSubtotal = () => {\n    return form.watch(\"lines\").reduce((sum, line) => sum + (line.quantity * line.unitPrice), 0);\n  };\n\n  const calculateTax = () => {\n    return calculateSubtotal() * 0.075; // 7.5% tax\n  };\n\n  const calculateTotal = () => {\n    return calculateSubtotal() + calculateTax();\n  };\n\n  const onSubmit = (data: InvoiceFormData) => {\n    createInvoiceMutation.mutate(data);\n  };\n\n  const handleGenerateTermInvoice = () => {\n    const term = form.getValues(\"term\");\n    if (!term) {\n      toast({\n        title: \"Term required\",\n        description: \"Please specify the term before generating invoice\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateTermInvoiceMutation.mutate({\n      schoolId: school.id,\n      term,\n    });\n  };\n\n  const isSubmitting = createInvoiceMutation.isPending || generateTermInvoiceMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\" data-testid=\"invoice-form-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-slate-900\">Create Invoice</DialogTitle>\n          <DialogDescription>\n            Create a new invoice for {school.name}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Invoice Header */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"school\">School</Label>\n              <Input\n                id=\"school\"\n                value={school.name}\n                disabled\n                className=\"bg-slate-50\"\n                data-testid=\"input-school\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"term\">Term/Period</Label>\n              <Select value={form.watch(\"term\")} onValueChange={(value) => form.setValue(\"term\", value)}>\n                <SelectTrigger data-testid=\"select-term\">\n                  <SelectValue placeholder=\"Select Term\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"first-term-2024\">First Term 2024</SelectItem>\n                  <SelectItem value=\"second-term-2024\">Second Term 2024</SelectItem>\n                  <SelectItem value=\"third-term-2024\">Third Term 2024</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dueDate\">Due Date</Label>\n              <Input\n                id=\"dueDate\"\n                type=\"date\"\n                {...form.register(\"dueDate\")}\n                data-testid=\"input-due-date\"\n              />\n              {form.formState.errors.dueDate && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.dueDate.message}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"invoiceNumber\">Invoice Number</Label>\n              <Input\n                id=\"invoiceNumber\"\n                placeholder=\"Auto-generated\"\n                disabled\n                className=\"bg-slate-50\"\n                data-testid=\"input-invoice-number\"\n              />\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"border-t border-slate-200 pt-4\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-lg font-medium text-slate-900\">Quick Actions</h4>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleGenerateTermInvoice}\n                disabled={isSubmitting}\n                data-testid=\"button-generate-term-invoice\"\n              >\n                <i className=\"fas fa-magic mr-2\"></i>\n                Generate Term Invoice\n              </Button>\n            </div>\n            <p className=\"text-sm text-slate-600 mt-2\">\n              Generate a standard term invoice with default line items, or create a custom invoice below.\n            </p>\n          </div>\n\n          {/* Invoice Items */}\n          <div className=\"border-t border-slate-200 pt-4\">\n            <h4 className=\"text-lg font-medium text-slate-900 mb-4\">Invoice Items</h4>\n            <div className=\"space-y-3\">\n              <div className=\"grid grid-cols-12 gap-3 items-center text-sm font-medium text-slate-700\">\n                <div className=\"col-span-5\">Description</div>\n                <div className=\"col-span-2\">Quantity</div>\n                <div className=\"col-span-3\">Unit Price (₦)</div>\n                <div className=\"col-span-2 text-right\">Total (₦)</div>\n              </div>\n              {fields.map((field, index) => (\n                <div key={field.id} className=\"grid grid-cols-12 gap-3 items-center\">\n                  <div className=\"col-span-5\">\n                    <Input\n                      placeholder=\"Platform Subscription Fee\"\n                      {...form.register(`lines.${index}.description`)}\n                      data-testid={`input-line-description-${index}`}\n                    />\n                    {form.formState.errors.lines?.[index]?.description && (\n                      <p className=\"text-sm text-red-600 mt-1\">\n                        {form.formState.errors.lines[index]?.description?.message}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"col-span-2\">\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      {...form.register(`lines.${index}.quantity`, { valueAsNumber: true })}\n                      data-testid={`input-line-quantity-${index}`}\n                    />\n                  </div>\n                  <div className=\"col-span-3\">\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      {...form.register(`lines.${index}.unitPrice`, { valueAsNumber: true })}\n                      data-testid={`input-line-unit-price-${index}`}\n                    />\n                  </div>\n                  <div className=\"col-span-1 text-right font-medium\">\n                    ₦{((form.watch(`lines.${index}.quantity`) || 0) * (form.watch(`lines.${index}.unitPrice`) || 0)).toLocaleString()}\n                  </div>\n                  <div className=\"col-span-1 text-center\">\n                    {fields.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeLineItem(index)}\n                        className=\"text-red-600 hover:text-red-800\"\n                        data-testid={`button-remove-line-${index}`}\n                      >\n                        <i className=\"fas fa-trash\"></i>\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={addLineItem}\n                className=\"text-primary hover:text-primary/80 text-sm font-medium flex items-center space-x-2\"\n                data-testid=\"button-add-line\"\n              >\n                <i className=\"fas fa-plus\"></i>\n                <span>Add Line Item</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Invoice Summary */}\n          <div className=\"border-t border-slate-200 pt-6\">\n            <div className=\"bg-slate-50 rounded-lg p-4\">\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-slate-600\">Subtotal:</span>\n                <span className=\"font-medium\" data-testid=\"subtotal\">₦{calculateSubtotal().toLocaleString()}</span>\n              </div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-slate-600\">Tax (7.5%):</span>\n                <span className=\"font-medium\" data-testid=\"tax\">₦{calculateTax().toLocaleString()}</span>\n              </div>\n              <div className=\"border-t border-slate-200 pt-2 flex justify-between items-center\">\n                <span className=\"text-lg font-semibold text-slate-900\">Total:</span>\n                <span className=\"text-lg font-bold text-slate-900\" data-testid=\"total\">₦{calculateTotal().toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"notes\"\n              placeholder=\"Additional notes for this invoice...\"\n              rows={3}\n              {...form.register(\"notes\")}\n              data-testid=\"input-notes\"\n            />\n          </div>\n\n          {/* Additional Options */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-3\">\n              <Checkbox\n                id=\"sendEmail\"\n                checked={form.watch(\"sendEmail\")}\n                onCheckedChange={(checked) => form.setValue(\"sendEmail\", !!checked)}\n                data-testid=\"checkbox-send-email\"\n              />\n              <Label htmlFor=\"sendEmail\" className=\"text-sm font-medium text-slate-700\">\n                Send email notification to school\n              </Label>\n            </div>\n          </div>\n\n          {/* Modal Actions */}\n          <div className=\"border-t border-slate-200 pt-6 flex items-center justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isSubmitting}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-create-invoice\"\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                  Creating...\n                </>\n              ) : (\n                \"Create & Send Invoice\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":14112},"client/src/components/superadmin/layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuthStore } from \"@/store/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface LayoutProps {\n  title: string;\n  subtitle: string;\n  children: React.ReactNode;\n}\n\ninterface NavigationItem {\n  name: string;\n  href: string;\n  icon: string;\n  active: boolean;\n  count?: number;\n}\n\nexport default function SuperAdminLayout({ title, subtitle, children }: LayoutProps) {\n  const [location] = useLocation();\n  const { logout } = useAuthStore();\n  const { user } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const navigation: NavigationItem[] = [\n    {\n      name: \"Schools\",\n      href: \"/superadmin/schools\",\n      icon: \"fas fa-school\",\n      // count: 127,\n      active: location === \"/\" || location === \"/superadmin\" || location === \"/superadmin/schools\",\n    },\n    {\n      name: \"Invoices\",\n      href: \"/superadmin/invoices\",\n      icon: \"fas fa-file-invoice-dollar\",\n      // count: 42,\n      active: location === \"/superadmin/invoices\",\n    },\n    {\n      name: \"Enhanced Invoices\",\n      href: \"/superadmin/invoices-enhanced\",\n      icon: \"fas fa-file-invoice\",\n      active: location === \"/superadmin/invoices-enhanced\",\n    },\n    {\n      name: \"PDF Invoice Generator\",\n      href: \"/superadmin/invoice-pdf-generator\",\n      icon: \"fas fa-file-pdf\",\n      active: location === \"/superadmin/invoice-pdf-generator\",\n    },\n    {\n      name: \"Features\",\n      href: \"/superadmin/features\",\n      icon: \"fas fa-cogs\",\n      active: location === \"/superadmin/features\",\n    },\n    {\n      name: \"Feature Assignment\",\n      href: \"/superadmin/feature-assignment\",\n      icon: \"fas fa-link\",\n      active: location === \"/superadmin/feature-assignment\",\n    },\n    {\n      name: \"Analytics\",\n      href: \"/superadmin/analytics\",\n      icon: \"fas fa-chart-bar\",\n      active: location === \"/superadmin/analytics\",\n    },\n    {\n      name: \"Users\",\n      href: \"/superadmin/users\",\n      icon: \"fas fa-users\",\n      active: location === \"/superadmin/users\",\n    },\n    {\n      name: \"Profile\",\n      href: \"/superadmin/profile\",\n      icon: \"fas fa-user-cog\",\n      active: location === \"/superadmin/profile\",\n    },\n    {\n      name: \"Database\",\n      href: \"/superadmin/database\",\n      icon: \"fas fa-database\",\n      active: location === \"/superadmin/database\",\n    },\n  ];\n\n  const handleLogout = () => {\n    logout();\n    // Redirect to the main login page for super admin\n    window.location.href = \"/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-slate-50\">\n      {/* Sidebar */}\n      <nav className=\"bg-white shadow-lg w-64 min-h-screen\" data-testid=\"sidebar-navigation\">\n        <div className=\"p-6\">\n          {/* Elite Scholar Logo */}\n          <div className=\"flex items-center space-x-3 mb-8\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-graduation-cap text-white text-lg\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-slate-900\">Elite Scholar</h1>\n              <p className=\"text-xs text-slate-500\">Super Admin</p>\n            </div>\n          </div>\n\n          {/* Navigation Menu */}\n          <ul className=\"space-y-2\">\n            {navigation.map((item) => (\n              <li key={item.name}>\n                <Link \n                  href={item.href}\n                  className={`flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${\n                    item.active\n                      ? \"bg-primary/10 text-primary font-medium\"\n                      : \"text-slate-600 hover:bg-slate-50\"\n                  }`}\n                  data-testid={`nav-link-${item.name.toLowerCase()}`}\n                >\n                  <i className={`${item.icon} w-5`}></i>\n                  <span>{item.name}</span>\n                  {item.count && (\n                    <Badge variant=\"secondary\" className=\"ml-auto\">\n                      {item.count}\n                    </Badge>\n                  )}\n                </Link>\n              </li>\n            ))}\n          </ul>\n\n          {/* Attribution */}\n          <div className=\"mt-8 pt-8 border-t border-slate-200\">\n            <p className=\"text-xs text-slate-400 text-center\">\n              Powered by<br />\n              <span className=\"font-semibold text-slate-600\">Elite Edu Tech</span>\n            </p>\n          </div>\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-auto\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 px-6 py-4\" data-testid=\"header\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-900\" data-testid=\"page-title\">{title}</h2>\n              <p className=\"text-slate-600\" data-testid=\"page-subtitle\">{subtitle}</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\"></i>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search schools...\"\n                  className=\"pl-10 pr-4 py-2\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"search-input\"\n                />\n              </div>\n\n              {/* Notifications */}\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"notifications-button\">\n                <i className=\"fas fa-bell text-slate-400\"></i>\n                <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 w-5 h-5 text-xs\">\n                  3\n                </Badge>\n              </Button>\n\n              {/* User Menu */}\n              <div className=\"flex items-center space-x-3\">\n                <Avatar className=\"w-10 h-10\">\n                  <AvatarImage src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=150&h=150\" />\n                  <AvatarFallback>SA</AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-medium text-slate-900\" data-testid=\"user-name\">\n                    {user?.name || \"Super Admin\"}\n                  </p>\n                  <p className=\"text-sm text-slate-500\" data-testid=\"user-email\">\n                    {user?.email || \"admin@elitescholar.com\"}\n                  </p>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout} data-testid=\"logout-button\">\n                  <i className=\"fas fa-sign-out-alt text-slate-600\"></i>\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <div className=\"p-6\" data-testid=\"page-content\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7403},"client/src/components/superadmin/school-form.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { SchoolWithDetails } from \"@/lib/types\";\n\nconst schoolFormSchema = z.object({\n  schoolName: z.string().min(1, \"School name is required\"),\n  shortName: z.string().min(1, \"Short name is required\").regex(/^[a-z0-9-]+$/, \"Short name must contain only lowercase letters, numbers, and hyphens\"),\n  abbreviation: z.string().min(1, \"Abbreviation is required\"),\n  motto: z.string().optional(),\n  state: z.string().optional(),\n  lga: z.string().optional(),\n  address: z.string().optional(),\n  phones: z.string().optional(),\n  email: z.string().email(\"Invalid email address\").optional().or(z.literal(\"\")),\n  type: z.enum([\"K12\", \"NIGERIAN\"]),\n  schoolAdmin: z.object({\n    name: z.string().min(1, \"Admin name is required\"),\n    email: z.string().email(\"Invalid email address\"),\n  }),\n  defaultPassword: z.string().default(\"123456\"),\n  initialFeatures: z.array(z.string()).default([]),\n  selectedGradeGroups: z.array(z.string()).default([]),\n  branches: z.array(z.object({\n    name: z.string().min(1, \"Branch name is required\"),\n  })).default([{ name: \"Main Branch\" }]),\n});\n\ntype SchoolFormData = z.infer<typeof schoolFormSchema>;\n\ninterface SchoolFormProps {\n  school?: SchoolWithDetails | null;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nexport default function SchoolForm({ school, onClose, onSuccess }: SchoolFormProps) {\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [filePreview, setFilePreview] = useState<string | null>(school?.logoUrl || null);\n\n  // Grade Groups for K12\n  const k12GradeGroups = [\n    {\n      name: \"Nursery\",\n      classes: 3,\n      grades: [\"Pre-K\", \"Kindergarten\"]\n    },\n    {\n      name: \"Primary\", \n      classes: 6,\n      grades: [\"Grade 1\", \"Grade 2\", \"Grade 3\", \"Grade 4\", \"Grade 5\", \"Grade 6\"]\n    },\n    {\n      name: \"Secondary\",\n      classes: 6, \n      grades: [\"Grade 7\", \"Grade 8\", \"Grade 9\", \"Grade 10\", \"Grade 11\", \"Grade 12\"]\n    }\n  ];\n\n  // Grade Groups for Nigerian Curriculum\n  const nigerianGradeGroups = [\n    {\n      name: \"Nursery\",\n      classes: 3,\n      grades: [\"Nursery 1\", \"Nursery 2\"]\n    },\n    {\n      name: \"Primary\",\n      classes: 6,\n      grades: [\"Primary 1\", \"Primary 2\", \"Primary 3\", \"Primary 4\", \"Primary 5\", \"Primary 6\"]\n    },\n    {\n      name: \"Secondary\",\n      classes: 6,\n      grades: [\"JSS 1\", \"JSS 2\", \"JSS 3\", \"SSS 1\", \"SSS 2\", \"SSS 3\"]\n    },\n    {\n      name: \"Islamiyya\",\n      classes: 6, // Always 6 classes\n      grades: [\"Islamiyya 1\", \"Islamiyya 2\", \"Islamiyya 3\", \"Islamiyya 4\", \"Islamiyya 5\", \"Islamiyya 6\"]\n    },\n    {\n      name: \"Adult Learning\",\n      classes: 6, // Always 6 classes\n      grades: [\"Adult Basic\", \"Adult Intermediate\", \"Adult Advanced\"]\n    }\n  ];\n\n  const { data: features } = useQuery({\n    queryKey: [\"/api/superadmin/features\"],\n    queryFn: () => api.superadmin.getFeatures(),\n  });\n\n  const form = useForm<SchoolFormData>({\n    resolver: zodResolver(schoolFormSchema),\n    defaultValues: {\n      schoolName: school?.name || \"\",\n      shortName: school?.shortName || \"\",\n      abbreviation: school?.abbreviation || \"\",\n      motto: school?.motto || \"\",\n      state: school?.state || \"\",\n      lga: school?.lga || \"\",\n      address: school?.address || \"\",\n      phones: school?.phones?.join(\", \") || \"\",\n      email: school?.email || \"\",\n      type: school?.type || \"K12\",\n      schoolAdmin: {\n        name: \"\",\n        email: \"\",\n      },\n      defaultPassword: \"123456\",\n      initialFeatures: school?.features?.filter(f => f.enabled).map(f => f.feature.key) || [],\n      selectedGradeGroups: [],\n      branches: school?.branches?.map(b => ({ name: b.name })) || [{ name: \"Main Branch\" }],\n    },\n  });\n\n  const createSchoolMutation = useMutation({\n    mutationFn: (data: FormData) => api.superadmin.createSchool(data),\n    onSuccess: () => {\n      toast({\n        title: \"School created successfully\",\n        description: \"The school has been created and welcome email sent to the admin.\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating school\",\n        description: error.message || \"Failed to create school\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSchoolMutation = useMutation({\n    mutationFn: ({ schoolId, data }: { schoolId: string; data: FormData }) => \n      api.superadmin.updateSchool(schoolId, data),\n    onSuccess: () => {\n      toast({\n        title: \"School updated successfully\",\n        description: \"The school has been updated successfully.\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error updating school\",\n        description: error.message || \"Failed to update school\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (file.size > 4 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Logo file must be less than 4MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const allowedTypes = [\"image/jpeg\", \"image/png\", \"image/svg+xml\", \"image/webp\"];\n      if (!allowedTypes.includes(file.type)) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Logo must be JPG, PNG, SVG, or WebP format\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      setSelectedFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setFilePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const addBranch = () => {\n    const currentBranches = form.getValues(\"branches\");\n    form.setValue(\"branches\", [...currentBranches, { name: \"\" }]);\n  };\n\n  const removeBranch = (index: number) => {\n    const currentBranches = form.getValues(\"branches\");\n    if (currentBranches.length > 1) {\n      form.setValue(\"branches\", currentBranches.filter((_, i) => i !== index));\n    }\n  };\n\n  const onSubmit = (data: SchoolFormData) => {\n    const formData = new FormData();\n    \n    // Convert to snake_case for backend\n    const schoolData = {\n      school_name: data.schoolName,\n      short_name: data.shortName,\n      abbreviation: data.abbreviation,\n      motto: data.motto,\n      state: data.state,\n      lga: data.lga,\n      address: data.address,\n      phones: data.phones ? data.phones.split(\",\").map(p => p.trim()).filter(p => p) : [],\n      email: data.email,\n      type: data.type,\n      school_admin: data.schoolAdmin,\n      default_password: data.defaultPassword || \"123456\",\n      selected_grade_groups: data.selectedGradeGroups || [],\n      initial_features: data.initialFeatures || [],\n      branches: data.branches || [{ name: \"Main Branch\" }]\n    };\n    \n    formData.append(\"school_data\", JSON.stringify(schoolData));\n    \n    if (selectedFile) {\n      formData.append(\"logo\", selectedFile);\n    }\n\n    if (school) {\n      updateSchoolMutation.mutate({ schoolId: school.id, data: formData });\n    } else {\n      createSchoolMutation.mutate(formData);\n    }\n  };\n\n  const isSubmitting = createSchoolMutation.isPending || updateSchoolMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"school-form-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-slate-900\">\n            {school ? \"Edit School\" : \"Create New School\"}\n          </DialogTitle>\n          <DialogDescription>\n            {school ? \"Update school information\" : \"Create a new school and setup admin account\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* School Basic Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"schoolName\">School Name *</Label>\n              <Input\n                id=\"schoolName\"\n                placeholder=\"Grace Academy International\"\n                {...form.register(\"schoolName\")}\n                data-testid=\"input-school-name\"\n              />\n              {form.formState.errors.schoolName && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.schoolName.message}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"shortName\">Short Name (URL) *</Label>\n              <Input\n                id=\"shortName\"\n                placeholder=\"grace-academy\"\n                {...form.register(\"shortName\")}\n                data-testid=\"input-short-name\"\n              />\n              <p className=\"text-xs text-slate-500\">Will be used for: {form.watch(\"shortName\") || \"school-name\"}.elitescholar.com</p>\n              {form.formState.errors.shortName && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.shortName.message}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"abbreviation\">Abbreviation *</Label>\n              <Input\n                id=\"abbreviation\"\n                placeholder=\"GAI\"\n                {...form.register(\"abbreviation\")}\n                data-testid=\"input-abbreviation\"\n              />\n              {form.watch(\"abbreviation\") && (\n                <div className=\"mt-2 p-2 bg-blue-50 rounded-md\">\n                  <p className=\"text-xs text-blue-700\">\n                    <strong>Preview Link:</strong> https://{form.watch(\"abbreviation\")?.toLowerCase()}.elitescholar.com\n                  </p>\n                </div>\n              )}\n              {form.formState.errors.abbreviation && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.abbreviation.message}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">School Type *</Label>\n              <Select value={form.watch(\"type\")} onValueChange={(value) => form.setValue(\"type\", value as any)}>\n                <SelectTrigger data-testid=\"select-school-type\">\n                  <SelectValue placeholder=\"Select Type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"K12\">K12 (Grade 1-12)</SelectItem>\n                  <SelectItem value=\"NIGERIAN\">Nigerian Curriculum</SelectItem>\n                  <SelectItem value=\"SKILL_ACQUISITION\">Skill Acquisition Center</SelectItem>\n                  <SelectItem value=\"ADULT_LEARNING\">Adult Learning Center</SelectItem>\n                  <SelectItem value=\"TRAINING_CENTER\">Training Center</SelectItem>\n                  <SelectItem value=\"VOCATIONAL\">Vocational School</SelectItem>\n                  <SelectItem value=\"TERTIARY\">Tertiary Institution</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"info@graceacademy.edu.ng\"\n                {...form.register(\"email\")}\n                data-testid=\"input-email\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phones\">Phone Numbers</Label>\n              <Input\n                id=\"phones\"\n                placeholder=\"+234 803 123 4567, +234 805 987 6543\"\n                {...form.register(\"phones\")}\n                data-testid=\"input-phones\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"state\">State</Label>\n              <Input\n                id=\"state\"\n                placeholder=\"Lagos\"\n                {...form.register(\"state\")}\n                data-testid=\"input-state\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lga\">LGA</Label>\n              <Input\n                id=\"lga\"\n                placeholder=\"Ikeja\"\n                {...form.register(\"lga\")}\n                data-testid=\"input-lga\"\n              />\n            </div>\n          </div>\n\n          {/* Address and Logo */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                placeholder=\"123 Education Avenue, Victoria Island...\"\n                rows={3}\n                {...form.register(\"address\")}\n                data-testid=\"input-address\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"logo\">School Logo</Label>\n              <div className=\"border-2 border-dashed border-slate-300 rounded-lg p-6 text-center\">\n                {filePreview ? (\n                  <div className=\"space-y-2\">\n                    <img src={filePreview} alt=\"Logo preview\" className=\"w-16 h-16 mx-auto object-cover rounded\" />\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => fileInputRef.current?.click()}>\n                      Change Logo\n                    </Button>\n                  </div>\n                ) : (\n                  <>\n                    <i className=\"fas fa-cloud-upload-alt text-3xl text-slate-400 mb-2\"></i>\n                    <p className=\"text-sm text-slate-600\">\n                      Drop logo here or{\" \"}\n                      <button\n                        type=\"button\"\n                        onClick={() => fileInputRef.current?.click()}\n                        className=\"text-primary font-medium\"\n                      >\n                        browse\n                      </button>\n                    </p>\n                    <p className=\"text-xs text-slate-500 mt-1\">PNG, JPG up to 4MB</p>\n                  </>\n                )}\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  className=\"hidden\"\n                  accept=\"image/*\"\n                  onChange={handleFileChange}\n                  data-testid=\"input-logo\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Motto */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"motto\">School Motto</Label>\n            <Input\n              id=\"motto\"\n              placeholder=\"Excellence in Education\"\n              {...form.register(\"motto\")}\n              data-testid=\"input-motto\"\n            />\n          </div>\n\n          {/* School Admin Information - Only for new schools */}\n          {!school && (\n            <div className=\"border-t border-slate-200 pt-6\">\n              <h4 className=\"text-lg font-medium text-slate-900 mb-4\">School Administrator</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adminName\">Admin Name *</Label>\n                  <Input\n                    id=\"adminName\"\n                    placeholder=\"John Doe\"\n                    {...form.register(\"schoolAdmin.name\")}\n                    data-testid=\"input-admin-name\"\n                  />\n                  {form.formState.errors.schoolAdmin?.name && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.schoolAdmin.name.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"adminEmail\">Admin Email *</Label>\n                  <Input\n                    id=\"adminEmail\"\n                    type=\"email\"\n                    placeholder=\"admin@graceacademy.edu.ng\"\n                    {...form.register(\"schoolAdmin.email\")}\n                    data-testid=\"input-admin-email\"\n                  />\n                  {form.formState.errors.schoolAdmin?.email && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.schoolAdmin.email.message}</p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"defaultPassword\">Default Password</Label>\n                  <Input\n                    id=\"defaultPassword\"\n                    {...form.register(\"defaultPassword\")}\n                    data-testid=\"input-default-password\"\n                  />\n                  <p className=\"text-xs text-slate-500\">Admin will be forced to change password on first login</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Grade Selection Information - Show for all school types */}\n          {!school && (\n            <div className=\"border-t border-slate-200 pt-6\">\n              {[\"K12\", \"NIGERIAN\"].includes(form.watch(\"type\")) ? (\n                <>\n                  <h4 className=\"text-lg font-medium text-slate-900 mb-4\">Grade Groups</h4>\n                  <p className=\"text-sm text-slate-600 mb-4\">Select which grade groups this school will offer:</p>\n                </>\n              ) : (\n                <>\n                  <h4 className=\"text-lg font-medium text-slate-900 mb-4\">Grade Structure</h4>\n                  <p className=\"text-sm text-slate-600 mb-4\">\n                    This school type will automatically create appropriate grade levels and classes:\n                  </p>\n                  <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n                    <p className=\"text-sm text-blue-800\">\n                      {form.watch(\"type\") === \"SKILL_ACQUISITION\" && \"Creates 6 skill levels: Foundation → Basic → Intermediate → Advanced → Specialization → Certification\"}\n                      {form.watch(\"type\") === \"ADULT_LEARNING\" && \"Creates 6 literacy levels: Literacy 1 → Literacy 2 → Basic Ed → Secondary Ed → Higher Ed Prep → Professional Dev\"}\n                      {form.watch(\"type\") === \"TRAINING_CENTER\" && \"Creates 6 training levels: Orientation → Basic → Intermediate → Advanced → Specialization → Professional Certification\"}\n                      {form.watch(\"type\") === \"VOCATIONAL\" && \"Creates 6 academic years: Year 1 → Year 2 → Year 3 → Advanced Certificate → Diploma → Professional Certificate\"}\n                      {form.watch(\"type\") === \"TERTIARY\" && \"Creates 6 academic levels: Year 1 → Year 2 → Year 3 → Year 4 → Postgraduate → Research Level\"}\n                    </p>\n                  </div>\n                </>\n              )}\n            </div>\n          )}\n\n          {/* Grade Groups Selection - Only for K12 and NIGERIAN schools */}\n          {!school && [\"K12\", \"NIGERIAN\"].includes(form.watch(\"type\")) && (\n            <div className=\"border-t border-slate-200 pt-6\">\n              <h4 className=\"text-lg font-medium text-slate-900 mb-4\">Grade Groups</h4>\n              <p className=\"text-sm text-slate-600 mb-4\">Select which grade groups this school will offer:</p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {(form.watch(\"type\") === \"K12\" ? k12GradeGroups : nigerianGradeGroups).map((group) => (\n                  <div key={group.name} className=\"flex items-start space-x-3 p-4 border border-slate-200 rounded-lg hover:bg-slate-50\">\n                    <Checkbox\n                      id={`group-${group.name}`}\n                      checked={form.watch(\"selectedGradeGroups\").includes(group.name)}\n                      onCheckedChange={(checked) => {\n                        const currentGroups = form.getValues(\"selectedGradeGroups\");\n                        if (checked) {\n                          form.setValue(\"selectedGradeGroups\", [...currentGroups, group.name]);\n                        } else {\n                          form.setValue(\"selectedGradeGroups\", currentGroups.filter(g => g !== group.name));\n                        }\n                      }}\n                      data-testid={`checkbox-group-${group.name}`}\n                    />\n                    <div className=\"flex-1\">\n                      <Label htmlFor={`group-${group.name}`} className=\"text-sm font-medium text-slate-700 cursor-pointer\">\n                        {group.name}\n                      </Label>\n                      <p className=\"text-xs text-slate-500 mt-1\">\n                        {group.classes} classes • Includes: {group.grades.join(\", \")}\n                      </p>\n                      {(group.name === \"Islamiyya\" || group.name === \"Adult Learning\") && (\n                        <p className=\"text-xs text-blue-600 mt-1 font-medium\">Always creates 6 classes</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {!school && features && (\n            <div className=\"border-t border-slate-200 pt-6\">\n              <h4 className=\"text-lg font-medium text-slate-900 mb-4\">Initial Features</h4>\n              <p className=\"text-sm text-slate-600 mb-4\">Select which features to enable for this school:</p>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                {features.map((feature) => (\n                  <div key={feature.id} className=\"flex items-center space-x-3\">\n                    <Checkbox\n                      id={feature.key}\n                      checked={form.watch(\"initialFeatures\").includes(feature.key)}\n                      onCheckedChange={(checked) => {\n                        const currentFeatures = form.getValues(\"initialFeatures\");\n                        if (checked) {\n                          form.setValue(\"initialFeatures\", [...currentFeatures, feature.key]);\n                        } else {\n                          form.setValue(\"initialFeatures\", currentFeatures.filter(f => f !== feature.key));\n                        }\n                      }}\n                      data-testid={`checkbox-feature-${feature.key}`}\n                    />\n                    <Label htmlFor={feature.key} className=\"text-sm font-medium text-slate-700\">\n                      {feature.name}\n                      {feature.description && (\n                        <span className=\"block text-xs text-slate-500 mt-1\">{feature.description}</span>\n                      )}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Branches */}\n          <div className=\"border-t border-slate-200 pt-6\">\n            <h4 className=\"text-lg font-medium text-slate-900 mb-4\">School Branches</h4>\n            <div className=\"space-y-3\">\n              {form.watch(\"branches\").map((branch, index) => (\n                <div key={index} className={`flex items-center space-x-3 p-3 rounded-lg ${index === 0 ? 'bg-slate-50' : 'border border-slate-200'}`}>\n                  <Input\n                    placeholder=\"Branch Name\"\n                    value={branch.name}\n                    onChange={(e) => {\n                      const branches = form.getValues(\"branches\");\n                      branches[index].name = e.target.value;\n                      form.setValue(\"branches\", branches);\n                    }}\n                    className=\"flex-1\"\n                    data-testid={`input-branch-${index}`}\n                  />\n                  {index === 0 && (\n                    <span className=\"text-sm text-green-600 font-medium\">Main</span>\n                  )}\n                  {index > 0 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeBranch(index)}\n                      className=\"text-red-600 hover:text-red-800\"\n                      data-testid={`button-remove-branch-${index}`}\n                    >\n                      <i className=\"fas fa-trash\"></i>\n                    </Button>\n                  )}\n                </div>\n              ))}\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={addBranch}\n                className=\"text-primary hover:text-primary/80 text-sm font-medium flex items-center space-x-2\"\n                data-testid=\"button-add-branch\"\n              >\n                <i className=\"fas fa-plus\"></i>\n                <span>Add Another Branch</span>\n              </Button>\n            </div>\n          </div>\n\n          {/* Modal Actions */}\n          <div className=\"border-t border-slate-200 pt-6 flex items-center justify-end space-x-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isSubmitting}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"bg-primary hover:bg-primary/90\"\n              data-testid=\"button-submit\"\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                  {school ? \"Updating...\" : \"Creating...\"}\n                </>\n              ) : (\n                school ? \"Update School\" : \"Create School\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":26726},"client/src/components/superadmin/schools-table.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Pagination,\n  PaginationContent,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n} from \"@/components/ui/pagination\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SchoolForm from \"./school-form\";\nimport InvoiceForm from \"./invoice-form\";\nimport FeatureToggle from \"./feature-toggle\";\nimport BranchManagement from \"./branch-management\";\nimport SchoolFeatureManagementModal from \"./school-feature-management-modal\";\nimport SchoolFeatureMenuModal from \"./school-feature-menu-modal\";\nimport SchoolFeatureSelectorModal from \"./school-feature-selector-modal\";\nimport { api } from \"@/lib/api\";\nimport { SchoolWithDetails } from \"@/lib/types\";\n\nexport default function SchoolsTable() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [page, setPage] = useState(1);\n  const [filters, setFilters] = useState({\n    type: \"all\",\n    status: \"all\",\n    search: \"\",\n  });\n  const [showSchoolForm, setShowSchoolForm] = useState(false);\n  const [showInvoiceForm, setShowInvoiceForm] = useState(false);\n  const [showFeatureToggle, setShowFeatureToggle] = useState(false);\n  const [showBranchManagement, setShowBranchManagement] = useState(false);\n  const [showFeatureManagement, setShowFeatureManagement] = useState(false);\n  const [showFeatureMenuModal, setShowFeatureMenuModal] = useState(false);\n  const [showFeatureSelectorModal, setShowFeatureSelectorModal] = useState(false);\n  const [selectedSchool, setSelectedSchool] = useState<SchoolWithDetails | null>(null);\n  const [selectedFeature, setSelectedFeature] = useState<any>(null);\n\n  const { data: schoolsData, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", page, filters],\n    queryFn: () => api.superadmin.getSchools({ page, ...filters }),\n  });\n\n  const toggleFeatureMutation = useMutation({\n    mutationFn: ({ schoolId, featureKey, action }: {\n      schoolId: string;\n      featureKey: string;\n      action: \"enable\" | \"disable\";\n    }) => api.superadmin.toggleSchoolFeature(schoolId, featureKey, action),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\"] });\n      toast({\n        title: \"Feature updated\",\n        description: \"School feature has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ schoolId, status }: { schoolId: string; status: \"ACTIVE\" | \"DISABLED\" }) =>\n      api.superadmin.updateSchoolStatus(schoolId, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\"] });\n      toast({\n        title: \"School status updated\",\n        description: \"School status has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update school status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFilterChange = (key: string, value: string) => {\n    setFilters({ ...filters, [key]: value });\n    setPage(1);\n  };\n\n  const handleCreateInvoice = (school: SchoolWithDetails) => {\n    setSelectedSchool(school);\n    setShowInvoiceForm(true);\n  };\n\n  const handleManageFeatures = (school: SchoolWithDetails) => {\n    setSelectedSchool(school);\n    setShowFeatureToggle(true);\n  };\n\n  const handleManageBranches = (school: SchoolWithDetails) => {\n    setSelectedSchool(school);\n    setShowBranchManagement(true);\n  };\n\n  const handleManageFeatureMenus = (school: SchoolWithDetails) => {\n    setSelectedSchool(school);\n    // Load all features instead of just assigned ones\n    setShowFeatureMenuModal(true);\n  };\n\n  const handleFeatureSelect = (feature: any) => {\n    setSelectedFeature(feature);\n    setShowFeatureMenuModal(true);\n  };\n\n  const handleEdit = (school: SchoolWithDetails) => {\n    setSelectedSchool(school);\n    setShowSchoolForm(true);\n  };\n\n  const handleToggleStatus = (school: SchoolWithDetails) => {\n    const newStatus = school.status === \"ACTIVE\" ? \"DISABLED\" : \"ACTIVE\";\n    updateStatusMutation.mutate({ schoolId: school.id, status: newStatus });\n  };\n\n  const getPaymentStatusBadge = (status: string, dueDate?: string) => {\n    switch (status) {\n      case \"PAID\":\n        return <Badge className=\"bg-green-100 text-green-800\">PAID</Badge>;\n      case \"PENDING\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">PENDING</Badge>;\n      case \"UNPAID\":\n        return <Badge className=\"bg-red-100 text-red-800\">UNPAID</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"ACTIVE\":\n        return <Badge className=\"bg-green-100 text-green-800\">ACTIVE</Badge>;\n      case \"DISABLED\":\n        return <Badge className=\"bg-red-100 text-red-800\">DISABLED</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const getTypeBadge = (type: string) => {\n    switch (type) {\n      case \"K12\":\n        return <Badge className=\"bg-purple-100 text-purple-800\">K12</Badge>;\n      case \"NIGERIAN\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">NIGERIAN</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{type}</Badge>;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white rounded-xl shadow-sm p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-slate-200 rounded w-32 mb-4\"></div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-slate-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"bg-white rounded-xl shadow-sm\" data-testid=\"schools-table\">\n        {/* Table Header with Controls */}\n        <div className=\"px-6 py-4 border-b border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-slate-900\">Schools</h3>\n            <div className=\"flex items-center space-x-3\">\n              {/* Filters */}\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm text-slate-600\">Type:</label>\n                <Select value={filters.type} onValueChange={(value) => handleFilterChange(\"type\", value)}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"filter-type\">\n                    <SelectValue placeholder=\"All Types\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"K12\">K12</SelectItem>\n                    <SelectItem value=\"NIGERIAN\">NIGERIAN</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm text-slate-600\">Status:</label>\n                <Select value={filters.status} onValueChange={(value) => handleFilterChange(\"status\", value)}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"filter-status\">\n                    <SelectValue placeholder=\"All Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"ACTIVE\">Active</SelectItem>\n                    <SelectItem value=\"DISABLED\">Disabled</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              {/* Create School Button */}\n              <Button \n                onClick={() => setShowSchoolForm(true)}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-create-school\"\n              >\n                <i className=\"fas fa-plus\"></i>\n                <span>Create School</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Schools Table */}\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow className=\"bg-slate-50\">\n                <TableHead>School</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Payment</TableHead>\n                <TableHead>Features</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {schoolsData?.schools.map((school) => (\n                <TableRow key={school.id} className=\"hover:bg-slate-50\" data-testid={`school-row-${school.id}`}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"w-10 h-10\">\n                        <AvatarImage src={school.logoUrl} alt={`${school.name} logo`} />\n                        <AvatarFallback className=\"bg-slate-100\">\n                          {school.name.substring(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"font-medium text-slate-900\" data-testid={`school-name-${school.id}`}>\n                          {school.name}\n                        </div>\n                        <div className=\"text-sm text-slate-500\" data-testid={`school-shortname-${school.id}`}>\n                          {school.shortName}\n                        </div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell data-testid={`school-type-${school.id}`}>\n                    {getTypeBadge(school.type)}\n                  </TableCell>\n                  <TableCell data-testid={`school-status-${school.id}`}>\n                    {getStatusBadge(school.status)}\n                  </TableCell>\n                  <TableCell data-testid={`school-payment-${school.id}`}>\n                    {getPaymentStatusBadge(school.paymentStatus)}\n                    {school.nextPaymentDue && (\n                      <div className=\"text-xs text-slate-500 mt-1\">\n                        Due: {new Date(school.nextPaymentDue).toLocaleDateString()}\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell data-testid={`school-features-${school.id}`}>\n                    <div className=\"max-w-xs\">\n                      <Accordion type=\"single\" collapsible className=\"w-full\">\n                        <AccordionItem value=\"features\" className=\"border-0\">\n                          <AccordionTrigger className=\"py-2 hover:no-underline\">\n                            <div className=\"flex items-center gap-2\">\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                {school.features.filter((sf: any) => sf.enabled && sf.feature).length} Features\n                              </Badge>\n                              <i className=\"fas fa-chevron-down text-xs text-gray-400\"></i>\n                            </div>\n                          </AccordionTrigger>\n                          <AccordionContent className=\"pb-2\">\n                            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                              {school.features\n                                .filter((sf: any) => sf.enabled && sf.feature)\n                                .map((sf: any) => (\n                                  <div key={sf.id} className=\"bg-gray-50 rounded p-2\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <span className=\"text-sm font-medium text-gray-700\">\n                                        {sf.feature?.name || sf.feature?.key || 'Unknown'}\n                                      </span>\n                                      <Badge variant=\"secondary\" className=\"text-xs\">\n                                        {sf.feature?.key}\n                                      </Badge>\n                                    </div>\n                                    {sf.feature?.menuLinks && sf.feature.menuLinks.length > 0 && (\n                                      <div className=\"mt-2 space-y-1\">\n                                        <div className=\"text-xs text-gray-500 font-medium\">Menu Links:</div>\n                                        {sf.feature.menuLinks.map((link: any, index: number) => (\n                                          <div key={index} className=\"flex items-center gap-2 text-xs\">\n                                            <i className={`${link.icon || 'fas fa-link'} text-gray-400`}></i>\n                                            <span className=\"text-gray-600\">{link.name}</span>\n                                            <span className=\"text-gray-400\">→ {link.href}</span>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    )}\n                                  </div>\n                                ))}\n                            </div>\n                          </AccordionContent>\n                        </AccordionItem>\n                      </Accordion>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleManageFeatures(school)}\n                        data-testid={`button-features-${school.id}`}\n                        title=\"Manage Features\"\n                      >\n                        <i className=\"fas fa-cogs text-slate-600\"></i>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleManageFeatureMenus(school)}\n                        data-testid={`button-feature-menus-${school.id}`}\n                        title=\"Feature Menu Links\"\n                      >\n                        <i className=\"fas fa-link text-indigo-600\"></i>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleManageBranches(school)}\n                        data-testid={`button-branches-${school.id}`}\n                      >\n                        <i className=\"fas fa-sitemap text-blue-600\"></i>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleCreateInvoice(school)}\n                        data-testid={`button-invoice-${school.id}`}\n                      >\n                        <i className=\"fas fa-file-invoice text-green-600\"></i>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleEdit(school)}\n                        data-testid={`button-edit-${school.id}`}\n                      >\n                        <i className=\"fas fa-edit text-purple-600\"></i>\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleToggleStatus(school)}\n                        disabled={updateStatusMutation.isPending}\n                        data-testid={`button-toggle-status-${school.id}`}\n                      >\n                        <i className={`fas ${school.status === \"ACTIVE\" ? \"fa-ban text-red-600\" : \"fa-check text-green-600\"}`}></i>\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n\n        {/* Pagination */}\n        {schoolsData && schoolsData.pagination.totalPages > 1 && (\n          <div className=\"px-6 py-4 border-t border-slate-200 flex items-center justify-between\">\n            <div className=\"text-sm text-slate-700\">\n              Showing {((schoolsData.pagination.page - 1) * schoolsData.pagination.limit) + 1} to{\" \"}\n              {Math.min(schoolsData.pagination.page * schoolsData.pagination.limit, schoolsData.pagination.total)} of{\" \"}\n              {schoolsData.pagination.total} results\n            </div>\n            <Pagination>\n              <PaginationContent>\n                <PaginationItem>\n                  <PaginationPrevious \n                    onClick={() => setPage(Math.max(1, page - 1))}\n                    className={page === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                  />\n                </PaginationItem>\n                {Array.from({ length: Math.min(5, schoolsData.pagination.totalPages) }, (_, i) => {\n                  const pageNum = i + 1;\n                  return (\n                    <PaginationItem key={pageNum}>\n                      <PaginationLink\n                        onClick={() => setPage(pageNum)}\n                        isActive={pageNum === page}\n                        className=\"cursor-pointer\"\n                      >\n                        {pageNum}\n                      </PaginationLink>\n                    </PaginationItem>\n                  );\n                })}\n                <PaginationItem>\n                  <PaginationNext \n                    onClick={() => setPage(Math.min(schoolsData.pagination.totalPages, page + 1))}\n                    className={page === schoolsData.pagination.totalPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                  />\n                </PaginationItem>\n              </PaginationContent>\n            </Pagination>\n          </div>\n        )}\n      </div>\n\n      {/* Modals */}\n      {showSchoolForm && (\n        <SchoolForm \n          school={selectedSchool}\n          onClose={() => {\n            setShowSchoolForm(false);\n            setSelectedSchool(null);\n          }}\n          onSuccess={() => {\n            setShowSchoolForm(false);\n            setSelectedSchool(null);\n            queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\"] });\n          }}\n        />\n      )}\n\n      {showInvoiceForm && selectedSchool && (\n        <InvoiceForm \n          school={selectedSchool}\n          onClose={() => {\n            setShowInvoiceForm(false);\n            setSelectedSchool(null);\n          }}\n          onSuccess={() => {\n            setShowInvoiceForm(false);\n            setSelectedSchool(null);\n            queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\"] });\n          }}\n        />\n      )}\n\n      {showFeatureToggle && selectedSchool && (\n        <FeatureToggle \n          school={selectedSchool}\n          onClose={() => {\n            setShowFeatureToggle(false);\n            setSelectedSchool(null);\n          }}\n          onToggle={(featureKey, enabled) => {\n            toggleFeatureMutation.mutate({\n              schoolId: selectedSchool.id,\n              featureKey,\n              action: enabled ? \"enable\" : \"disable\",\n            });\n          }}\n        />\n      )}\n\n      {showBranchManagement && selectedSchool && (\n        <BranchManagement \n          schoolId={selectedSchool.id}\n          schoolName={selectedSchool.name}\n          onClose={() => {\n            setShowBranchManagement(false);\n            setSelectedSchool(null);\n          }}\n        />\n      )}\n      \n      {showFeatureManagement && selectedSchool && (\n        <SchoolFeatureManagementModal \n          school={selectedSchool}\n          isOpen={showFeatureManagement}\n          onClose={() => {\n            setShowFeatureManagement(false);\n            setSelectedSchool(null);\n          }}\n        />\n      )}\n      \n      {showFeatureSelectorModal && selectedSchool && (\n        <SchoolFeatureSelectorModal \n          school={selectedSchool}\n          isOpen={showFeatureSelectorModal}\n          onClose={() => {\n            setShowFeatureSelectorModal(false);\n            setSelectedSchool(null);\n          }}\n          onFeatureSelect={handleFeatureSelect}\n        />\n      )}\n      \n      {showFeatureMenuModal && selectedSchool && selectedFeature && (\n        <SchoolFeatureMenuModal \n          school={selectedSchool}\n          feature={selectedFeature}\n          isOpen={showFeatureMenuModal}\n          onClose={() => {\n            setShowFeatureMenuModal(false);\n            setSelectedSchool(null);\n            setSelectedFeature(null);\n          }}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":21718},"client/src/components/superadmin/stats-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { api } from \"@/lib/api\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/stats\"],\n    queryFn: () => api.superadmin.getStats(),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-4 bg-slate-200 rounded mb-3\"></div>\n              <div className=\"h-8 bg-slate-200 rounded mb-4\"></div>\n              <div className=\"h-3 bg-slate-200 rounded w-24\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const statsCards = [\n    {\n      title: \"Total Schools\",\n      value: stats?.totalSchools || 0,\n      icon: \"fas fa-school\",\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      change: \"+12% from last month\",\n      changeColor: \"text-green-600\",\n    },\n    {\n      title: \"Active Subscriptions\",\n      value: stats?.activeSubscriptions || 0,\n      icon: \"fas fa-check-circle\",\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\",\n      change: \"96.7% paid on time\",\n      changeColor: \"text-green-600\",\n    },\n    {\n      title: \"Pending Invoices\",\n      value: stats?.pendingInvoices || 0,\n      icon: \"fas fa-clock\",\n      iconBg: \"bg-yellow-100\",\n      iconColor: \"text-yellow-600\",\n      change: \"₦2.4M pending\",\n      changeColor: \"text-yellow-600\",\n    },\n    {\n      title: \"Monthly Revenue\",\n      value: `₦${parseFloat(stats?.monthlyRevenue || \"0\").toLocaleString()}`,\n      icon: \"fas fa-chart-line\",\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      change: \"+8.2% from last month\",\n      changeColor: \"text-green-600\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\" data-testid=\"stats-cards\">\n      {statsCards.map((stat, index) => (\n        <Card key={index} className=\"bg-white rounded-xl shadow-sm\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-slate-600 text-sm font-medium\" data-testid={`stat-title-${index}`}>\n                  {stat.title}\n                </p>\n                <p className=\"text-3xl font-bold text-slate-900\" data-testid={`stat-value-${index}`}>\n                  {stat.value}\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${stat.iconBg} rounded-lg flex items-center justify-center`}>\n                <i className={`${stat.icon} ${stat.iconColor} text-xl`}></i>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <span className={`text-sm font-medium ${stat.changeColor}`} data-testid={`stat-change-${index}`}>\n                {stat.change}\n              </span>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3145},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/superadmin/dashboard.tsx":{"content":"import { useLocation } from \"wouter\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\nimport StatsCards from \"@/components/superadmin/stats-cards\";\nimport SchoolsTable from \"@/components/superadmin/schools-table\";\nimport FeaturesManagement from \"@/components/superadmin/features-management\";\nimport FeatureAssignment from \"@/pages/superadmin/feature-assignment\";\n\nexport default function SuperAdminDashboard() {\n  const [location] = useLocation();\n  const currentPage = location.split(\"/\").pop() || \"schools\";\n\n  const renderContent = () => {\n    switch (currentPage) {\n      case \"schools\":\n      case \"superadmin\":\n      case \"dashboard\":\n      case \"\":\n        return (\n          <div className=\"space-y-8\">\n            <StatsCards />\n            <SchoolsTable />\n          </div>\n        );\n      case \"invoices\":\n        return (\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Invoice Management</h3>\n            <p className=\"text-slate-600\">Invoice management interface coming soon...</p>\n          </div>\n        );\n      case \"features\":\n        return <FeaturesManagement />;\n      case \"feature-assignment\":\n        return <FeatureAssignment />;\n      case \"analytics\":\n        return (\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Analytics Dashboard</h3>\n            <p className=\"text-slate-600\">Analytics dashboard coming soon...</p>\n          </div>\n        );\n      case \"users\":\n        return (\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">User Management</h3>\n            <p className=\"text-slate-600\">User management interface coming soon...</p>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"bg-white rounded-xl shadow-sm p-6\">\n            <h3 className=\"text-lg font-semibold text-slate-900 mb-4\">Page Not Found</h3>\n            <p className=\"text-slate-600\">The requested page could not be found.</p>\n          </div>\n        );\n    }\n  };\n\n  const getPageTitle = () => {\n    switch (currentPage) {\n      case \"schools\":\n      case \"superadmin\":\n      case \"\":\n        return {\n          title: \"School Management\",\n          subtitle: \"Manage schools, features, and billing across your platform\"\n        };\n      case \"invoices\":\n        return {\n          title: \"Invoice Management\",\n          subtitle: \"Track payments and manage billing for all schools\"\n        };\n      case \"features\":\n        return {\n          title: \"Feature Management\",\n          subtitle: \"Configure and manage platform features\"\n        };\n      case \"feature-assignment\":\n        return {\n          title: \"Feature Assignment\",\n          subtitle: \"Assign features to schools and manage access permissions\"\n        };\n      case \"analytics\":\n        return {\n          title: \"Analytics Dashboard\",\n          subtitle: \"View platform performance and usage statistics\"\n        };\n      case \"users\":\n        return {\n          title: \"User Management\",\n          subtitle: \"Manage platform users and permissions\"\n        };\n      default:\n        return {\n          title: \"Dashboard\",\n          subtitle: \"Elite Scholar Super Admin Dashboard\"\n        };\n    }\n  };\n\n  const pageInfo = getPageTitle();\n\n  return (\n    <SuperAdminLayout title={pageInfo.title} subtitle={pageInfo.subtitle}>\n      {renderContent()}\n    </SuperAdminLayout>\n  );\n}\n","size_bytes":3562},"client/src/pages/superadmin/schools.tsx":{"content":"import SuperAdminLayout from \"@/components/superadmin/layout\";\nimport SchoolsTable from \"@/components/superadmin/schools-table\";\n\nexport default function SchoolsPage() {\n  return (\n    <SuperAdminLayout\n      title=\"School Management\"\n      subtitle=\"Manage schools and their settings across your platform\"\n    >\n      <SchoolsTable />\n    </SuperAdminLayout>\n  );\n}","size_bytes":366},"server/controllers/analytics.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\n\nconst router = Router();\n\n// Get analytics data\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const analytics = await storage.getAnalytics();\n    res.json(analytics);\n  } catch (error) {\n    console.error(\"Error fetching analytics:\", error);\n    res.status(500).json({ message: \"Failed to fetch analytics data\" });\n  }\n});\n\nexport default router;","size_bytes":423},"server/controllers/features.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\n\nconst router = Router();\n\n// Get all features\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const features = await storage.getFeatures();\n    res.json(features || []);\n  } catch (error) {\n    console.error(\"Error fetching features:\", error);\n    res.status(500).json([]);\n  }\n});\n\n// Create new feature\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const { name, description, price, category, type, key } = req.body;\n    \n    const featureData = {\n      name,\n      description,\n      price: price ? Math.round(price) : null, // Ensure integer\n      category: category || \"CORE\",\n      type: type || { module: false, standalone: false, both: false },\n      key: key || name.toLowerCase().replace(/\\s+/g, \"_\"),\n      isActive: true,\n    };\n\n    const feature = await storage.createFeature(featureData);\n    res.status(201).json(feature);\n  } catch (error) {\n    console.error(\"Error creating feature:\", error);\n    res.status(500).json({ message: \"Failed to create feature\" });\n  }\n});\n\n// Update feature\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, description, price, category, type } = req.body;\n    \n    const updateData = {\n      name,\n      description,\n      price: price ? Math.round(price) : null,\n      category,\n      type,\n      key: name.toLowerCase().replace(/\\s+/g, \"_\"),\n    };\n\n    const feature = await storage.updateFeature(id, updateData);\n    if (!feature) {\n      return res.status(404).json({ message: \"Feature not found\" });\n    }\n    \n    res.json(feature);\n  } catch (error) {\n    console.error(\"Error updating feature:\", error);\n    res.status(500).json({ message: \"Failed to update feature\" });\n  }\n});\n\n// Delete feature\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    await storage.deleteFeature(id);\n    res.json({ message: \"Feature deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting feature:\", error);\n    res.status(500).json({ message: \"Failed to delete feature\" });\n  }\n});\n\nexport default router;","size_bytes":2134},"server/controllers/settings.ts":{"content":"import { Router, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { AuthRequest } from \"../middleware/auth\";\nimport nodemailer from \"nodemailer\";\n\nconst router = Router();\n\n// Get app settings\nrouter.get(\"/\", async (req: AuthRequest, res: Response) => {\n  try {\n    const settings = await storage.getAppSettings();\n    res.json(settings);\n  } catch (error) {\n    console.error(\"Get settings error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update app settings\nrouter.post(\"/\", async (req: AuthRequest, res: Response) => {\n  try {\n    const settingsData = req.body;\n    const updated = await storage.updateAppSettings(settingsData);\n    res.json(updated);\n  } catch (error) {\n    console.error(\"Update settings error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Test email configuration\nrouter.post(\"/test-email\", async (req: AuthRequest, res: Response) => {\n  try {\n    const settings = await storage.getAppSettings();\n    \n    if (!settings.smtpHost || !settings.smtpUser || !settings.smtpPassword) {\n      return res.status(400).json({ message: \"Email configuration incomplete\" });\n    }\n\n    // Create transporter\n    const transporter = nodemailer.createTransporter({\n      host: settings.smtpHost,\n      port: parseInt(settings.smtpPort || \"587\"),\n      secure: settings.smtpSecure || false,\n      auth: {\n        user: settings.smtpUser,\n        pass: settings.smtpPassword,\n      },\n    });\n\n    // Send test email\n    await transporter.sendMail({\n      from: `${settings.emailFromName || \"Elite Scholar\"} <${settings.emailFromAddress || settings.smtpUser}>`,\n      to: settings.smtpUser, // Send to same email for testing\n      subject: \"Elite Scholar - Email Configuration Test\",\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <h2 style=\"color: #2563eb;\">Email Configuration Test</h2>\n          <p>Congratulations! Your email configuration is working correctly.</p>\n          <p>This test email was sent from Elite Scholar at ${new Date().toLocaleString()}.</p>\n          <hr style=\"margin: 20px 0;\">\n          <p style=\"color: #64748b; font-size: 14px;\">\n            If you received this email, your SMTP settings are properly configured.\n          </p>\n        </div>\n      `,\n    });\n\n    res.json({ message: \"Test email sent successfully\" });\n  } catch (error) {\n    console.error(\"Test email error:\", error);\n    res.status(500).json({ message: \"Failed to send test email\", error: error.message });\n  }\n});\n\nexport default router;","size_bytes":2633},"client/src/pages/superadmin/analytics.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  School,\n  DollarSign,\n  FileText,\n  TrendingUp,\n  Users,\n  Activity,\n} from \"lucide-react\";\n\ninterface AnalyticsData {\n  totalSchools: number;\n  activeSchools: number;\n  totalRevenue: number;\n  pendingInvoices: number;\n  monthlyRevenue: Array<{ month: string; revenue: number }>;\n  schoolsByStatus: Array<{ status: string; count: number }>;\n  featureUsage: Array<{ name: string; count: number; revenue: number }>;\n  invoiceStatus: Array<{ status: string; count: number }>;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport default function AnalyticsPage() {\n  const { data: analytics, isLoading } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/analytics\"],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return `₦${(amount / 100).toLocaleString()}`;\n  };\n\n  const StatCard = ({ \n    title, \n    value, \n    icon: Icon, \n    color, \n    description \n  }: { \n    title: string; \n    value: string | number; \n    icon: any; \n    color: string; \n    description?: string; \n  }) => (\n    <Card data-testid={`stat-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className={`h-4 w-4 ${color}`} />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\" data-testid={`stat-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {value}\n        </div>\n        {description && (\n          <p className=\"text-xs text-muted-foreground\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <p className=\"text-muted-foreground\">No analytics data available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"analytics-page\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Analytics Dashboard</h1>\n        <p className=\"text-muted-foreground\">\n          Comprehensive insights into school management system performance\n        </p>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <StatCard\n          title=\"Total Schools\"\n          value={analytics.totalSchools}\n          icon={School}\n          color=\"text-blue-600\"\n          description=\"All registered schools\"\n        />\n        <StatCard\n          title=\"Active Schools\"\n          value={analytics.activeSchools}\n          icon={Activity}\n          color=\"text-green-600\"\n          description=\"Schools with active subscriptions\"\n        />\n        <StatCard\n          title=\"Total Revenue\"\n          value={formatCurrency(analytics.totalRevenue)}\n          icon={DollarSign}\n          color=\"text-yellow-600\"\n          description=\"Cumulative revenue generated\"\n        />\n        <StatCard\n          title=\"Pending Invoices\"\n          value={analytics.pendingInvoices}\n          icon={FileText}\n          color=\"text-red-600\"\n          description=\"Invoices awaiting payment\"\n        />\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Monthly Revenue Trend */}\n        <Card data-testid=\"chart-monthly-revenue\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Monthly Revenue Trend\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={analytics.monthlyRevenue}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis tickFormatter={(value) => `₦${(value / 100).toLocaleString()}`} />\n                <Tooltip formatter={(value: number) => [formatCurrency(value), \"Revenue\"]} />\n                <Legend />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"revenue\" \n                  stroke=\"#8884d8\" \n                  strokeWidth={2}\n                  dot={{ fill: \"#8884d8\", strokeWidth: 2, r: 4 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Schools by Status */}\n        <Card data-testid=\"chart-schools-status\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Schools by Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={analytics.schoolsByStatus}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"count\"\n                >\n                  {analytics.schoolsByStatus.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Feature Usage */}\n        <Card data-testid=\"chart-feature-usage\">\n          <CardHeader>\n            <CardTitle>Popular Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.featureUsage} layout=\"horizontal\">\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis type=\"number\" tickFormatter={(value) => value.toString()} />\n                <YAxis dataKey=\"name\" type=\"category\" width={120} />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#8884d8\" name=\"Usage Count\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Invoice Status Distribution */}\n        <Card data-testid=\"chart-invoice-status\">\n          <CardHeader>\n            <CardTitle>Invoice Status Distribution</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <BarChart data={analytics.invoiceStatus}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"status\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Bar dataKey=\"count\" fill=\"#82ca9d\" name=\"Invoice Count\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Feature Revenue Table */}\n      <Card data-testid=\"table-feature-revenue\">\n        <CardHeader>\n          <CardTitle>Feature Revenue Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {analytics.featureUsage.map((feature, index) => (\n              <div \n                key={feature.name} \n                className=\"flex items-center justify-between p-4 border rounded-lg\"\n                data-testid={`feature-revenue-${index}`}\n              >\n                <div className=\"flex items-center gap-4\">\n                  <Badge variant=\"outline\">{index + 1}</Badge>\n                  <div>\n                    <h4 className=\"font-medium\" data-testid={`feature-name-${index}`}>\n                      {feature.name}\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {feature.count} schools using this feature\n                    </p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"font-bold text-lg\" data-testid={`feature-revenue-amount-${index}`}>\n                    {formatCurrency(feature.revenue)}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8975},"client/src/pages/superadmin/features.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, DollarSign, Link } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\nimport FeatureMenuManagementModal from \"@/components/superadmin/feature-menu-management-modal\";\n\ninterface MenuLink {\n  name: string;\n  href: string;\n  icon: string;\n  enabled?: boolean;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description?: string;\n  price?: number;\n  category?: string;\n  isActive: boolean;\n  menuLinks?: MenuLink[];\n  type: {\n    module: boolean;\n    standalone: boolean;\n    both: boolean;\n  };\n  createdAt: string;\n}\n\ninterface FeatureFormData {\n  name: string;\n  description: string;\n  price: string;\n  category: string;\n  type: {\n    module: boolean;\n    standalone: boolean;\n    both: boolean;\n  };\n}\n\nexport default function FeaturesPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [isMenuModalOpen, setIsMenuModalOpen] = useState(false);\n  const [editingFeature, setEditingFeature] = useState<Feature | null>(null);\n  const [menuEditingFeature, setMenuEditingFeature] = useState<Feature | null>(null);\n  const [formData, setFormData] = useState<FeatureFormData>({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    category: \"CORE\",\n    type: {\n      module: false,\n      standalone: false,\n      both: false,\n    },\n  });\n\n  const { data: features = [], isLoading } = useQuery({\n    queryKey: [\"/api/features\"],\n  });\n\n  const createFeatureMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/features\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Feature created successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateFeatureMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) =>\n      apiRequest(\"PUT\", `/api/features/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: \"Success\",\n        description: \"Feature updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFeatureMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/features/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      toast({\n        title: \"Success\",\n        description: \"Feature deleted successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      category: \"CORE\",\n      type: {\n        module: false,\n        standalone: false,\n        both: false,\n      },\n    });\n    setEditingFeature(null);\n  };\n\n  const openCreateDialog = () => {\n    resetForm();\n    setIsDialogOpen(true);\n  };\n\n  const openEditDialog = (feature: Feature) => {\n    setEditingFeature(feature);\n    setFormData({\n      name: feature.name,\n      description: feature.description || \"\",\n      price: feature.price ? (feature.price / 100).toString() : \"\",\n      category: feature.category || \"CORE\",\n      type: feature.type || {\n        module: false,\n        standalone: false,\n        both: false,\n      },\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const submitData = {\n      name: formData.name,\n      description: formData.description,\n      price: formData.price ? parseFloat(formData.price) * 100 : null, // Convert to kobo\n      category: formData.category,\n      type: formData.type,\n      key: formData.name.toLowerCase().replace(/\\s+/g, \"_\"),\n    };\n\n    if (editingFeature) {\n      updateFeatureMutation.mutate({ id: editingFeature.id, data: submitData });\n    } else {\n      createFeatureMutation.mutate(submitData);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this feature?\")) {\n      deleteFeatureMutation.mutate(id);\n    }\n  };\n\n  const handleManageMenuLinks = (feature: Feature) => {\n    setMenuEditingFeature(feature);\n    setIsMenuModalOpen(true);\n  };\n\n  const getTypeDisplay = (type: Feature[\"type\"]) => {\n    if (!type || typeof type !== \"object\") return \"Not specified\";\n    const types = [];\n    if (type.module) types.push(\"Module\");\n    if (type.standalone) types.push(\"Standalone\");\n    if (type.both) types.push(\"Both\");\n    return types.join(\", \") || \"Not specified\";\n  };\n\n  const formatPrice = (price?: number) => {\n    if (!price) return \"Manual entry\";\n    return `₦${(price / 100).toLocaleString()}`;\n  };\n\n  return (\n    <SuperAdminLayout\n      title=\"Features Management\"\n      subtitle=\" Manage system features and their pricing configuration\"\n    >\n      <div className=\"space-y-6\" data-testid=\"features-page\">\n        <div className=\"flex items-center justify-between\">\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                onClick={openCreateDialog}\n                data-testid=\"button-create-feature\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Feature\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingFeature ? \"Edit Feature\" : \"Create New Feature\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Feature Name</Label>\n                  <Input\n                    id=\"name\"\n                    data-testid=\"input-feature-name\"\n                    value={formData.name}\n                    onChange={(e) =>\n                      setFormData({ ...formData, name: e.target.value })\n                    }\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Input\n                    id=\"description\"\n                    data-testid=\"input-feature-description\"\n                    value={formData.description}\n                    onChange={(e) =>\n                      setFormData({ ...formData, description: e.target.value })\n                    }\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"price\">Price (₦)</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    data-testid=\"input-feature-price\"\n                    value={formData.price}\n                    onChange={(e) =>\n                      setFormData({ ...formData, price: e.target.value })\n                    }\n                    placeholder=\"Leave empty for manual entry\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <select\n                    id=\"category\"\n                    data-testid=\"select-feature-category\"\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md\"\n                    value={formData.category}\n                    onChange={(e) =>\n                      setFormData({ ...formData, category: e.target.value })\n                    }\n                  >\n                    <option value=\"CORE\">Core</option>\n                    <option value=\"ACADEMICS\">Academics</option>\n                    <option value=\"FINANCE\">Finance</option>\n                    <option value=\"COMMUNICATION\">Communication</option>\n                    <option value=\"ADMINISTRATION\">Administration</option>\n                  </select>\n                </div>\n\n                <div>\n                  <Label>Feature Type</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"module\"\n                        data-testid=\"checkbox-type-module\"\n                        checked={formData.type?.module || false}\n                        onCheckedChange={(checked) =>\n                          setFormData({\n                            ...formData,\n                            type: { \n                              ...(formData.type || { module: false, standalone: false, both: false }), \n                              module: !!checked \n                            },\n                          })\n                        }\n                      />\n                      <Label htmlFor=\"module\">\n                        Module (part of main system)\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"standalone\"\n                        data-testid=\"checkbox-type-standalone\"\n                        checked={formData.type?.standalone || false}\n                        onCheckedChange={(checked) =>\n                          setFormData({\n                            ...formData,\n                            type: { \n                              ...(formData.type || { module: false, standalone: false, both: false }), \n                              standalone: !!checked \n                            },\n                          })\n                        }\n                      />\n                      <Label htmlFor=\"standalone\">\n                        Standalone (separate app)\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"both\"\n                        data-testid=\"checkbox-type-both\"\n                        checked={formData.type?.both || false}\n                        onCheckedChange={(checked) =>\n                          setFormData({\n                            ...formData,\n                            type: { \n                              ...(formData.type || { module: false, standalone: false, both: false }), \n                              both: !!checked \n                            },\n                          })\n                        }\n                      />\n                      <Label htmlFor=\"both\">\n                        Both (available in both ways)\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button\n                    type=\"submit\"\n                    data-testid=\"button-save-feature\"\n                    disabled={\n                      createFeatureMutation.isPending ||\n                      updateFeatureMutation.isPending\n                    }\n                  >\n                    {editingFeature ? \"Update\" : \"Create\"} Feature\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>System Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Price</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {(features as Feature[])?.map((feature: Feature) => (\n                    <TableRow\n                      key={feature.id}\n                      data-testid={`row-feature-${feature.id}`}\n                    >\n                      <TableCell\n                        className=\"font-medium\"\n                        data-testid={`text-feature-name-${feature.id}`}\n                      >\n                        {feature.name}\n                      </TableCell>\n                      <TableCell\n                        data-testid={`text-feature-description-${feature.id}`}\n                      >\n                        {feature.description}\n                      </TableCell>\n                      <TableCell\n                        data-testid={`text-feature-type-${feature.id}`}\n                      >\n                        {getTypeDisplay(feature.type)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{feature.category}</Badge>\n                      </TableCell>\n                      <TableCell\n                        data-testid={`text-feature-price-${feature.id}`}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          <DollarSign className=\"h-4 w-4\" />\n                          {formatPrice(feature.price)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={feature.isActive ? \"default\" : \"secondary\"}\n                        >\n                          {feature.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleManageMenuLinks(feature)}\n                            data-testid={`button-menu-links-${feature.id}`}\n                            title=\"Manage Menu Links\"\n                          >\n                            <Link className=\"h-4 w-4 text-indigo-600\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => openEditDialog(feature)}\n                            data-testid={`button-edit-feature-${feature.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(feature.id)}\n                            data-testid={`button-delete-feature-${feature.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Feature Menu Management Modal */}\n      <FeatureMenuManagementModal\n        isOpen={isMenuModalOpen}\n        onClose={() => {\n          setIsMenuModalOpen(false);\n          setMenuEditingFeature(null);\n        }}\n        feature={menuEditingFeature}\n      />\n    </SuperAdminLayout>\n  );\n}\n","size_bytes":17250},"client/src/pages/superadmin/invoices.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, FileText, Send, Calculator, Download } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\nimport type { School as SchoolType, Feature as FeatureType, Invoice as InvoiceType } from \"@/lib/types\";\n\n// Invoice form schema with enhanced features\nconst invoiceSchema = z.object({\n  schoolId: z.string().min(1, \"School is required\"),\n  features: z.array(z.object({\n    featureId: z.string(),\n    quantity: z.number().min(1),\n    unitPrice: z.number(),\n    unitMeasurement: z.string(),\n    startDate: z.string().optional(),\n    endDate: z.string().optional(),\n    negotiatedPrice: z.number().optional(),\n  })).min(1, \"At least one feature must be selected\"),\n  finalAmount: z.number().optional(),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  notes: z.string().optional(),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceSchema>;\n\ninterface School {\n  id: string;\n  schoolName: string;\n  shortName: string;\n  adminEmail: string;\n  hasNegotiatedPrice: boolean;\n}\n\ninterface Feature {\n  id: string;\n  name: string;\n  description?: string;\n  price: number;\n  pricingType: \"per_student\" | \"per_staff\" | \"per_term\" | \"per_semester\" | \"per_school\" | \"per_month\" | \"per_year\" | \"one_time\" | \"pay_as_you_go\" | \"custom\" | \"free\";\n  requiresDateRange: boolean;\n  isActive: boolean;\n}\n\ninterface SchoolFeature {\n  id: string;\n  schoolId: string;\n  featureId: string;\n  enabled: boolean;\n  feature: Feature;\n}\n\ninterface Invoice {\n  id: string;\n  schoolId: string;\n  schoolName: string;\n  invoiceNumber: string;\n  totalAmount: number;\n  customAmount?: number;\n  status: \"pending\" | \"paid\" | \"overdue\";\n  dueDate: string;\n  features: { id: string; name: string; price: number }[];\n  notes?: string;\n  createdAt: string;\n  paidAt?: string;\n}\n\nexport default function InvoicesPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [selectedInvoice, setSelectedInvoice] = useState<Invoice | null>(null);\n  const [selectedFeatures, setSelectedFeatures] = useState<any[]>([]);\n  const [calculatedTotal, setCalculatedTotal] = useState(0);\n  const [schoolFeatures, setSchoolFeatures] = useState<SchoolFeature[]>([]);\n  const [selectedSchoolId, setSelectedSchoolId] = useState<string>(\"\");\n  const [showCustomAmount, setShowCustomAmount] = useState(false);\n\n  // Fetch invoices\n  const { data: invoicesResponse, isLoading } = useQuery<{ invoices: Invoice[]; total: number }>({\n    queryKey: [\"/api/invoices\"],\n  });\n  const invoices = invoicesResponse?.invoices || [];\n\n  // Fetch schools\n  const { data: schoolsResponse } = useQuery<{ schools: SchoolType[] }>({\n    queryKey: [\"/api/superadmin/schools\"],\n  });\n  const schools = schoolsResponse?.schools || [];\n\n  // Fetch enabled school features when school is selected\n  const { data: enabledSchoolFeatures = [], refetch: refetchSchoolFeatures } = useQuery({\n    queryKey: [\"/api/schools\", selectedSchoolId, \"enabled-features\"],\n    enabled: !!selectedSchoolId,\n  });\n\n  // Create invoice mutation\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: InvoiceFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/invoices\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully! Email sent to school.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      setCreateDialogOpen(false);\n      form.reset();\n      setSelectedFeatures([]);\n      setCalculatedTotal(0);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update invoice mutation\n  const updateInvoiceMutation = useMutation({\n    mutationFn: async (data: { id: string; updates: Partial<InvoiceFormData> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/invoices/${data.id}`, data.updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      setEditDialogOpen(false);\n      setSelectedInvoice(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete invoice mutation\n  const deleteInvoiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/invoices/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice deleted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send invoice email mutation\n  const sendInvoiceEmailMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      const response = await apiRequest(\"POST\", `/api/invoices/${invoiceId}/send-email`);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Invoice email sent successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate default invoice mutation\n  const generateDefaultInvoiceMutation = useMutation({\n    mutationFn: async (schoolId: string) => {\n      const response = await apiRequest(\"POST\", `/api/invoices/generate-default`, { schoolId });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Default invoice generated and sent!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      schoolId: \"\",\n      features: [],\n      dueDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Calculate total when features change\n  const handleFeatureChange = (featureId: string, checked: boolean) => {\n    let newSelected = [...selectedFeatures];\n    \n    if (checked) {\n      newSelected.push(featureId);\n    } else {\n      newSelected = newSelected.filter(id => id !== featureId);\n    }\n    \n    setSelectedFeatures(newSelected);\n    form.setValue(\"features\", newSelected);\n    \n    // Calculate total - Note: features list is available through enabledSchoolFeatures query\n    const total = newSelected.reduce((sum, id) => {\n      const feature = enabledSchoolFeatures.find((f: any) => f.feature.id === id);\n      return sum + (feature?.feature.price || 0);\n    }, 0);\n    \n    setCalculatedTotal(total);\n  };\n\n  // Check if selected school has negotiated pricing\n  const selectedSchool = schools.find((s: SchoolType) => s.id === form.watch(\"schoolId\"));\n  const hasNegotiatedPrice = false; // Remove this field for now since it's not in the schema\n\n  const handleEdit = (invoice: Invoice) => {\n    setSelectedInvoice(invoice);\n    setSelectedFeatures(invoice.features.map(f => f.id));\n    setCalculatedTotal(invoice.totalAmount);\n    \n    form.reset({\n      schoolId: invoice.schoolId,\n      features: invoice.features.map(f => ({\n        featureId: f.id,\n        quantity: 1,\n        unitPrice: f.price,\n        unitMeasurement: \"per_school\",\n      })),\n      dueDate: invoice.dueDate.split('T')[0], // Format for date input\n      notes: invoice.notes || \"\",\n    });\n    \n    setEditDialogOpen(true);\n  };\n\n  const handleDelete = (invoice: Invoice) => {\n    if (window.confirm(`Are you sure you want to delete invoice ${invoice.invoiceNumber}? This action cannot be undone.`)) {\n      deleteInvoiceMutation.mutate(invoice.id);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"default\";\n      case \"pending\":\n        return \"secondary\";\n      case \"overdue\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  return (\n    <SuperAdminLayout title=\"Invoice Management\" subtitle=\"Create and manage invoices for schools\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Invoice Management</h1>\n            <p className=\"text-muted-foreground\">Create and manage school invoices and payments</p>\n          </div>\n\n          <div className=\"flex space-x-2\">\n            <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-invoice\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Create Invoice\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Create New Invoice</DialogTitle>\n                  <DialogDescription>\n                    Select school and features to generate an invoice. Email will be sent automatically.\n                  </DialogDescription>\n                </DialogHeader>\n\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit((data) => createInvoiceMutation.mutate(data))} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"schoolId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>School</FormLabel>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-school\">\n                                  <SelectValue placeholder=\"Select school\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {schools.map((school: SchoolType) => (\n                                  <SelectItem key={school.id} value={school.id}>\n                                    {school.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"dueDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Due Date</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"date\" \n                                data-testid=\"input-due-date\" \n                                {...field} \n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    {/* Features Selection */}\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <FormLabel>Select Features</FormLabel>\n                        {hasNegotiatedPrice && (\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setShowCustomAmount(!showCustomAmount)}\n                            data-testid=\"button-toggle-custom-amount\"\n                          >\n                            <Calculator className=\"mr-2 h-4 w-4\" />\n                            {showCustomAmount ? \"Hide\" : \"Show\"} Custom Amount\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 max-h-60 overflow-y-auto border rounded-lg p-4\">\n                        {enabledSchoolFeatures.map((schoolFeature: any) => {\n                          const feature = schoolFeature.feature;\n                          return (\n                            <div key={feature.id} className=\"flex items-center space-x-2\">\n                              <Checkbox\n                                id={feature.id}\n                                checked={selectedFeatures.includes(feature.id)}\n                                onCheckedChange={(checked) => handleFeatureChange(feature.id, checked as boolean)}\n                                data-testid={`checkbox-feature-${feature.id}`}\n                              />\n                              <label\n                                htmlFor={feature.id}\n                                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 flex-1\"\n                              >\n                                <div>{feature.name}</div>\n                                <div className=\"text-xs text-muted-foreground\">₦{feature.price.toLocaleString()}</div>\n                              </label>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n\n                    {/* Pricing Summary */}\n                    <div className=\"bg-muted/50 rounded-lg p-4\">\n                      <div className=\"flex justify-between items-center text-sm\">\n                        <span>Calculated Total:</span>\n                        <span className=\"font-medium\">₦{calculatedTotal.toLocaleString()}</span>\n                      </div>\n                      \n                      {showCustomAmount && hasNegotiatedPrice && (\n                        <div className=\"mt-2\">\n                          <FormField\n                            control={form.control}\n                            name=\"finalAmount\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-xs\">Custom Amount (Override)</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    type=\"number\"\n                                    placeholder=\"Enter custom amount\"\n                                    data-testid=\"input-custom-amount\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      )}\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"notes\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Notes (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Additional notes for this invoice\"\n                              data-testid=\"textarea-notes\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <DialogFooter>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setCreateDialogOpen(false)}\n                        data-testid=\"button-cancel-create\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createInvoiceMutation.isPending || selectedFeatures.length === 0}\n                        data-testid=\"button-submit-create\"\n                      >\n                        {createInvoiceMutation.isPending ? \"Creating...\" : \"Create & Send Invoice\"}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        {/* Invoices Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Invoices ({invoices.length})</CardTitle>\n            <CardDescription>\n              Manage all invoices and track payment status\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading invoices...</div>\n            ) : invoices.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No invoices found. Create your first invoice to get started.\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Invoice #</TableHead>\n                    <TableHead>School</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {invoices.map((invoice: Invoice) => (\n                    <TableRow key={invoice.id}>\n                      <TableCell>\n                        <div className=\"font-medium\">{invoice.invoiceNumber}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {new Date(invoice.createdAt).toLocaleDateString()}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">{invoice.schoolName}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {invoice.features.length} features\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium\">₦{invoice.totalAmount.toLocaleString()}</div>\n                        {invoice.customAmount && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            (Custom: ₦{invoice.customAmount.toLocaleString()})\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusColor(invoice.status)}>\n                          {invoice.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div>{new Date(invoice.dueDate).toLocaleDateString()}</div>\n                        {invoice.paidAt && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            Paid: {new Date(invoice.paidAt).toLocaleDateString()}\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(invoice)}\n                            data-testid={`button-edit-${invoice.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => sendInvoiceEmailMutation.mutate(invoice.id)}\n                            data-testid={`button-resend-${invoice.id}`}\n                          >\n                            <Send className=\"h-4 w-4\" />\n                          </Button>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => window.open(`/api/invoices/${invoice.id}/download`, '_blank')}\n                            data-testid={`button-download-${invoice.id}`}\n                          >\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(invoice)}\n                            data-testid={`button-delete-${invoice.id}`}\n                            className=\"text-destructive hover:text-destructive\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </SuperAdminLayout>\n  );\n}","size_bytes":23477},"client/src/pages/superadmin/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuthStore } from \"@/store/auth\";\nimport { api } from \"@/lib/api\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\n\n// Profile form schema\nconst profileSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  currentPassword: z.string().optional(),\n  newPassword: z.string().optional(),\n  confirmPassword: z.string().optional(),\n}).refine((data) => {\n  if (data.newPassword && data.newPassword !== data.confirmPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n}).refine((data) => {\n  if (data.newPassword && !data.currentPassword) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Current password is required to set new password\",\n  path: [\"currentPassword\"],\n});\n\n// App settings form schema\nconst appSettingsSchema = z.object({\n  appName: z.string().min(1, \"App name is required\"),\n  appLogo: z.string().optional(),\n  domain: z.string().url(\"Invalid domain URL\").optional().or(z.literal(\"\")),\n  smtpHost: z.string().optional(),\n  smtpPort: z.string().optional(),\n  smtpUser: z.string().optional(),\n  smtpPassword: z.string().optional(),\n  smtpSecure: z.boolean(),\n  emailFromAddress: z.string().email(\"Invalid email address\").optional().or(z.literal(\"\")),\n  emailFromName: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\ntype AppSettingsFormData = z.infer<typeof appSettingsSchema>;\n\nexport default function SettingsPage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user, updateUser } = useAuthStore();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  // Fetch app settings\n  const { data: appSettings, isLoading: appSettingsLoading } = useQuery({\n    queryKey: [\"/api/superadmin/settings\"],\n    queryFn: () => api.superadmin.getAppSettings(),\n  });\n\n  // Profile form\n  const profileForm = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // App settings form\n  const appSettingsForm = useForm<AppSettingsFormData>({\n    resolver: zodResolver(appSettingsSchema),\n    values: appSettings ? {\n      appName: appSettings.appName || \"Elite Scholar\",\n      appLogo: appSettings.appLogo || \"\",\n      domain: appSettings.domain || \"\",\n      smtpHost: appSettings.smtpHost || \"\",\n      smtpPort: appSettings.smtpPort || \"587\",\n      smtpUser: appSettings.smtpUser || \"\",\n      smtpPassword: appSettings.smtpPassword || \"\",\n      smtpSecure: appSettings.smtpSecure || false,\n      emailFromAddress: appSettings.emailFromAddress || \"\",\n      emailFromName: appSettings.emailFromName || \"Elite Scholar\",\n    } : undefined,\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: (data: ProfileFormData) => api.auth.updateProfile(data),\n    onSuccess: (updatedUser) => {\n      updateUser(updatedUser);\n      profileForm.reset({\n        name: updatedUser.name,\n        email: updatedUser.email,\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n      toast({\n        title: \"Profile updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update app settings mutation\n  const updateAppSettingsMutation = useMutation({\n    mutationFn: (data: AppSettingsFormData) => api.superadmin.updateAppSettings(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/settings\"] });\n      toast({\n        title: \"Settings updated\",\n        description: \"App settings have been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test email connection mutation\n  const testEmailMutation = useMutation({\n    mutationFn: () => api.superadmin.testEmailConnection(),\n    onSuccess: () => {\n      toast({\n        title: \"Email test successful\",\n        description: \"Email configuration is working correctly.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Email test failed\",\n        description: error.message || \"Failed to send test email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProfileSubmit = (data: ProfileFormData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  const handleAppSettingsSubmit = (data: AppSettingsFormData) => {\n    updateAppSettingsMutation.mutate(data);\n  };\n\n  const handleTestEmail = () => {\n    testEmailMutation.mutate();\n  };\n\n  return (\n    <SuperAdminLayout\n      title=\"Settings\"\n      subtitle=\"Configure your profile and application settings\"\n    >\n      <div className=\"max-w-4xl mx-auto\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n            <TabsTrigger value=\"app\" data-testid=\"tab-app\">App Settings</TabsTrigger>\n          </TabsList>\n\n          {/* Profile Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Profile Settings</CardTitle>\n                <CardDescription>\n                  Update your personal information and change your password.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Form {...profileForm}>\n                  <form onSubmit={profileForm.handleSubmit(handleProfileSubmit)} className=\"space-y-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <FormField\n                        control={profileForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Full Name</FormLabel>\n                            <FormControl>\n                              <Input {...field} data-testid=\"input-name\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={profileForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email Address</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"border-t pt-6\">\n                      <h4 className=\"text-sm font-medium text-slate-900 mb-4\">Change Password</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <FormField\n                          control={profileForm.control}\n                          name=\"currentPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Current Password</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"password\" data-testid=\"input-current-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={profileForm.control}\n                          name=\"newPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>New Password</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"password\" data-testid=\"input-new-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={profileForm.control}\n                          name=\"confirmPassword\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Confirm Password</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"password\" data-testid=\"input-confirm-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <div className=\"flex justify-end\">\n                      <Button \n                        type=\"submit\" \n                        disabled={updateProfileMutation.isPending}\n                        data-testid=\"button-save-profile\"\n                      >\n                        {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* App Settings Tab */}\n          <TabsContent value=\"app\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Application Settings</CardTitle>\n                <CardDescription>\n                  Configure global application settings and email configuration.\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {appSettingsLoading ? (\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(6)].map((_, i) => (\n                      <div key={i} className=\"h-10 bg-slate-200 rounded\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <Form {...appSettingsForm}>\n                    <form onSubmit={appSettingsForm.handleSubmit(handleAppSettingsSubmit)} className=\"space-y-6\">\n                      {/* App Configuration */}\n                      <div>\n                        <h4 className=\"text-sm font-medium text-slate-900 mb-4\">App Configuration</h4>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"appName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>App Name</FormLabel>\n                                <FormControl>\n                                  <Input {...field} data-testid=\"input-app-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"domain\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Domain URL</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"https://yourschool.elitescholar.com\" data-testid=\"input-domain\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      {/* Email Configuration */}\n                      <div className=\"border-t pt-6\">\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <h4 className=\"text-sm font-medium text-slate-900\">Email Configuration (Nodemailer)</h4>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleTestEmail}\n                            disabled={testEmailMutation.isPending}\n                            data-testid=\"button-test-email\"\n                          >\n                            {testEmailMutation.isPending ? \"Testing...\" : \"Test Connection\"}\n                          </Button>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"smtpHost\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>SMTP Host</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"smtp.gmail.com\" data-testid=\"input-smtp-host\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"smtpPort\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>SMTP Port</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"587\" data-testid=\"input-smtp-port\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"smtpUser\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>SMTP Username</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"your-email@gmail.com\" data-testid=\"input-smtp-user\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"smtpPassword\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>SMTP Password</FormLabel>\n                                <FormControl>\n                                  <Input {...field} type=\"password\" placeholder=\"App password or email password\" data-testid=\"input-smtp-password\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"emailFromAddress\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>From Email Address</FormLabel>\n                                <FormControl>\n                                  <Input {...field} type=\"email\" placeholder=\"noreply@elitescholar.com\" data-testid=\"input-from-email\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={appSettingsForm.control}\n                            name=\"emailFromName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>From Name</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"Elite Scholar\" data-testid=\"input-from-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"flex justify-end\">\n                        <Button \n                          type=\"submit\" \n                          disabled={updateAppSettingsMutation.isPending}\n                          data-testid=\"button-save-settings\"\n                        >\n                          {updateAppSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SuperAdminLayout>\n  );\n}","size_bytes":18940},"client/src/components/superadmin/features-management.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit2, Trash2, DollarSign } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nconst featureFormSchema = z.object({\n  key: z.string().min(1, \"Feature key is required\"),\n  name: z.string().min(1, \"Feature name is required\"),\n  description: z.string().optional(),\n  price: z.string().optional(),\n  pricingType: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  isCore: z.boolean().default(false),\n});\n\ntype FeatureFormData = z.infer<typeof featureFormSchema>;\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description?: string;\n  price?: number;\n  pricingType?: string;\n  category: string;\n  isCore: boolean;\n  isActive: boolean;\n  createdAt: string;\n}\n\nconst pricingTypes = [\n  { value: \"free\", label: \"Free\" },\n  { value: \"per_student\", label: \"Per Student\" },\n  { value: \"per_staff\", label: \"Per Staff\" },\n  { value: \"per_term\", label: \"Per Term\" },\n  { value: \"per_semester\", label: \"Per Semester\" },\n  { value: \"per_school\", label: \"Per School\" },\n  { value: \"per_month\", label: \"Per Month\" },\n  { value: \"per_year\", label: \"Per Year\" },\n  { value: \"one_time\", label: \"One Time\" },\n  { value: \"pay_as_you_go\", label: \"Pay as You Go\" },\n  { value: \"custom\", label: \"Custom Pricing\" },\n];\n\nconst categories = [\n  \"academics\",\n  \"administration\", \n  \"finance\",\n  \"communication\",\n  \"assessment\",\n  \"reporting\",\n  \"general\",\n];\n\nexport default function FeaturesManagement() {\n  const { toast } = useToast();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingFeature, setEditingFeature] = useState<Feature | null>(null);\n\n  const { data: features = [], isLoading } = useQuery({\n    queryKey: [\"/api/features\"],\n    queryFn: () => fetch(\"/api/features\").then(res => res.json()),\n  });\n\n  const form = useForm<FeatureFormData>({\n    resolver: zodResolver(featureFormSchema),\n    defaultValues: {\n      key: \"\",\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      pricingType: \"\",\n      category: \"general\",\n      isCore: false,\n    },\n  });\n\n  const createFeatureMutation = useMutation({\n    mutationFn: (data: FeatureFormData) => {\n      const payload = {\n        ...data,\n        price: data.price ? parseFloat(data.price) * 100 : null, // Convert to kobo\n      };\n      return fetch(\"/api/features\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      }).then(res => res.json());\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      toast({\n        title: \"Success\",\n        description: \"Feature created successfully\",\n      });\n      setIsFormOpen(false);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateFeatureMutation = useMutation({\n    mutationFn: ({ featureId, data }: { featureId: string; data: FeatureFormData }) => {\n      const payload = {\n        ...data,\n        price: data.price ? parseFloat(data.price) * 100 : null,\n      };\n      return fetch(`/api/features/${featureId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      }).then(res => res.json());\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      toast({\n        title: \"Success\",\n        description: \"Feature updated successfully\",\n      });\n      setIsFormOpen(false);\n      setEditingFeature(null);\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFeatureMutation = useMutation({\n    mutationFn: (featureId: string) => fetch(`/api/features/${featureId}`, {\n      method: \"DELETE\",\n    }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      toast({\n        title: \"Success\",\n        description: \"Feature deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete feature\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleFeatureStatusMutation = useMutation({\n    mutationFn: ({ featureId, isActive }: { featureId: string; isActive: boolean }) => \n      fetch(`/api/features/${featureId}`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ isActive }),\n      }).then(res => res.json()),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      toast({\n        title: \"Success\",\n        description: \"Feature status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update feature status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateFeature = () => {\n    setEditingFeature(null);\n    form.reset();\n    setIsFormOpen(true);\n  };\n\n  const handleEditFeature = (feature: Feature) => {\n    setEditingFeature(feature);\n    form.reset({\n      key: feature.key,\n      name: feature.name,\n      description: feature.description || \"\",\n      price: feature.price ? (feature.price / 100).toString() : \"\",\n      pricingType: feature.pricingType || \"\",\n      category: feature.category,\n      isCore: feature.isCore,\n    });\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteFeature = (featureId: string) => {\n    if (confirm(\"Are you sure you want to delete this feature?\")) {\n      deleteFeatureMutation.mutate(featureId);\n    }\n  };\n\n  const onSubmit = (data: FeatureFormData) => {\n    if (editingFeature) {\n      updateFeatureMutation.mutate({ featureId: editingFeature.id, data });\n    } else {\n      createFeatureMutation.mutate(data);\n    }\n  };\n\n  const formatPrice = (price?: number, pricingType?: string) => {\n    if (!price) return \"Free\";\n    const nairaPrice = price / 100;\n    const typeLabel = pricingTypes.find(pt => pt.value === pricingType)?.label || \"\";\n    return `₦${nairaPrice.toLocaleString()} ${typeLabel}`;\n  };\n\n  if (isLoading) {\n    return <div>Loading features...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-slate-900\">Features Management</h2>\n          <p className=\"text-slate-600\">Manage system features and pricing</p>\n        </div>\n        <Button onClick={handleCreateFeature} data-testid=\"button-create-feature\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Feature\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {features.map((feature: Feature) => (\n          <Card key={feature.id} className=\"relative\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex justify-between items-start\">\n                <div className=\"space-y-1\">\n                  <CardTitle className=\"text-lg\">{feature.name}</CardTitle>\n                  <Badge variant={feature.isCore ? \"default\" : \"secondary\"}>\n                    {feature.isCore ? \"Core\" : \"Optional\"}\n                  </Badge>\n                </div>\n                <div className=\"flex space-x-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleEditFeature(feature)}\n                    data-testid={`button-edit-feature-${feature.id}`}\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </Button>\n                  {!feature.isCore && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDeleteFeature(feature.id)}\n                      data-testid={`button-delete-feature-${feature.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4 text-red-500\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-slate-600\">{feature.description}</p>\n                <div className=\"flex items-center space-x-2\">\n                  <DollarSign className=\"w-4 h-4 text-green-600\" />\n                  <span className=\"font-medium text-green-600\">\n                    {formatPrice(feature.price, feature.pricingType)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center text-sm\">\n                  <span className=\"text-slate-500\">Category: {feature.category}</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={feature.isActive}\n                      onCheckedChange={(checked) =>\n                        toggleFeatureStatusMutation.mutate({ \n                          featureId: feature.id, \n                          isActive: checked \n                        })\n                      }\n                      disabled={toggleFeatureStatusMutation.isPending}\n                      data-testid={`switch-feature-status-${feature.id}`}\n                    />\n                    <Badge variant={feature.isActive ? \"default\" : \"secondary\"}>\n                      {feature.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"feature-form-modal\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingFeature ? \"Edit Feature\" : \"Create New Feature\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingFeature ? \"Update feature details\" : \"Add a new feature to the system\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"key\">Feature Key *</Label>\n                <Input\n                  id=\"key\"\n                  placeholder=\"student_portal\"\n                  {...form.register(\"key\")}\n                  data-testid=\"input-feature-key\"\n                />\n                {form.formState.errors.key && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.key.message}</p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Feature Name *</Label>\n                <Input\n                  id=\"name\"\n                  placeholder=\"Student Portal\"\n                  {...form.register(\"name\")}\n                  data-testid=\"input-feature-name\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                placeholder=\"Feature description...\"\n                {...form.register(\"description\")}\n                data-testid=\"input-feature-description\"\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"price\">Price (₦)</Label>\n                <Input\n                  id=\"price\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  placeholder=\"0.00\"\n                  {...form.register(\"price\")}\n                  data-testid=\"input-feature-price\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"pricingType\">Pricing Type</Label>\n                <Select\n                  value={form.watch(\"pricingType\")}\n                  onValueChange={(value) => form.setValue(\"pricingType\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-pricing-type\">\n                    <SelectValue placeholder=\"Select pricing type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {pricingTypes.map((type) => (\n                      <SelectItem key={type.value} value={type.value}>\n                        {type.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <Select\n                  value={form.watch(\"category\")}\n                  onValueChange={(value) => form.setValue(\"category\", value)}\n                >\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category.charAt(0).toUpperCase() + category.slice(1)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"isCore\">Core Feature</Label>\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"isCore\"\n                    checked={form.watch(\"isCore\")}\n                    onCheckedChange={(checked) => form.setValue(\"isCore\", checked)}\n                    data-testid=\"switch-is-core\"\n                  />\n                  <span className=\"text-sm text-slate-600\">\n                    Core features cannot be disabled\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsFormOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createFeatureMutation.isPending || updateFeatureMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {createFeatureMutation.isPending || updateFeatureMutation.isPending ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n                    {editingFeature ? \"Updating...\" : \"Creating...\"}\n                  </>\n                ) : (\n                  editingFeature ? \"Update Feature\" : \"Create Feature\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":16606},"client/src/pages/superadmin/invoices-enhanced.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, FileText, Send, Calculator, Download, Calendar } from \"lucide-react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { api } from \"@/lib/api\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\nimport InvoiceSendPage from \"./invoice-send\";\nimport EnhancedInvoiceView from \"./enhanced-invoice-view\";\nimport type { School as SchoolType, Feature as FeatureType, Invoice as InvoiceType } from \"@/lib/types\";\n\n// Enhanced invoice form schema\nconst invoiceLineSchema = z.object({\n  featureId: z.string(),\n  quantity: z.number().min(1),\n  unitPrice: z.number(),\n  unitMeasurement: z.string(),\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n  negotiatedPrice: z.number().optional(),\n});\n\nconst invoiceSchema = z.object({\n  schoolId: z.string().min(1, \"School is required\"),\n  features: z.array(invoiceLineSchema).min(1, \"At least one feature must be selected\"),\n  finalAmount: z.number().optional(),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  notes: z.string().optional(),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceSchema>;\ntype InvoiceLineData = z.infer<typeof invoiceLineSchema>;\n\ninterface School {\n  id: string;\n  name: string;\n  shortName: string;\n  adminEmail: string;\n  hasNegotiatedPrice: boolean;\n}\n\ninterface Feature {\n  id: string;\n  name: string;\n  description?: string;\n  price: number;\n  pricingType: \"per_student\" | \"per_staff\" | \"per_term\" | \"per_semester\" | \"per_school\" | \"per_month\" | \"per_year\" | \"one_time\" | \"pay_as_you_go\" | \"custom\" | \"free\";\n  requiresDateRange?: boolean;\n  isActive: boolean;\n}\n\ninterface SchoolFeature {\n  id: string;\n  schoolId: string;\n  featureId: string;\n  enabled: boolean;\n  feature: Feature;\n}\n\ninterface Invoice {\n  id: string;\n  schoolId: string;\n  schoolName: string;\n  invoiceNumber: string;\n  totalAmount: number;\n  finalAmount?: number;\n  status: \"pending\" | \"paid\" | \"overdue\";\n  dueDate: string;\n  features: InvoiceLineData[];\n  notes?: string;\n  createdAt: string;\n  paidAt?: string;\n}\n\nconst UNIT_MEASUREMENT_OPTIONS = [\n  { value: \"per_student\", label: \"Per Student\" },\n  { value: \"per_staff\", label: \"Per Staff\" },\n  { value: \"per_term\", label: \"Per Term\" },\n  { value: \"per_semester\", label: \"Per Semester\" },\n  { value: \"per_school\", label: \"Per School\" },\n  { value: \"per_month\", label: \"Per Month\" },\n  { value: \"per_year\", label: \"Per Year\" },\n  { value: \"one_time\", label: \"One Time\" },\n  { value: \"pay_as_you_go\", label: \"Pay As You Go\" },\n  { value: \"custom\", label: \"Custom\" },\n];\n\nexport default function EnhancedInvoicesPage() {\n  const { toast } = useToast();\n  const [sendingInvoice, setSendingInvoice] = useState<{\n    id: string;\n    schoolName: string;\n    invoiceNumber: string;\n    totalAmount: string;\n  } | null>(null);\n  const [viewingInvoice, setViewingInvoice] = useState<string | null>(null);\n\n  // Show enhanced invoice view if viewing\n  if (viewingInvoice) {\n    return (\n      <EnhancedInvoiceView\n        invoiceId={viewingInvoice}\n        onClose={() => setViewingInvoice(null)}\n      />\n    );\n  }\n  const queryClient = useQueryClient();\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [selectedSchoolId, setSelectedSchoolId] = useState<string>(\"\");\n  const [enabledFeatures, setEnabledFeatures] = useState<SchoolFeature[]>([]);\n  const [calculatedTotal, setCalculatedTotal] = useState(0);\n\n  // Form setup\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      schoolId: \"\",\n      features: [],\n      dueDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Fetch invoices\n  const { data: invoicesResponse, isLoading } = useQuery<{ invoices: Invoice[]; total: number }>({\n    queryKey: [\"/api/invoices\"],\n  });\n  const invoices = invoicesResponse?.invoices || [];\n\n  // Fetch schools\n  const { data: schoolsResponse } = useQuery<{ schools: SchoolType[] }>({\n    queryKey: [\"/api/superadmin/schools\"],\n  });\n  const schools = schoolsResponse?.schools || [];\n\n  // Fetch enabled school features when school is selected\n  useEffect(() => {\n    if (selectedSchoolId) {\n      api.superadmin.getEnabledSchoolFeatures(selectedSchoolId)\n        .then((features) => {\n          setEnabledFeatures(features);\n        })\n        .catch((error) => {\n          console.error(\"Failed to fetch school features:\", error);\n          toast({\n            title: \"Error\",\n            description: \"Failed to fetch school features\",\n            variant: \"destructive\",\n          });\n        });\n    }\n  }, [selectedSchoolId, toast]);\n\n  // Create invoice mutation\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: InvoiceFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/invoices/enhanced\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Enhanced invoice created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      setCreateDialogOpen(false);\n      form.reset();\n      setSelectedSchoolId(\"\");\n      setEnabledFeatures([]);\n      setCalculatedTotal(0);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete invoice mutation\n  const deleteInvoiceMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/invoices/${invoiceId}`, null);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Enhanced invoice deleted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle school selection\n  const handleSchoolChange = (schoolId: string) => {\n    setSelectedSchoolId(schoolId);\n    form.setValue(\"schoolId\", schoolId);\n    form.setValue(\"features\", []); // Reset features when school changes\n  };\n\n  // Add feature to invoice\n  const addFeature = (feature: Feature) => {\n    const currentFeatures = form.getValues(\"features\");\n    const existingFeature = currentFeatures.find(f => f.featureId === feature.id);\n    \n    if (existingFeature) {\n      toast({\n        title: \"Feature already added\",\n        description: \"This feature is already in the invoice\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newFeature: InvoiceLineData = {\n      featureId: feature.id,\n      quantity: 1,\n      unitPrice: feature.price / 100, // Convert from kobo to naira\n      unitMeasurement: feature.pricingType || \"per_school\",\n      ...(feature.requiresDateRange && {\n        startDate: \"\",\n        endDate: \"\",\n      }),\n    };\n\n    form.setValue(\"features\", [...currentFeatures, newFeature]);\n    calculateTotal();\n  };\n\n  // Remove feature from invoice\n  const removeFeature = (index: number) => {\n    const currentFeatures = form.getValues(\"features\");\n    const updatedFeatures = currentFeatures.filter((_, i) => i !== index);\n    form.setValue(\"features\", updatedFeatures);\n    calculateTotal();\n  };\n\n  // Calculate total amount\n  const calculateTotal = () => {\n    const features = form.getValues(\"features\");\n    const total = features.reduce((sum, feature) => {\n      const price = feature.negotiatedPrice || feature.unitPrice;\n      return sum + (price * feature.quantity);\n    }, 0);\n    setCalculatedTotal(total);\n  };\n\n  // Update feature data\n  const updateFeature = (index: number, field: keyof InvoiceLineData, value: any) => {\n    const currentFeatures = form.getValues(\"features\");\n    const updatedFeatures = [...currentFeatures];\n    (updatedFeatures[index] as any)[field] = value;\n    form.setValue(\"features\", updatedFeatures);\n    calculateTotal();\n  };\n\n  const handleSubmit = (data: InvoiceFormData) => {\n    // Add final amount if provided\n    const submitData = {\n      ...data,\n      finalAmount: data.finalAmount || calculatedTotal,\n    };\n    createInvoiceMutation.mutate(submitData);\n  };\n\n  const formatPrice = (price: number) => {\n    return `₦${price.toLocaleString()}`;\n  };\n\n  const getFeatureName = (featureId: string) => {\n    const feature = enabledFeatures.find(f => f.feature.id === featureId);\n    return feature?.feature.name || \"Unknown Feature\";\n  };\n\n  const handleDeleteInvoice = (invoice: any) => {\n    if (window.confirm(`Are you sure you want to delete invoice ${invoice.invoiceNumber}? This action cannot be undone.`)) {\n      deleteInvoiceMutation.mutate(invoice.id);\n    }\n  };\n\n  return (\n    <SuperAdminLayout\n      title=\"Enhanced Invoice Management\"\n      subtitle=\"Create and manage feature-based invoices with unit measurements and negotiated pricing\"\n    >\n      <div className=\"space-y-6\" data-testid=\"enhanced-invoices-page\">\n        <div className=\"flex items-center justify-between\">\n          <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-create-enhanced-invoice\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Enhanced Invoice\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Create Enhanced Invoice</DialogTitle>\n                <DialogDescription>\n                  Create an invoice with school-specific features, unit measurements, and negotiated pricing\n                </DialogDescription>\n              </DialogHeader>\n\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                  {/* School Selection */}\n                  <FormField\n                    control={form.control}\n                    name=\"schoolId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>School</FormLabel>\n                        <Select onValueChange={handleSchoolChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-school-enhanced\">\n                              <SelectValue placeholder=\"Select school\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {schools.map((school: SchoolType) => (\n                              <SelectItem key={school.id} value={school.id}>\n                                {school.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Available Features */}\n                  {selectedSchoolId && enabledFeatures.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Available Features for School</CardTitle>\n                        <CardDescription>\n                          Only enabled features for this school are shown\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-2 gap-4 max-h-40 overflow-y-auto\">\n                          {enabledFeatures.map((schoolFeature) => (\n                            <div key={schoolFeature.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium\">{schoolFeature.feature.name}</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {formatPrice(schoolFeature.feature.price / 100)} • {schoolFeature.feature.pricingType}\n                                </div>\n                                {schoolFeature.feature.requiresDateRange && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    <Calendar className=\"h-3 w-3 mr-1\" />\n                                    Requires Dates\n                                  </Badge>\n                                )}\n                              </div>\n                              <Button\n                                type=\"button\"\n                                size=\"sm\"\n                                onClick={() => addFeature(schoolFeature.feature)}\n                                data-testid={`button-add-feature-${schoolFeature.feature.id}`}\n                              >\n                                Add\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Selected Features */}\n                  {form.watch(\"features\").length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle>Invoice Features</CardTitle>\n                        <CardDescription>\n                          Configure quantities, unit measurements, and pricing for each feature\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-4\">\n                          {form.watch(\"features\").map((feature, index) => (\n                            <div key={index} className=\"p-4 border rounded-lg space-y-4\">\n                              <div className=\"flex items-center justify-between\">\n                                <h4 className=\"font-medium\">{getFeatureName(feature.featureId)}</h4>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => removeFeature(index)}\n                                  data-testid={`button-remove-feature-${index}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n\n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                                {/* Quantity */}\n                                <div>\n                                  <label className=\"text-sm font-medium\">Quantity</label>\n                                  <Input\n                                    type=\"number\"\n                                    min=\"1\"\n                                    value={feature.quantity}\n                                    onChange={(e) => updateFeature(index, \"quantity\", parseInt(e.target.value) || 1)}\n                                    data-testid={`input-quantity-${index}`}\n                                  />\n                                </div>\n\n                                {/* Unit Measurement */}\n                                <div>\n                                  <label className=\"text-sm font-medium\">Unit Measurement</label>\n                                  <Select\n                                    value={feature.unitMeasurement}\n                                    onValueChange={(value) => updateFeature(index, \"unitMeasurement\", value)}\n                                  >\n                                    <SelectTrigger data-testid={`select-unit-${index}`}>\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {UNIT_MEASUREMENT_OPTIONS.map((option) => (\n                                        <SelectItem key={option.value} value={option.value}>\n                                          {option.label}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n\n                                {/* Unit Price */}\n                                <div>\n                                  <label className=\"text-sm font-medium\">Unit Price (₦)</label>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    value={feature.unitPrice}\n                                    onChange={(e) => updateFeature(index, \"unitPrice\", parseFloat(e.target.value) || 0)}\n                                    data-testid={`input-unit-price-${index}`}\n                                  />\n                                </div>\n\n                                {/* Negotiated Price */}\n                                <div>\n                                  <label className=\"text-sm font-medium\">Negotiated Price (₦)</label>\n                                  <Input\n                                    type=\"number\"\n                                    step=\"0.01\"\n                                    value={feature.negotiatedPrice || \"\"}\n                                    onChange={(e) => updateFeature(index, \"negotiatedPrice\", parseFloat(e.target.value) || undefined)}\n                                    placeholder=\"Override price\"\n                                    data-testid={`input-negotiated-price-${index}`}\n                                  />\n                                </div>\n                              </div>\n\n                              {/* Date Range (if required) */}\n                              {enabledFeatures.find(f => f.feature.id === feature.featureId)?.feature.requiresDateRange && (\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                  <div>\n                                    <label className=\"text-sm font-medium\">Start Date</label>\n                                    <Input\n                                      type=\"date\"\n                                      value={feature.startDate || \"\"}\n                                      onChange={(e) => updateFeature(index, \"startDate\", e.target.value)}\n                                      data-testid={`input-start-date-${index}`}\n                                    />\n                                  </div>\n                                  <div>\n                                    <label className=\"text-sm font-medium\">End Date</label>\n                                    <Input\n                                      type=\"date\"\n                                      value={feature.endDate || \"\"}\n                                      onChange={(e) => updateFeature(index, \"endDate\", e.target.value)}\n                                      data-testid={`input-end-date-${index}`}\n                                    />\n                                  </div>\n                                </div>\n                              )}\n\n                              {/* Line Total */}\n                              <div className=\"flex justify-end\">\n                                <div className=\"text-sm\">\n                                  <span className=\"text-muted-foreground\">Line Total: </span>\n                                  <span className=\"font-medium\">\n                                    {formatPrice((feature.negotiatedPrice || feature.unitPrice) * feature.quantity)}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n\n                        {/* Total Amount */}\n                        <div className=\"flex justify-between items-center pt-4 border-t\">\n                          <span className=\"text-lg font-medium\">Calculated Total:</span>\n                          <span className=\"text-xl font-bold\">{formatPrice(calculatedTotal)}</span>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Final Amount Override */}\n                  <FormField\n                    control={form.control}\n                    name=\"finalAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Final Amount (Optional Override)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"Leave empty to use calculated total\"\n                            value={field.value || \"\"}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || undefined)}\n                            data-testid=\"input-final-amount\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Due Date */}\n                  <FormField\n                    control={form.control}\n                    name=\"dueDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Due Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"input-due-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Notes */}\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Additional notes for the invoice...\"\n                            {...field}\n                            data-testid=\"textarea-notes\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <DialogFooter>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setCreateDialogOpen(false)}\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createInvoiceMutation.isPending}\n                      data-testid=\"button-submit-enhanced-invoice\"\n                    >\n                      {createInvoiceMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n                    </Button>\n                  </DialogFooter>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Invoices Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Enhanced Invoices</CardTitle>\n            <CardDescription>\n              Feature-based invoices with detailed pricing and measurements\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-4\">Loading invoices...</div>\n            ) : invoices.length === 0 ? (\n              <div className=\"text-center py-4 text-muted-foreground\">\n                No invoices found. Create your first enhanced invoice!\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Invoice #</TableHead>\n                    <TableHead>School</TableHead>\n                    <TableHead>Features</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Due Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {invoices.map((invoice) => (\n                    <TableRow key={invoice.id}>\n                      <TableCell className=\"font-medium\">{invoice.invoiceNumber}</TableCell>\n                      <TableCell>{invoice.schoolName}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {invoice.features.length} feature{invoice.features.length !== 1 ? 's' : ''}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        {formatPrice(invoice.finalAmount || invoice.totalAmount)}\n                        {invoice.finalAmount && invoice.finalAmount !== invoice.totalAmount && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            (Base: {formatPrice(invoice.totalAmount)})\n                          </div>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <Badge\n                          variant={\n                            invoice.status === \"paid\" ? \"default\" :\n                            invoice.status === \"overdue\" ? \"destructive\" : \"secondary\"\n                          }\n                        >\n                          {invoice.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{new Date(invoice.dueDate).toLocaleDateString()}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setViewingInvoice(invoice.id)}\n                            data-testid={`button-view-invoice-${invoice.id}`}\n                          >\n                            <FileText className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setSendingInvoice({\n                                id: invoice.id,\n                                schoolName: invoice.schoolName,\n                                invoiceNumber: invoice.invoiceNumber,\n                                totalAmount: formatPrice(invoice.finalAmount || invoice.totalAmount),\n                              });\n                            }}\n                            data-testid={`button-send-email-${invoice.id}`}\n                          >\n                            <Send className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteInvoice(invoice)}\n                            disabled={deleteInvoiceMutation.isPending}\n                            data-testid={`button-delete-invoice-${invoice.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Send Invoice Dialog */}\n        {sendingInvoice && (\n          <InvoiceSendPage\n            invoiceId={sendingInvoice.id}\n            schoolName={sendingInvoice.schoolName}\n            invoiceNumber={sendingInvoice.invoiceNumber}\n            totalAmount={sendingInvoice.totalAmount}\n            onClose={() => setSendingInvoice(null)}\n          />\n        )}\n      </div>\n    </SuperAdminLayout>\n  );\n}","size_bytes":29672},"client/src/pages/superadmin/invoice-send.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\n\nconst sendInvoiceSchema = z.object({\n  communicationMethod: z.enum([\"email\", \"sms\", \"whatsapp\"]),\n  recipient: z.string().min(1, \"Recipient is required\"),\n  subject: z.string().optional(),\n  message: z.string().optional(),\n});\n\ntype SendInvoiceFormData = z.infer<typeof sendInvoiceSchema>;\n\ninterface InvoiceSendPageProps {\n  invoiceId: string;\n  schoolName: string;\n  invoiceNumber: string;\n  totalAmount: string;\n  onClose: () => void;\n}\n\nexport default function InvoiceSendPage({ \n  invoiceId, \n  schoolName, \n  invoiceNumber, \n  totalAmount, \n  onClose \n}: InvoiceSendPageProps) {\n  const { toast } = useToast();\n  const [previewOpen, setPreviewOpen] = useState(false);\n\n  const { data: invoice, isLoading: invoiceLoading } = useQuery({\n    queryKey: [\"/api/invoices\", invoiceId],\n    queryFn: () => api.get(`/api/invoices/${invoiceId}`),\n  });\n\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/superadmin/settings\"],\n    queryFn: () => api.get(\"/api/superadmin/settings\"),\n  });\n\n  const form = useForm<SendInvoiceFormData>({\n    resolver: zodResolver(sendInvoiceSchema),\n    defaultValues: {\n      communicationMethod: \"email\",\n      subject: `Invoice ${invoiceNumber} from Elite Scholar`,\n      message: `Dear ${schoolName},\\n\\nPlease find attached your invoice ${invoiceNumber} for the amount of ${totalAmount}.\\n\\nThank you for choosing Elite Scholar.`,\n    },\n  });\n\n  const sendInvoiceMutation = useMutation({\n    mutationFn: (data: SendInvoiceFormData) =>\n      api.post(`/api/invoices/${invoiceId}/send`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Invoice Sent\",\n        description: `Invoice ${invoiceNumber} has been sent successfully via ${form.getValues(\"communicationMethod\")}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Send Failed\",\n        description: error.response?.data?.message || \"Failed to send invoice. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SendInvoiceFormData) => {\n    sendInvoiceMutation.mutate(data);\n  };\n\n  const generateInvoicePreview = () => {\n    if (!invoice || !settings?.invoiceTemplate) return \"\";\n    \n    return settings.invoiceTemplate\n      .replace(/\\{\\{schoolName\\}\\}/g, schoolName)\n      .replace(/\\{\\{invoiceNumber\\}\\}/g, invoiceNumber)\n      .replace(/\\{\\{totalAmount\\}\\}/g, totalAmount)\n      .replace(/\\{\\{dueDate\\}\\}/g, invoice.dueDate ? new Date(invoice.dueDate).toLocaleDateString() : \"\")\n      .replace(/\\{\\{items\\}\\}/g, invoice.lines?.map((line: any) => \n        `<tr>\n          <td style=\"padding: 8px; border: 1px solid #e2e8f0;\">${line.description}</td>\n          <td style=\"padding: 8px; border: 1px solid #e2e8f0; text-align: right;\">${line.quantity}</td>\n          <td style=\"padding: 8px; border: 1px solid #e2e8f0; text-align: right;\">₦${(parseFloat(line.total) / 100).toLocaleString()}</td>\n        </tr>`\n      ).join(\"\") || \"\");\n  };\n\n  const watchedMethod = form.watch(\"communicationMethod\");\n\n  return (\n    <SuperAdminLayout title=\"Send Invoice\" subtitle={`Send ${invoiceNumber} to ${schoolName}`}>\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          \n          {/* Send Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Send Invoice</CardTitle>\n              <CardDescription>\n                Choose how to deliver the invoice to the school\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                \n                {/* Communication Method */}\n                <div>\n                  <Label htmlFor=\"communicationMethod\">Communication Method</Label>\n                  <Select\n                    value={form.watch(\"communicationMethod\")}\n                    onValueChange={(value) => form.setValue(\"communicationMethod\", value as any)}\n                  >\n                    <SelectTrigger data-testid=\"select-communication-method\">\n                      <SelectValue placeholder=\"Select method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"email\">\n                        <div className=\"flex items-center gap-2\">\n                          <i className=\"fas fa-envelope text-blue-500\"></i>\n                          Email\n                          <Badge variant={settings?.smtpHost ? \"secondary\" : \"destructive\"} className=\"ml-auto\">\n                            {settings?.smtpHost ? \"Ready\" : \"Not Set\"}\n                          </Badge>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"sms\">\n                        <div className=\"flex items-center gap-2\">\n                          <i className=\"fas fa-sms text-green-500\"></i>\n                          SMS\n                          <Badge variant={settings?.twilioAccountSid ? \"secondary\" : \"destructive\"} className=\"ml-auto\">\n                            {settings?.twilioAccountSid ? \"Ready\" : \"Not Set\"}\n                          </Badge>\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"whatsapp\">\n                        <div className=\"flex items-center gap-2\">\n                          <i className=\"fab fa-whatsapp text-green-600\"></i>\n                          WhatsApp\n                          <Badge variant={settings?.twilioWhatsappNumber ? \"secondary\" : \"destructive\"} className=\"ml-auto\">\n                            {settings?.twilioWhatsappNumber ? \"Ready\" : \"Not Set\"}\n                          </Badge>\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Recipient */}\n                <div>\n                  <Label htmlFor=\"recipient\">\n                    {watchedMethod === \"email\" ? \"Email Address\" : \"Phone Number\"}\n                  </Label>\n                  <Input\n                    id=\"recipient\"\n                    {...form.register(\"recipient\")}\n                    placeholder={\n                      watchedMethod === \"email\" \n                        ? \"school@example.com\" \n                        : watchedMethod === \"whatsapp\"\n                        ? \"+1234567890\"\n                        : \"+1234567890\"\n                    }\n                    data-testid=\"input-recipient\"\n                  />\n                  {form.formState.errors.recipient && (\n                    <p className=\"text-sm text-red-600 mt-1\">\n                      {form.formState.errors.recipient.message}\n                    </p>\n                  )}\n                </div>\n\n                {/* Subject (Email only) */}\n                {watchedMethod === \"email\" && (\n                  <div>\n                    <Label htmlFor=\"subject\">Subject</Label>\n                    <Input\n                      id=\"subject\"\n                      {...form.register(\"subject\")}\n                      data-testid=\"input-subject\"\n                    />\n                  </div>\n                )}\n\n                {/* Message */}\n                <div>\n                  <Label htmlFor=\"message\">\n                    {watchedMethod === \"email\" ? \"Email Message\" : \"Text Message\"}\n                  </Label>\n                  <Textarea\n                    id=\"message\"\n                    {...form.register(\"message\")}\n                    rows={6}\n                    placeholder={\n                      watchedMethod === \"email\"\n                        ? \"Email content with invoice attachment...\"\n                        : \"SMS/WhatsApp message with invoice link...\"\n                    }\n                    data-testid=\"textarea-message\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={onClose}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Dialog open={previewOpen} onOpenChange={setPreviewOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        data-testid=\"button-preview\"\n                      >\n                        Preview Invoice\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                      <DialogHeader>\n                        <DialogTitle>Invoice Preview</DialogTitle>\n                        <DialogDescription>\n                          Preview of {invoiceNumber} before sending\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div \n                        className=\"border rounded-lg p-6 bg-white\"\n                        dangerouslySetInnerHTML={{ __html: generateInvoicePreview() }}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                  <Button\n                    type=\"submit\"\n                    disabled={sendInvoiceMutation.isPending}\n                    data-testid=\"button-send-invoice\"\n                  >\n                    {sendInvoiceMutation.isPending ? \"Sending...\" : `Send via ${watchedMethod}`}\n                  </Button>\n                </div>\n              </form>\n            </CardContent>\n          </Card>\n\n          {/* Invoice Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Invoice Details</CardTitle>\n              <CardDescription>\n                Summary of the invoice to be sent\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">Invoice Number</Label>\n                  <p className=\"font-mono\">{invoiceNumber}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">School</Label>\n                  <p>{schoolName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">Total Amount</Label>\n                  <p className=\"font-semibold text-lg\">{totalAmount}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">Status</Label>\n                  <Badge variant=\"outline\">{invoice?.status || \"SENT\"}</Badge>\n                </div>\n              </div>\n\n              {invoice?.lines && invoice.lines.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">Items</Label>\n                  <div className=\"space-y-2 mt-2\">\n                    {invoice.lines.map((line: any, index: number) => (\n                      <div key={index} className=\"flex justify-between items-center p-2 bg-slate-50 rounded\">\n                        <span className=\"text-sm\">{line.description}</span>\n                        <span className=\"text-sm font-medium\">\n                          ₦{(parseFloat(line.total) / 100).toLocaleString()}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {invoice?.dueDate && (\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">Due Date</Label>\n                  <p>{new Date(invoice.dueDate).toLocaleDateString()}</p>\n                </div>\n              )}\n\n              {invoice?.notes && (\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-600\">Notes</Label>\n                  <p className=\"text-sm text-slate-700\">{invoice.notes}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n        </div>\n      </div>\n    </SuperAdminLayout>\n  );\n}","size_bytes":13373},"client/src/pages/superadmin/settings-enhanced.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\n\nconst appSettingsSchema = z.object({\n  // General Settings\n  appName: z.string().default(\"Elite Scholar\"),\n  appLogo: z.string().optional(),\n  domain: z.string().optional(),\n  \n  // Email Configuration\n  smtpHost: z.string().optional(),\n  smtpPort: z.string().default(\"587\"),\n  smtpUser: z.string().optional(),\n  smtpPassword: z.string().optional(),\n  smtpSecure: z.boolean().default(false),\n  emailFromAddress: z.string().optional(),\n  emailFromName: z.string().default(\"Elite Scholar\"),\n  emailTemplate: z.string().optional(),\n  \n  // Cloudinary Settings\n  cloudinaryCloudName: z.string().optional(),\n  cloudinaryApiKey: z.string().optional(),\n  cloudinaryApiSecret: z.string().optional(),\n  cloudinaryUploadPreset: z.string().optional(),\n  \n  // Communication Methods\n  twilioAccountSid: z.string().optional(),\n  twilioAuthToken: z.string().optional(),\n  twilioPhoneNumber: z.string().optional(),\n  twilioWhatsappNumber: z.string().optional(),\n  \n  // Invoice Settings\n  invoiceTemplate: z.string().optional(),\n  invoiceBackgroundImage: z.string().optional(),\n  invoiceLogo: z.string().optional(),\n});\n\ntype AppSettingsFormData = z.infer<typeof appSettingsSchema>;\n\nexport default function EnhancedSettingsPage() {\n  const { toast } = useToast();\n  const [selectedTemplate, setSelectedTemplate] = useState(\"default\");\n\n  const { data: settings, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/settings\"],\n  });\n\n  const form = useForm<AppSettingsFormData>({\n    resolver: zodResolver(appSettingsSchema),\n    defaultValues: {\n      appName: \"Elite Scholar\",\n      smtpPort: \"587\",\n      emailFromName: \"Elite Scholar\",\n      smtpSecure: false,\n      emailTemplate: defaultEmailTemplate,\n      invoiceTemplate: defaultInvoiceTemplate,\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: AppSettingsFormData) => {\n      const response = await fetch(\"/api/superadmin/settings\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Updated\",\n        description: \"Application settings have been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/settings\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const testEmailMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/superadmin/test-email\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Email Sent\",\n        description: \"Check your inbox to verify email configuration.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Email Test Failed\",\n        description: \"Please check your email configuration.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AppSettingsFormData) => {\n    updateSettingsMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <SuperAdminLayout title=\"Application Settings\" subtitle=\"Configure system settings and integrations\">\n        <div className=\"flex items-center justify-center p-8\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-slate-600\">Loading settings...</p>\n          </div>\n        </div>\n      </SuperAdminLayout>\n    );\n  }\n\n  return (\n    <SuperAdminLayout title=\"Enhanced Settings\" subtitle=\"Comprehensive application configuration\">\n      <div className=\"p-6 max-w-6xl mx-auto\">\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <Accordion type=\"multiple\" defaultValue={[\"general\", \"email\"]} className=\"space-y-4\">\n            \n            {/* General Settings */}\n            <AccordionItem value=\"general\">\n              <AccordionTrigger className=\"text-lg font-semibold\">\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-cog text-primary\"></i>\n                  General Settings\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Application Configuration</CardTitle>\n                    <CardDescription>\n                      Basic application settings and branding\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"appName\">Application Name</Label>\n                        <Input\n                          id=\"appName\"\n                          {...form.register(\"appName\")}\n                          data-testid=\"input-app-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"domain\">Domain</Label>\n                        <Input\n                          id=\"domain\"\n                          {...form.register(\"domain\")}\n                          placeholder=\"yourdomain.com\"\n                          data-testid=\"input-domain\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"appLogo\">Application Logo URL</Label>\n                      <Input\n                        id=\"appLogo\"\n                        {...form.register(\"appLogo\")}\n                        placeholder=\"https://example.com/logo.png\"\n                        data-testid=\"input-app-logo\"\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </AccordionContent>\n            </AccordionItem>\n\n            {/* Email Configuration */}\n            <AccordionItem value=\"email\">\n              <AccordionTrigger className=\"text-lg font-semibold\">\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-envelope text-primary\"></i>\n                  Email Configuration\n                  <Badge variant=\"secondary\" className=\"ml-auto\">\n                    {form.watch(\"smtpHost\") ? \"Configured\" : \"Not Set\"}\n                  </Badge>\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>SMTP Settings</CardTitle>\n                    <CardDescription>\n                      Configure email delivery for notifications and invoices\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n                        <Input\n                          id=\"smtpHost\"\n                          {...form.register(\"smtpHost\")}\n                          placeholder=\"smtp.gmail.com\"\n                          data-testid=\"input-smtp-host\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n                        <Input\n                          id=\"smtpPort\"\n                          {...form.register(\"smtpPort\")}\n                          placeholder=\"587\"\n                          data-testid=\"input-smtp-port\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"smtpUser\">SMTP Username</Label>\n                        <Input\n                          id=\"smtpUser\"\n                          {...form.register(\"smtpUser\")}\n                          placeholder=\"your-email@gmail.com\"\n                          data-testid=\"input-smtp-user\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"smtpPassword\">SMTP Password</Label>\n                        <Input\n                          type=\"password\"\n                          id=\"smtpPassword\"\n                          {...form.register(\"smtpPassword\")}\n                          placeholder=\"your-app-password\"\n                          data-testid=\"input-smtp-password\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"emailFromAddress\">From Email Address</Label>\n                        <Input\n                          id=\"emailFromAddress\"\n                          {...form.register(\"emailFromAddress\")}\n                          placeholder=\"noreply@yourdomain.com\"\n                          data-testid=\"input-email-from\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"emailFromName\">From Name</Label>\n                        <Input\n                          id=\"emailFromName\"\n                          {...form.register(\"emailFromName\")}\n                          placeholder=\"Elite Scholar\"\n                          data-testid=\"input-email-from-name\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"smtpSecure\"\n                        checked={form.watch(\"smtpSecure\")}\n                        onCheckedChange={(checked) => form.setValue(\"smtpSecure\", checked)}\n                        data-testid=\"switch-smtp-secure\"\n                      />\n                      <Label htmlFor=\"smtpSecure\">Use SSL/TLS</Label>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"emailTemplate\">Email Template</Label>\n                      <Textarea\n                        id=\"emailTemplate\"\n                        {...form.register(\"emailTemplate\")}\n                        rows={6}\n                        placeholder=\"HTML email template with placeholders\"\n                        data-testid=\"textarea-email-template\"\n                      />\n                      <p className=\"text-sm text-slate-600 mt-1\">\n                        Available placeholders: {\"{{schoolName}}, {{invoiceNumber}}, {{totalAmount}}, {{dueDate}}\"}\n                      </p>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => testEmailMutation.mutate()}\n                      disabled={testEmailMutation.isPending}\n                      data-testid=\"button-test-email\"\n                    >\n                      {testEmailMutation.isPending ? \"Sending...\" : \"Test Email Configuration\"}\n                    </Button>\n                  </CardContent>\n                </Card>\n              </AccordionContent>\n            </AccordionItem>\n\n            {/* Communication Methods */}\n            <AccordionItem value=\"communication\">\n              <AccordionTrigger className=\"text-lg font-semibold\">\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-comments text-primary\"></i>\n                  Communication Methods\n                  <Badge variant=\"secondary\" className=\"ml-auto\">\n                    {form.watch(\"twilioAccountSid\") ? \"Twilio Ready\" : \"Not Set\"}\n                  </Badge>\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Twilio Configuration</CardTitle>\n                    <CardDescription>\n                      Enable SMS and WhatsApp messaging for invoice delivery\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"twilioAccountSid\">Twilio Account SID</Label>\n                        <Input\n                          id=\"twilioAccountSid\"\n                          {...form.register(\"twilioAccountSid\")}\n                          placeholder=\"ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                          data-testid=\"input-twilio-sid\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"twilioAuthToken\">Twilio Auth Token</Label>\n                        <Input\n                          type=\"password\"\n                          id=\"twilioAuthToken\"\n                          {...form.register(\"twilioAuthToken\")}\n                          placeholder=\"your-auth-token\"\n                          data-testid=\"input-twilio-token\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"twilioPhoneNumber\">SMS Phone Number</Label>\n                        <Input\n                          id=\"twilioPhoneNumber\"\n                          {...form.register(\"twilioPhoneNumber\")}\n                          placeholder=\"+1234567890\"\n                          data-testid=\"input-twilio-phone\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"twilioWhatsappNumber\">WhatsApp Number</Label>\n                        <Input\n                          id=\"twilioWhatsappNumber\"\n                          {...form.register(\"twilioWhatsappNumber\")}\n                          placeholder=\"whatsapp:+1234567890\"\n                          data-testid=\"input-twilio-whatsapp\"\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </AccordionContent>\n            </AccordionItem>\n\n            {/* Cloudinary Settings */}\n            <AccordionItem value=\"cloudinary\">\n              <AccordionTrigger className=\"text-lg font-semibold\">\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-cloud-upload-alt text-primary\"></i>\n                  Cloudinary Configuration\n                  <Badge variant=\"secondary\" className=\"ml-auto\">\n                    {form.watch(\"cloudinaryCloudName\") ? \"Connected\" : \"Not Set\"}\n                  </Badge>\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Image Upload Settings</CardTitle>\n                    <CardDescription>\n                      Configure Cloudinary for image storage and optimization\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"cloudinaryCloudName\">Cloud Name</Label>\n                        <Input\n                          id=\"cloudinaryCloudName\"\n                          {...form.register(\"cloudinaryCloudName\")}\n                          placeholder=\"your-cloud-name\"\n                          data-testid=\"input-cloudinary-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"cloudinaryApiKey\">API Key</Label>\n                        <Input\n                          id=\"cloudinaryApiKey\"\n                          {...form.register(\"cloudinaryApiKey\")}\n                          placeholder=\"123456789012345\"\n                          data-testid=\"input-cloudinary-key\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"cloudinaryApiSecret\">API Secret</Label>\n                        <Input\n                          type=\"password\"\n                          id=\"cloudinaryApiSecret\"\n                          {...form.register(\"cloudinaryApiSecret\")}\n                          placeholder=\"your-api-secret\"\n                          data-testid=\"input-cloudinary-secret\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"cloudinaryUploadPreset\">Upload Preset</Label>\n                        <Input\n                          id=\"cloudinaryUploadPreset\"\n                          {...form.register(\"cloudinaryUploadPreset\")}\n                          placeholder=\"elite_scholar_uploads\"\n                          data-testid=\"input-cloudinary-preset\"\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </AccordionContent>\n            </AccordionItem>\n\n            {/* Invoice Settings */}\n            <AccordionItem value=\"invoice\">\n              <AccordionTrigger className=\"text-lg font-semibold\">\n                <div className=\"flex items-center gap-2\">\n                  <i className=\"fas fa-file-invoice text-primary\"></i>\n                  Invoice Template Settings\n                </div>\n              </AccordionTrigger>\n              <AccordionContent>\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Invoice Customization</CardTitle>\n                    <CardDescription>\n                      Design your invoice template with preview\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"invoiceBackgroundImage\">Background Image URL</Label>\n                        <Input\n                          id=\"invoiceBackgroundImage\"\n                          {...form.register(\"invoiceBackgroundImage\")}\n                          placeholder=\"https://example.com/bg.png\"\n                          data-testid=\"input-invoice-bg\"\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"invoiceLogo\">Invoice Logo URL</Label>\n                        <Input\n                          id=\"invoiceLogo\"\n                          {...form.register(\"invoiceLogo\")}\n                          placeholder=\"https://example.com/logo.png\"\n                          data-testid=\"input-invoice-logo\"\n                        />\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"invoiceTemplate\">Invoice Template HTML</Label>\n                      <Textarea\n                        id=\"invoiceTemplate\"\n                        {...form.register(\"invoiceTemplate\")}\n                        rows={8}\n                        placeholder=\"HTML invoice template\"\n                        data-testid=\"textarea-invoice-template\"\n                      />\n                      <p className=\"text-sm text-slate-600 mt-1\">\n                        Available placeholders: {\"{{schoolName}}, {{invoiceNumber}}, {{totalAmount}}, {{items}}, {{dueDate}}\"}\n                      </p>\n                    </div>\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Invoice Preview</h4>\n                        <div \n                          className=\"border rounded-lg p-4 bg-white shadow-sm min-h-[300px]\"\n                          dangerouslySetInnerHTML={{ \n                            __html: (() => {\n                              const template = form.watch(\"invoiceTemplate\") || \"\";\n                              return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match: string, key: string) => {\n                                const sampleData: Record<string, string> = {\n                                  \"schoolName\": \"Sample School\",\n                                  \"invoiceNumber\": \"INV-2025-001\",\n                                  \"totalAmount\": \"₦236,320.80\",\n                                  \"dueDate\": \"January 31, 2025\",\n                                  \"items\": \"<tr><td>Feature Management</td><td>1</td><td>₦50,000</td></tr>\"\n                                };\n                                return sampleData[key] || match;\n                              });\n                            })()\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </AccordionContent>\n            </AccordionItem>\n\n          </Accordion>\n\n          <div className=\"flex justify-end space-x-4 pt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => form.reset()}\n              data-testid=\"button-reset-settings\"\n            >\n              Reset Changes\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateSettingsMutation.isPending}\n              data-testid=\"button-save-settings\"\n            >\n              {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </SuperAdminLayout>\n  );\n}\n\nconst defaultEmailTemplate = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Invoice from {{schoolName}}</title>\n</head>\n<body style=\"font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;\">\n  <div style=\"max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 10px;\">\n    <h2 style=\"color: #333; margin-bottom: 20px;\">Invoice {{invoiceNumber}}</h2>\n    <p>Dear {{schoolName}},</p>\n    <p>Please find attached your invoice for the amount of <strong>{{totalAmount}}</strong>.</p>\n    <p>Due Date: <strong>{{dueDate}}</strong></p>\n    <p>Thank you for choosing Elite Scholar.</p>\n    <p>Best regards,<br>Elite Scholar Team</p>\n  </div>\n</body>\n</html>\n`;\n\nconst defaultInvoiceTemplate = `\n<div style=\"font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px;\">\n  <div style=\"text-align: center; margin-bottom: 30px;\">\n    <h1 style=\"color: #2563eb; margin-bottom: 10px;\">INVOICE</h1>\n    <h2 style=\"color: #64748b;\">{{invoiceNumber}}</h2>\n  </div>\n  \n  <div style=\"display: flex; justify-content: space-between; margin-bottom: 30px;\">\n    <div>\n      <h3>Bill To:</h3>\n      <p><strong>{{schoolName}}</strong></p>\n    </div>\n    <div style=\"text-align: right;\">\n      <p><strong>Due Date:</strong> {{dueDate}}</p>\n    </div>\n  </div>\n  \n  <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 30px;\">\n    <thead>\n      <tr style=\"background-color: #f8fafc;\">\n        <th style=\"padding: 12px; text-align: left; border: 1px solid #e2e8f0;\">Description</th>\n        <th style=\"padding: 12px; text-align: right; border: 1px solid #e2e8f0;\">Quantity</th>\n        <th style=\"padding: 12px; text-align: right; border: 1px solid #e2e8f0;\">Amount</th>\n      </tr>\n    </thead>\n    <tbody>\n      {{items}}\n    </tbody>\n  </table>\n  \n  <div style=\"text-align: right; margin-top: 20px;\">\n    <h3 style=\"font-size: 18px; color: #2563eb;\">Total: {{totalAmount}}</h3>\n  </div>\n</div>\n`;","size_bytes":24705},"client/src/components/superadmin/branch-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Plus, Edit2, Pause, Trash2, Play } from \"lucide-react\";\n\nconst branchFormSchema = z.object({\n  name: z.string().min(1, \"Branch name is required\"),\n});\n\ntype BranchFormData = z.infer<typeof branchFormSchema>;\n\ninterface Branch {\n  id: string;\n  name: string;\n  status: \"active\" | \"suspended\" | \"deleted\";\n  isMain: boolean;\n  schoolId: string;\n}\n\ninterface BranchManagementProps {\n  schoolId: string;\n  schoolName: string;\n  onClose: () => void;\n}\n\nexport default function BranchManagement({ schoolId, schoolName, onClose }: BranchManagementProps) {\n  const { toast } = useToast();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [editingBranch, setEditingBranch] = useState<Branch | null>(null);\n\n  const { data: branches = [], isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", schoolId, \"branches\"],\n    queryFn: () => api.superadmin.getSchoolBranches(schoolId),\n  });\n\n  const form = useForm<BranchFormData>({\n    resolver: zodResolver(branchFormSchema),\n    defaultValues: {\n      name: \"\",\n    },\n  });\n\n  const createBranchMutation = useMutation({\n    mutationFn: (data: { name: string }) => api.superadmin.createBranch(schoolId, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\", schoolId, \"branches\"] });\n      toast({\n        title: \"Branch created successfully\",\n        description: \"The new branch has been added to the school.\",\n      });\n      setIsFormOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error creating branch\",\n        description: error.message || \"Failed to create branch\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateBranchMutation = useMutation({\n    mutationFn: ({ branchId, data }: { branchId: string; data: { name: string } }) =>\n      api.superadmin.updateBranch(schoolId, branchId, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\", schoolId, \"branches\"] });\n      toast({\n        title: \"Branch updated successfully\",\n        description: \"The branch has been updated.\",\n      });\n      setIsFormOpen(false);\n      setEditingBranch(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error updating branch\",\n        description: error.message || \"Failed to update branch\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateBranchStatusMutation = useMutation({\n    mutationFn: ({ branchId, status }: { branchId: string; status: string }) =>\n      api.superadmin.updateBranchStatus(schoolId, branchId, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\", schoolId, \"branches\"] });\n      toast({\n        title: \"Branch status updated\",\n        description: \"The branch status has been changed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error updating branch status\",\n        description: error.message || \"Failed to update branch status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: BranchFormData) => {\n    if (editingBranch) {\n      updateBranchMutation.mutate({ branchId: editingBranch.id, data });\n    } else {\n      createBranchMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (branch: Branch) => {\n    setEditingBranch(branch);\n    form.setValue(\"name\", branch.name);\n    setIsFormOpen(true);\n  };\n\n  const handleSuspend = (branchId: string) => {\n    updateBranchStatusMutation.mutate({ branchId, status: \"suspended\" });\n  };\n\n  const handleActivate = (branchId: string) => {\n    updateBranchStatusMutation.mutate({ branchId, status: \"active\" });\n  };\n\n  const handleDelete = (branchId: string) => {\n    if (confirm(\"Are you sure you want to delete this branch? This action cannot be undone.\")) {\n      updateBranchStatusMutation.mutate({ branchId, status: \"deleted\" });\n    }\n  };\n\n  const getStatusBadge = (status: string, isMain: boolean) => {\n    if (isMain) {\n      return <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">Main</Badge>;\n    }\n    \n    switch (status) {\n      case \"active\":\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"suspended\":\n        return <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">Suspended</Badge>;\n      default:\n        return <Badge variant=\"outline\">Unknown</Badge>;\n    }\n  };\n\n  const isSubmitting = createBranchMutation.isPending || updateBranchMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\" data-testid=\"branch-management-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold text-slate-900\">\n            Manage Branches - {schoolName}\n          </DialogTitle>\n          <DialogDescription>\n            Add, edit, suspend, or delete branches for this school\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Add Branch Button */}\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium text-slate-900\">School Branches</h3>\n            <Button\n              onClick={() => {\n                setEditingBranch(null);\n                form.reset();\n                setIsFormOpen(true);\n              }}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-add-branch\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Add Branch</span>\n            </Button>\n          </div>\n\n          {/* Branches Table */}\n          <div className=\"border rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Branch Name</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={3} className=\"text-center py-8\">\n                      Loading branches...\n                    </TableCell>\n                  </TableRow>\n                ) : branches.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={3} className=\"text-center py-8 text-slate-500\">\n                      No branches found\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  branches\n                    .filter((branch: Branch) => branch.status !== \"deleted\")\n                    .map((branch: Branch) => (\n                      <TableRow key={branch.id}>\n                        <TableCell className=\"font-medium\">{branch.name}</TableCell>\n                        <TableCell>{getStatusBadge(branch.status, branch.isMain)}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex items-center justify-end space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(branch)}\n                              data-testid={`button-edit-branch-${branch.id}`}\n                            >\n                              <Edit2 className=\"w-4 h-4\" />\n                            </Button>\n                            {!branch.isMain && (\n                              <>\n                                {branch.status === \"active\" ? (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleSuspend(branch.id)}\n                                    className=\"text-yellow-600 hover:text-yellow-800\"\n                                    data-testid={`button-suspend-branch-${branch.id}`}\n                                  >\n                                    <Pause className=\"w-4 h-4\" />\n                                  </Button>\n                                ) : (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={() => handleActivate(branch.id)}\n                                    className=\"text-green-600 hover:text-green-800\"\n                                    data-testid={`button-activate-branch-${branch.id}`}\n                                  >\n                                    <Play className=\"w-4 h-4\" />\n                                  </Button>\n                                )}\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDelete(branch.id)}\n                                  className=\"text-red-600 hover:text-red-800\"\n                                  data-testid={`button-delete-branch-${branch.id}`}\n                                >\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n\n        {/* Branch Form Dialog */}\n        {isFormOpen && (\n          <Dialog open={isFormOpen} onOpenChange={(open) => !open && setIsFormOpen(false)}>\n            <DialogContent data-testid=\"branch-form-modal\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingBranch ? \"Edit Branch\" : \"Add New Branch\"}\n                </DialogTitle>\n                <DialogDescription>\n                  {editingBranch ? \"Update branch information\" : \"Create a new branch for this school\"}\n                </DialogDescription>\n              </DialogHeader>\n\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"branch-name\">Branch Name *</Label>\n                  <Input\n                    id=\"branch-name\"\n                    placeholder=\"North Campus\"\n                    {...form.register(\"name\")}\n                    data-testid=\"input-branch-name\"\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-sm text-red-600\">{form.formState.errors.name.message}</p>\n                  )}\n                </div>\n\n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsFormOpen(false)}\n                    data-testid=\"button-cancel-branch\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    data-testid=\"button-save-branch\"\n                  >\n                    {isSubmitting ? \"Saving...\" : editingBranch ? \"Update Branch\" : \"Add Branch\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12404},"server/services/twilio.ts":{"content":"import twilio from 'twilio';\n\ninterface WhatsAppMessage {\n  to: string;\n  message: string;\n  mediaUrl?: string;\n}\n\nexport class TwilioService {\n  private twilioClient: any | null = null;\n  private isConfigured: boolean = false;\n\n  constructor() {\n    this.initializeTwilio();\n  }\n\n  private initializeTwilio() {\n    const accountSid = process.env.TWILIO_ACCOUNT_SID;\n    const authToken = process.env.TWILIO_AUTH_TOKEN;\n    \n    if (accountSid && authToken) {\n      this.twilioClient = twilio(accountSid, authToken);\n      this.isConfigured = true;\n    } else {\n      console.log('Twilio credentials not configured');\n      this.isConfigured = false;\n    }\n  }\n\n  public isAvailable(): boolean {\n    return this.isConfigured && this.twilioClient !== null;\n  }\n\n  public async sendWhatsAppMessage(options: WhatsAppMessage): Promise<boolean> {\n    if (!this.isAvailable()) {\n      console.error('Twilio service not available');\n      return false;\n    }\n\n    try {\n      const fromNumber = process.env.TWILIO_PHONE_NUMBER;\n      if (!fromNumber) {\n        console.error('Twilio phone number not configured');\n        return false;\n      }\n\n      const messageOptions: any = {\n        body: options.message,\n        from: `whatsapp:${fromNumber}`,\n        to: `whatsapp:${options.to}`,\n      };\n\n      if (options.mediaUrl) {\n        messageOptions.mediaUrl = [options.mediaUrl];\n      }\n\n      const message = await this.twilioClient!.messages.create(messageOptions);\n      console.log(`WhatsApp message sent successfully: ${message.sid}`);\n      return true;\n    } catch (error) {\n      console.error('WhatsApp send error:', error);\n      return false;\n    }\n  }\n\n  public async sendSMS(to: string, message: string): Promise<boolean> {\n    if (!this.isAvailable()) {\n      console.error('Twilio service not available');\n      return false;\n    }\n\n    try {\n      const fromNumber = process.env.TWILIO_PHONE_NUMBER;\n      if (!fromNumber) {\n        console.error('Twilio phone number not configured');\n        return false;\n      }\n\n      const smsMessage = await this.twilioClient!.messages.create({\n        body: message,\n        from: fromNumber,\n        to: to,\n      });\n\n      console.log(`SMS sent successfully: ${smsMessage.sid}`);\n      return true;\n    } catch (error) {\n      console.error('SMS send error:', error);\n      return false;\n    }\n  }\n}\n\nexport const twilioService = new TwilioService();","size_bytes":2408},"server/controllers/enhanced-invoice.ts":{"content":"import { Router, Response } from \"express\";\nimport { z } from \"zod\";\nimport { AuthRequest, authMiddleware, superAdminOnly } from \"../middleware/auth\";\nimport { storage } from \"../storage\";\nimport { emailService } from \"../services/email\";\nimport { sendGridService } from \"../services/sendgrid\";\nimport { twilioService } from \"../services/twilio\";\n\nconst router = Router();\n\n// Apply auth middleware to all routes\nrouter.use(authMiddleware);\nrouter.use(superAdminOnly);\n\n// Enhanced invoice creation schema\nconst createEnhancedInvoiceSchema = z.object({\n  schoolId: z.string().min(1, \"School ID is required\"),\n  features: z.array(z.object({\n    featureId: z.string(),\n    unitPrice: z.number(),\n    quantity: z.number(),\n    unitMeasurement: z.string(),\n    startDate: z.string().optional(),\n    endDate: z.string().optional(),\n    negotiatedPrice: z.number().optional(),\n  })).min(1, \"At least one feature must be selected\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  notes: z.string().optional(),\n});\n\n// Send invoice schema\nconst sendInvoiceSchema = z.object({\n  communicationMethod: z.enum([\"email\", \"whatsapp\", \"both\"]),\n  subject: z.string().optional(),\n  message: z.string().min(1, \"Message is required\"),\n  recipients: z.object({\n    email: z.string().email().optional(),\n    phone: z.string().optional(),\n  }),\n});\n\n// Create enhanced invoice\nrouter.post(\"/\", async (req: AuthRequest, res: Response) => {\n  try {\n    const validatedData = createEnhancedInvoiceSchema.parse(req.body);\n    \n    // Get school\n    const school = await storage.getSchool(validatedData.schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    // Create enhanced invoice\n    const invoice = await storage.createEnhancedInvoice(validatedData);\n    \n    res.status(201).json(invoice);\n  } catch (error) {\n    console.error(\"Create enhanced invoice error:\", error);\n    res.status(500).json({ message: \"Failed to create enhanced invoice\" });\n  }\n});\n\n// Get enhanced invoice by ID with detailed view\nrouter.get(\"/:id\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const invoice = await storage.getInvoice(id);\n    \n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n\n    // Get school details\n    const school = await storage.getSchool(invoice.schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    // Return enhanced invoice view with school details\n    const enhancedInvoice = {\n      ...invoice,\n      school: {\n        id: school.id,\n        name: school.name,\n        email: school.email,\n        phones: school.phones,\n        address: school.address,\n        state: school.state,\n        lga: school.lga,\n      }\n    };\n    \n    res.json(enhancedInvoice);\n  } catch (error) {\n    console.error(\"Get enhanced invoice error:\", error);\n    res.status(500).json({ message: \"Failed to fetch invoice\" });\n  }\n});\n\n// Send enhanced invoice via email and/or WhatsApp\nrouter.post(\"/:id/send\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { id } = req.params;\n    const validatedData = sendInvoiceSchema.parse(req.body);\n    \n    const invoice = await storage.getInvoice(id);\n    if (!invoice) {\n      return res.status(404).json({ message: \"Invoice not found\" });\n    }\n\n    const school = await storage.getSchool(invoice.schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    const results = {\n      email: false,\n      whatsapp: false,\n      errors: [] as string[]\n    };\n\n    // Prepare invoice details for messages\n    const invoiceDetails = {\n      invoiceNumber: invoice.invoiceNumber,\n      amount: (parseFloat(invoice.totalAmount) / 100).toFixed(2), // Convert from kobo to naira\n      dueDate: new Date(invoice.dueDate).toLocaleDateString(),\n      schoolName: school.name\n    };\n\n    // Send via email if requested and email is available\n    if ((validatedData.communicationMethod === \"email\" || validatedData.communicationMethod === \"both\")) {\n      const emailToSend = validatedData.recipients.email || school.email;\n      \n      if (emailToSend) {\n        try {\n          // Try SendGrid first, fall back to email service\n          let success = false;\n          if (sendGridService.isAvailable()) {\n            success = await sendGridService.sendInvoiceEmail(\n              emailToSend,\n              school.name,\n              invoice.invoiceNumber,\n              invoiceDetails.amount,\n              invoiceDetails.dueDate\n            );\n          } else {\n            success = await emailService.sendInvoiceEmail(\n              emailToSend,\n              school.name,\n              invoice.invoiceNumber,\n              invoiceDetails.amount,\n              invoiceDetails.dueDate\n            );\n          }\n          \n          if (success) {\n            results.email = true;\n            // Update email sent status\n            await storage.updateInvoice(id, { \n              emailSent: true, \n              emailSentAt: new Date() \n            });\n          } else {\n            results.errors.push(\"Failed to send email\");\n          }\n        } catch (emailError) {\n          console.error(\"Email sending error:\", emailError);\n          results.errors.push(`Email error: ${emailError}`);\n        }\n      } else {\n        results.errors.push(\"No email address available\");\n      }\n    }\n\n    // Send via WhatsApp if requested and phone is available\n    if ((validatedData.communicationMethod === \"whatsapp\" || validatedData.communicationMethod === \"both\")) {\n      const phoneToSend = validatedData.recipients.phone || (school.phones && school.phones[0]);\n      \n      if (phoneToSend && twilioService.isAvailable()) {\n        try {\n          const whatsappMessage = `${validatedData.message}\\n\\nInvoice: ${invoice.invoiceNumber}\\nAmount: ₦${invoiceDetails.amount}\\nDue Date: ${invoiceDetails.dueDate}\\n\\nThank you for choosing Elite Scholar.`;\n          \n          const success = await twilioService.sendWhatsAppMessage({\n            to: phoneToSend,\n            message: whatsappMessage\n          });\n          \n          if (success) {\n            results.whatsapp = true;\n          } else {\n            results.errors.push(\"Failed to send WhatsApp message\");\n          }\n        } catch (whatsappError) {\n          console.error(\"WhatsApp sending error:\", whatsappError);\n          results.errors.push(`WhatsApp error: ${whatsappError}`);\n        }\n      } else if (!phoneToSend) {\n        results.errors.push(\"No phone number available\");\n      } else if (!twilioService.isAvailable()) {\n        results.errors.push(\"WhatsApp service not configured\");\n      }\n    }\n\n    // Return results\n    const successCount = (results.email ? 1 : 0) + (results.whatsapp ? 1 : 0);\n    const message = successCount > 0 \n      ? `Invoice sent successfully via ${results.email && results.whatsapp ? 'email and WhatsApp' : results.email ? 'email' : 'WhatsApp'}`\n      : \"Failed to send invoice\";\n\n    res.json({\n      message,\n      success: successCount > 0,\n      results,\n      invoice: {\n        id: invoice.id,\n        invoiceNumber: invoice.invoiceNumber,\n        school: school.name\n      }\n    });\n  } catch (error) {\n    console.error(\"Send enhanced invoice error:\", error);\n    res.status(500).json({ message: \"Failed to send invoice\" });\n  }\n});\n\n// Get communication settings for a school\nrouter.get(\"/school/:schoolId/communication-settings\", async (req: AuthRequest, res: Response) => {\n  try {\n    const { schoolId } = req.params;\n    \n    const school = await storage.getSchool(schoolId);\n    if (!school) {\n      return res.status(404).json({ message: \"School not found\" });\n    }\n\n    res.json({\n      email: {\n        available: !!school.email,\n        address: school.email\n      },\n      whatsapp: {\n        available: twilioService.isAvailable() && school.phones && school.phones.length > 0,\n        phones: school.phones || []\n      },\n      sms: {\n        available: twilioService.isAvailable() && school.phones && school.phones.length > 0,\n        phones: school.phones || []\n      }\n    });\n  } catch (error) {\n    console.error(\"Get communication settings error:\", error);\n    res.status(500).json({ message: \"Failed to get communication settings\" });\n  }\n});\n\nexport default router;","size_bytes":8380},"client/src/pages/superadmin/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useForm } from \"react-hook-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Loader2,\n  CheckCircle,\n  XCircle,\n  AlertTriangle,\n  Upload,\n  Trash2,\n  TestTube,\n} from \"lucide-react\";\nimport SuperAdminDashboard from \"./dashboard\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\n\ninterface ServiceStatus {\n  name: string;\n  status: \"connected\" | \"disconnected\" | \"error\" | \"testing\";\n  lastChecked?: string;\n  error?: string;\n  configured: boolean;\n}\n\ninterface AppConfig {\n  id?: string;\n  appName?: string;\n  appLogo?: string;\n  domain?: string;\n\n  // SendGrid\n  sendgridApiKey?: string;\n  sendgridFromEmail?: string;\n  sendgridFromName?: string;\n  sendgridStatus?: string;\n  sendgridLastChecked?: string;\n  sendgridErrorMessage?: string;\n\n  // SMTP\n  smtpHost?: string;\n  smtpPort?: string;\n  smtpUser?: string;\n  smtpPassword?: string;\n  smtpSecure?: boolean;\n  smtpStatus?: string;\n  smtpLastChecked?: string;\n  smtpErrorMessage?: string;\n\n  // Cloudinary\n  cloudinaryCloudName?: string;\n  cloudinaryApiKey?: string;\n  cloudinaryApiSecret?: string;\n  cloudinaryUploadPreset?: string;\n  cloudinaryStatus?: string;\n  cloudinaryLastChecked?: string;\n  cloudinaryErrorMessage?: string;\n\n  // Twilio\n  twilioAccountSid?: string;\n  twilioAuthToken?: string;\n  twilioPhoneNumber?: string;\n  twilioWhatsappNumber?: string;\n  twilioSmsStatus?: string;\n  twilioWhatsappStatus?: string;\n  twilioLastChecked?: string;\n  twilioErrorMessage?: string;\n\n  // System\n  maintenanceMode?: boolean;\n  allowRegistration?: boolean;\n  maxFileUploadSize?: number;\n\n  // Invoice\n  invoiceTemplate?: string;\n  invoiceBackgroundImage?: string;\n  invoiceLogo?: string;\n\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport default function ProfilePage() {\n  const [activeTab, setActiveTab] = useState(\"basic\");\n  const [uploadingAsset, setUploadingAsset] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch app config\n  const { data: config, isLoading } = useQuery<AppConfig>({\n    queryKey: [\"/api/superadmin/config\"],\n  });\n\n  // Fetch service status\n  const { data: statusData, refetch: refetchStatus } = useQuery<{\n    services: ServiceStatus[];\n  }>({\n    queryKey: [\"/api/superadmin/config/status\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const form = useForm<AppConfig>({\n    defaultValues: config || {},\n  });\n\n  // Update form when config loads\n  useEffect(() => {\n    if (config) {\n      form.reset(config);\n    }\n  }, [config, form]);\n\n  // Update config mutation\n  const updateConfigMutation = useMutation({\n    mutationFn: async (data: Partial<AppConfig>) =>\n      apiRequest(`/api/superadmin/config`, {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      toast({ title: \"Profile updated successfully\", variant: \"default\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/config\"] });\n      refetchStatus();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update failed\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test connection mutation\n  const testConnectionMutation = useMutation({\n    mutationFn: async ({ service, config }: { service: string; config: any }) =>\n      apiRequest(`/api/superadmin/config/test-connection`, {\n        method: \"POST\",\n        body: JSON.stringify({ service, config }),\n      }),\n    onSuccess: (result: any) => {\n      toast({\n        title: `${result.service} test ${result.status === \"connected\" ? \"successful\" : \"failed\"}`,\n        description: result.message,\n        variant: result.status === \"connected\" ? \"default\" : \"destructive\",\n      });\n      refetchStatus();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection test failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Test all connections mutation\n  const testAllMutation = useMutation({\n    mutationFn: async () =>\n      apiRequest(`/api/superadmin/config/test-all`, { method: \"POST\" }),\n    onSuccess: (results: any[]) => {\n      const successCount = results.filter(\n        (r) => r.status === \"connected\",\n      ).length;\n      toast({\n        title: `Connection tests completed`,\n        description: `${successCount}/${results.length} services connected successfully`,\n        variant: successCount === results.length ? \"default\" : \"destructive\",\n      });\n      refetchStatus();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Connection tests failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Asset upload handler\n  const handleAssetUpload = async (\n    file: File,\n    type: \"logo\" | \"watermark\" | \"background\",\n  ) => {\n    setUploadingAsset(true);\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"type\", type);\n\n      const response = await fetch(\"/api/superadmin/config/upload-asset\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Upload failed\");\n      }\n\n      const result = await response.json();\n      toast({\n        title: \"Asset uploaded successfully\",\n        description: `${type} uploaded to Cloudinary`,\n        variant: \"default\",\n      });\n\n      // Update form with new asset URL\n      if (type === \"logo\") {\n        form.setValue(\"invoiceLogo\", result.url);\n      } else if (type === \"background\") {\n        form.setValue(\"invoiceBackgroundImage\", result.url);\n      }\n\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/config\"] });\n    } catch (error: any) {\n      toast({\n        title: \"Upload failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingAsset(false);\n    }\n  };\n\n  const onSubmit = (data: AppConfig) => {\n    updateConfigMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status?: string, configured?: boolean) => {\n    if (!configured) {\n      return <Badge variant=\"secondary\">Not Configured</Badge>;\n    }\n\n    switch (status) {\n      case \"connected\":\n        return (\n          <Badge variant=\"default\" className=\"bg-green-500\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Connected\n          </Badge>\n        );\n      case \"error\":\n        return (\n          <Badge variant=\"destructive\">\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Error\n          </Badge>\n        );\n      case \"testing\":\n        return (\n          <Badge variant=\"secondary\">\n            <Loader2 className=\"w-3 h-3 mr-1 animate-spin\" />\n            Testing\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\">\n            <AlertTriangle className=\"w-3 h-3 mr-1\" />\n            Disconnected\n          </Badge>\n        );\n    }\n  };\n\n  const testService = (service: string) => {\n    const formData = form.getValues();\n    testConnectionMutation.mutate({ service, config: formData });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Loader2 className=\"h-8 w-8 animate-spin\" />\n        <span className=\"ml-2\">Loading profile...</span>\n      </div>\n    );\n  }\n\n  return (\n    <SuperAdminLayout\n      title=\"Profile and Config Key Management\"\n      subtitle=\" Manage system features and their Setup configuration\"\n    >\n      <div\n        className=\"container mx-auto p-6 max-w-4xl\"\n        data-testid=\"profile-page\"\n      >\n        <div className=\"mb-6\">\n          <h1 className=\"text-2xl font-bold mb-2\" data-testid=\"page-title\">\n            Profile & Configuration\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Manage your application settings and service integrations\n          </p>\n        </div>\n\n        {/* Service Status Overview */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle data-testid=\"service-status-title\">\n                  Service Status\n                </CardTitle>\n                <CardDescription>\n                  Overview of all external service connections\n                </CardDescription>\n              </div>\n              <Button\n                onClick={() => testAllMutation.mutate()}\n                disabled={testAllMutation.isPending}\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"test-all-button\"\n              >\n                {testAllMutation.isPending ? (\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                ) : (\n                  <TestTube className=\"w-4 h-4 mr-2\" />\n                )}\n                Test All\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {statusData?.services.map((service, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  data-testid={`service-status-${service.name.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  <div>\n                    <p className=\"font-medium\">{service.name}</p>\n                    {service.lastChecked && (\n                      <p className=\"text-xs text-muted-foreground\">\n                        Last checked:{\" \"}\n                        {new Date(service.lastChecked).toLocaleString()}\n                      </p>\n                    )}\n                  </div>\n                  {getStatusBadge(service.status, service.configured)}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-5\">\n              <TabsTrigger value=\"basic\" data-testid=\"tab-basic\">\n                Basic\n              </TabsTrigger>\n              <TabsTrigger value=\"email\" data-testid=\"tab-email\">\n                Email\n              </TabsTrigger>\n              <TabsTrigger value=\"storage\" data-testid=\"tab-storage\">\n                Storage\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"communication\"\n                data-testid=\"tab-communication\"\n              >\n                Communication\n              </TabsTrigger>\n              <TabsTrigger value=\"invoice\" data-testid=\"tab-invoice\">\n                Invoice\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Basic Settings */}\n            <TabsContent value=\"basic\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Application Settings</CardTitle>\n                  <CardDescription>\n                    Basic application configuration\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"appName\">Application Name</Label>\n                    <Input\n                      id=\"appName\"\n                      {...form.register(\"appName\")}\n                      placeholder=\"Elite Scholar\"\n                      data-testid=\"input-app-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"domain\">Domain</Label>\n                    <Input\n                      id=\"domain\"\n                      {...form.register(\"domain\")}\n                      placeholder=\"https://your-domain.com\"\n                      data-testid=\"input-domain\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"appLogo\">Application Logo URL</Label>\n                    <Input\n                      id=\"appLogo\"\n                      {...form.register(\"appLogo\")}\n                      placeholder=\"https://your-logo-url.com/logo.png\"\n                      data-testid=\"input-app-logo\"\n                    />\n                  </div>\n                  <Separator />\n                  <div className=\"space-y-4\">\n                    <h4 className=\"font-medium\">System Settings</h4>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"maintenanceMode\"\n                        {...form.register(\"maintenanceMode\")}\n                        data-testid=\"switch-maintenance-mode\"\n                      />\n                      <Label htmlFor=\"maintenanceMode\">Maintenance Mode</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"allowRegistration\"\n                        {...form.register(\"allowRegistration\")}\n                        data-testid=\"switch-allow-registration\"\n                      />\n                      <Label htmlFor=\"allowRegistration\">\n                        Allow New Registrations\n                      </Label>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"maxFileUploadSize\">\n                        Max File Upload Size (bytes)\n                      </Label>\n                      <Input\n                        id=\"maxFileUploadSize\"\n                        type=\"number\"\n                        {...form.register(\"maxFileUploadSize\", {\n                          valueAsNumber: true,\n                        })}\n                        placeholder=\"10485760\"\n                        data-testid=\"input-max-file-size\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Email Settings */}\n            <TabsContent value=\"email\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle>SendGrid Configuration</CardTitle>\n                      <CardDescription>\n                        Primary email service via SendGrid API\n                      </CardDescription>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => testService(\"sendgrid\")}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid=\"test-sendgrid-button\"\n                    >\n                      {testConnectionMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      ) : (\n                        <TestTube className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Test Connection\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"sendgridApiKey\">SendGrid API Key</Label>\n                    <Input\n                      id=\"sendgridApiKey\"\n                      type=\"password\"\n                      {...form.register(\"sendgridApiKey\")}\n                      placeholder=\"Enter SendGrid API key\"\n                      data-testid=\"input-sendgrid-api-key\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"sendgridFromEmail\">\n                      From Email Address\n                    </Label>\n                    <Input\n                      id=\"sendgridFromEmail\"\n                      type=\"email\"\n                      {...form.register(\"sendgridFromEmail\")}\n                      placeholder=\"noreply@your-domain.com\"\n                      data-testid=\"input-sendgrid-from-email\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"sendgridFromName\">From Name</Label>\n                    <Input\n                      id=\"sendgridFromName\"\n                      {...form.register(\"sendgridFromName\")}\n                      placeholder=\"Elite Scholar\"\n                      data-testid=\"input-sendgrid-from-name\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle>SMTP Fallback</CardTitle>\n                      <CardDescription>\n                        Backup email service via SMTP\n                      </CardDescription>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => testService(\"smtp\")}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid=\"test-smtp-button\"\n                    >\n                      {testConnectionMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      ) : (\n                        <TestTube className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Test Connection\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"smtpHost\">SMTP Host</Label>\n                    <Input\n                      id=\"smtpHost\"\n                      {...form.register(\"smtpHost\")}\n                      placeholder=\"smtp.gmail.com\"\n                      data-testid=\"input-smtp-host\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"smtpPort\">SMTP Port</Label>\n                    <Input\n                      id=\"smtpPort\"\n                      {...form.register(\"smtpPort\")}\n                      placeholder=\"587\"\n                      data-testid=\"input-smtp-port\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"smtpUser\">SMTP Username</Label>\n                    <Input\n                      id=\"smtpUser\"\n                      {...form.register(\"smtpUser\")}\n                      placeholder=\"your-email@gmail.com\"\n                      data-testid=\"input-smtp-user\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"smtpPassword\">SMTP Password</Label>\n                    <Input\n                      id=\"smtpPassword\"\n                      type=\"password\"\n                      {...form.register(\"smtpPassword\")}\n                      placeholder=\"Enter SMTP password\"\n                      data-testid=\"input-smtp-password\"\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      id=\"smtpSecure\"\n                      {...form.register(\"smtpSecure\")}\n                      data-testid=\"switch-smtp-secure\"\n                    />\n                    <Label htmlFor=\"smtpSecure\">Use SSL/TLS</Label>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Storage Settings */}\n            <TabsContent value=\"storage\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle>Cloudinary Configuration</CardTitle>\n                      <CardDescription>\n                        Image storage and transformation service\n                      </CardDescription>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => testService(\"cloudinary\")}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid=\"test-cloudinary-button\"\n                    >\n                      {testConnectionMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      ) : (\n                        <TestTube className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Test Connection\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"cloudinaryCloudName\">Cloud Name</Label>\n                    <Input\n                      id=\"cloudinaryCloudName\"\n                      {...form.register(\"cloudinaryCloudName\")}\n                      placeholder=\"your-cloud-name\"\n                      data-testid=\"input-cloudinary-cloud-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cloudinaryApiKey\">API Key</Label>\n                    <Input\n                      id=\"cloudinaryApiKey\"\n                      {...form.register(\"cloudinaryApiKey\")}\n                      placeholder=\"123456789012345\"\n                      data-testid=\"input-cloudinary-api-key\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cloudinaryApiSecret\">API Secret</Label>\n                    <Input\n                      id=\"cloudinaryApiSecret\"\n                      type=\"password\"\n                      {...form.register(\"cloudinaryApiSecret\")}\n                      placeholder=\"Enter API secret\"\n                      data-testid=\"input-cloudinary-api-secret\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cloudinaryUploadPreset\">\n                      Upload Preset (Optional)\n                    </Label>\n                    <Input\n                      id=\"cloudinaryUploadPreset\"\n                      {...form.register(\"cloudinaryUploadPreset\")}\n                      placeholder=\"elite_scholar_preset\"\n                      data-testid=\"input-cloudinary-upload-preset\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Communication Settings */}\n            <TabsContent value=\"communication\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle>Twilio Configuration</CardTitle>\n                      <CardDescription>\n                        SMS and WhatsApp messaging service\n                      </CardDescription>\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => testService(\"twilio\")}\n                      disabled={testConnectionMutation.isPending}\n                      data-testid=\"test-twilio-button\"\n                    >\n                      {testConnectionMutation.isPending ? (\n                        <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      ) : (\n                        <TestTube className=\"w-4 h-4 mr-2\" />\n                      )}\n                      Test Connection\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"twilioAccountSid\">Account SID</Label>\n                    <Input\n                      id=\"twilioAccountSid\"\n                      {...form.register(\"twilioAccountSid\")}\n                      placeholder=\"AC...\"\n                      data-testid=\"input-twilio-account-sid\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"twilioAuthToken\">Auth Token</Label>\n                    <Input\n                      id=\"twilioAuthToken\"\n                      type=\"password\"\n                      {...form.register(\"twilioAuthToken\")}\n                      placeholder=\"Enter auth token\"\n                      data-testid=\"input-twilio-auth-token\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"twilioPhoneNumber\">Phone Number</Label>\n                    <Input\n                      id=\"twilioPhoneNumber\"\n                      {...form.register(\"twilioPhoneNumber\")}\n                      placeholder=\"+1234567890\"\n                      data-testid=\"input-twilio-phone-number\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"twilioWhatsappNumber\">\n                      WhatsApp Number\n                    </Label>\n                    <Input\n                      id=\"twilioWhatsappNumber\"\n                      {...form.register(\"twilioWhatsappNumber\")}\n                      placeholder=\"whatsapp:+1234567890\"\n                      data-testid=\"input-twilio-whatsapp-number\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Invoice Settings */}\n            <TabsContent value=\"invoice\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Invoice Customization</CardTitle>\n                  <CardDescription>\n                    Upload and configure invoice assets\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label>Invoice Logo</Label>\n                    <div className=\"flex items-center space-x-4\">\n                      <Input\n                        {...form.register(\"invoiceLogo\")}\n                        placeholder=\"Logo URL\"\n                        data-testid=\"input-invoice-logo\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          const input = document.createElement(\"input\");\n                          input.type = \"file\";\n                          input.accept = \"image/*\";\n                          input.onchange = (e) => {\n                            const file = (e.target as HTMLInputElement)\n                              .files?.[0];\n                            if (file) handleAssetUpload(file, \"logo\");\n                          };\n                          input.click();\n                        }}\n                        disabled={uploadingAsset}\n                        data-testid=\"upload-logo-button\"\n                      >\n                        {uploadingAsset ? (\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        ) : (\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Upload Logo\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label>Background Image</Label>\n                    <div className=\"flex items-center space-x-4\">\n                      <Input\n                        {...form.register(\"invoiceBackgroundImage\")}\n                        placeholder=\"Background image URL\"\n                        data-testid=\"input-invoice-background\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          const input = document.createElement(\"input\");\n                          input.type = \"file\";\n                          input.accept = \"image/*\";\n                          input.onchange = (e) => {\n                            const file = (e.target as HTMLInputElement)\n                              .files?.[0];\n                            if (file) handleAssetUpload(file, \"background\");\n                          };\n                          input.click();\n                        }}\n                        disabled={uploadingAsset}\n                        data-testid=\"upload-background-button\"\n                      >\n                        {uploadingAsset ? (\n                          <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                        ) : (\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                        )}\n                        Upload Background\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"invoiceTemplate\">\n                      Custom Invoice Template\n                    </Label>\n                    <Textarea\n                      id=\"invoiceTemplate\"\n                      {...form.register(\"invoiceTemplate\")}\n                      placeholder=\"Enter custom HTML template for invoices...\"\n                      rows={6}\n                      data-testid=\"textarea-invoice-template\"\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"flex justify-end space-x-4 mt-6\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => form.reset()}\n              data-testid=\"reset-button\"\n            >\n              Reset Changes\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateConfigMutation.isPending}\n              data-testid=\"save-button\"\n            >\n              {updateConfigMutation.isPending ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : null}\n              Save Configuration\n            </Button>\n          </div>\n        </form>\n      </div>\n    </SuperAdminLayout>\n  );\n}\n","size_bytes":31273},"server/services/connection-test.ts":{"content":"import { v2 as cloudinary } from 'cloudinary';\nimport { storage } from '../storage';\nimport * as nodemailer from 'nodemailer';\nimport type { ConnectionTestResult } from '@shared/schema';\n\nexport class ConnectionTestService {\n  async testSendGrid(apiKey: string): Promise<ConnectionTestResult> {\n    const now = new Date();\n    \n    if (!apiKey) {\n      return {\n        service: 'sendgrid',\n        status: 'error',\n        message: 'SendGrid API key is required',\n        lastChecked: now\n      };\n    }\n\n    try {\n      const response = await fetch('https://api.sendgrid.com/v3/user/account', {\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        await storage.updateServiceStatus('sendgrid', 'connected');\n        return {\n          service: 'sendgrid',\n          status: 'connected',\n          message: 'SendGrid connection successful',\n          lastChecked: now\n        };\n      } else {\n        const errorText = await response.text();\n        await storage.updateServiceStatus('sendgrid', 'error', `HTTP ${response.status}: ${errorText}`);\n        return {\n          service: 'sendgrid',\n          status: 'error',\n          message: `SendGrid API error: ${response.status}`,\n          lastChecked: now\n        };\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      await storage.updateServiceStatus('sendgrid', 'error', message);\n      return {\n        service: 'sendgrid',\n        status: 'error',\n        message: `Connection failed: ${message}`,\n        lastChecked: now\n      };\n    }\n  }\n\n  async testTwilio(accountSid: string, authToken: string, phoneNumber?: string): Promise<ConnectionTestResult> {\n    const now = new Date();\n    \n    if (!accountSid || !authToken) {\n      return {\n        service: 'twilio',\n        status: 'error',\n        message: 'Twilio Account SID and Auth Token are required',\n        lastChecked: now\n      };\n    }\n\n    try {\n      const auth = Buffer.from(`${accountSid}:${authToken}`).toString('base64');\n      const response = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}.json`, {\n        headers: {\n          'Authorization': `Basic ${auth}`,\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n\n      if (response.ok) {\n        const accountData = await response.json();\n        await storage.updateServiceStatus('twilio_sms', 'connected');\n        \n        if (phoneNumber?.includes('whatsapp:')) {\n          await storage.updateServiceStatus('twilio_whatsapp', 'connected');\n        }\n        \n        return {\n          service: 'twilio',\n          status: 'connected',\n          message: `Connected to account: ${(accountData as any).friendly_name}`,\n          lastChecked: now\n        };\n      } else {\n        const errorText = await response.text();\n        await storage.updateServiceStatus('twilio_sms', 'error', `HTTP ${response.status}: ${errorText}`);\n        return {\n          service: 'twilio',\n          status: 'error',\n          message: `Twilio API error: ${response.status}`,\n          lastChecked: now\n        };\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      await storage.updateServiceStatus('twilio_sms', 'error', message);\n      return {\n        service: 'twilio',\n        status: 'error',\n        message: `Connection failed: ${message}`,\n        lastChecked: now\n      };\n    }\n  }\n\n  async testCloudinary(cloudName: string, apiKey: string, apiSecret: string): Promise<ConnectionTestResult> {\n    const now = new Date();\n    \n    if (!cloudName || !apiKey || !apiSecret) {\n      return {\n        service: 'cloudinary',\n        status: 'error',\n        message: 'Cloudinary cloud name, API key, and API secret are required',\n        lastChecked: now\n      };\n    }\n\n    try {\n      // Configure Cloudinary\n      cloudinary.config({\n        cloud_name: cloudName,\n        api_key: apiKey,\n        api_secret: apiSecret,\n      });\n\n      // Test connection by getting account details\n      const result = await cloudinary.api.ping();\n      \n      if (result.status === 'ok') {\n        await storage.updateServiceStatus('cloudinary', 'connected');\n        return {\n          service: 'cloudinary',\n          status: 'connected',\n          message: 'Cloudinary connection successful',\n          lastChecked: now\n        };\n      } else {\n        await storage.updateServiceStatus('cloudinary', 'error', 'Ping failed');\n        return {\n          service: 'cloudinary',\n          status: 'error',\n          message: 'Cloudinary ping failed',\n          lastChecked: now\n        };\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      await storage.updateServiceStatus('cloudinary', 'error', message);\n      return {\n        service: 'cloudinary',\n        status: 'error',\n        message: `Connection failed: ${message}`,\n        lastChecked: now\n      };\n    }\n  }\n\n  async testSMTP(host: string, port: string, user: string, password: string, secure: boolean = false): Promise<ConnectionTestResult> {\n    const now = new Date();\n    \n    if (!host || !user || !password) {\n      return {\n        service: 'smtp',\n        status: 'error',\n        message: 'SMTP host, user, and password are required',\n        lastChecked: now\n      };\n    }\n\n    try {\n      const transporter = nodemailer.createTransporter({\n        host,\n        port: parseInt(port) || 587,\n        secure,\n        auth: {\n          user,\n          pass: password\n        }\n      });\n\n      // Verify connection\n      await transporter.verify();\n      \n      await storage.updateServiceStatus('smtp', 'connected');\n      return {\n        service: 'smtp',\n        status: 'connected',\n        message: 'SMTP connection successful',\n        lastChecked: now\n      };\n    } catch (error) {\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      await storage.updateServiceStatus('smtp', 'error', message);\n      return {\n        service: 'smtp',\n        status: 'error',\n        message: `SMTP connection failed: ${message}`,\n        lastChecked: now\n      };\n    }\n  }\n\n  async testAllServices(config: any): Promise<ConnectionTestResult[]> {\n    const results: ConnectionTestResult[] = [];\n\n    // Test SendGrid\n    if (config.sendgridApiKey) {\n      results.push(await this.testSendGrid(config.sendgridApiKey));\n    }\n\n    // Test Twilio\n    if (config.twilioAccountSid && config.twilioAuthToken) {\n      results.push(await this.testTwilio(\n        config.twilioAccountSid, \n        config.twilioAuthToken, \n        config.twilioPhoneNumber\n      ));\n    }\n\n    // Test Cloudinary\n    if (config.cloudinaryCloudName && config.cloudinaryApiKey && config.cloudinaryApiSecret) {\n      results.push(await this.testCloudinary(\n        config.cloudinaryCloudName,\n        config.cloudinaryApiKey,\n        config.cloudinaryApiSecret\n      ));\n    }\n\n    // Test SMTP\n    if (config.smtpHost && config.smtpUser && config.smtpPassword) {\n      results.push(await this.testSMTP(\n        config.smtpHost,\n        config.smtpPort || '587',\n        config.smtpUser,\n        config.smtpPassword,\n        config.smtpSecure || false\n      ));\n    }\n\n    return results;\n  }\n}\n\nexport const connectionTestService = new ConnectionTestService();","size_bytes":7460},"client/src/pages/superadmin/database.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\nimport { Database, Play, RefreshCw, Download, Users, School, FileText, Settings } from \"lucide-react\";\n\ninterface TableInfo {\n  table_name: string;\n  row_count: number;\n}\n\ninterface QueryResult {\n  columns: string[];\n  rows: any[][];\n  rowCount: number;\n  executionTime: number;\n}\n\nexport default function DatabasePage() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTable, setSelectedTable] = useState<string>(\"\");\n  const [customQuery, setCustomQuery] = useState<string>(\"\");\n  const [queryResult, setQueryResult] = useState<QueryResult | null>(null);\n\n  // Fetch database tables and their row counts\n  const { data: tables = [], isLoading: tablesLoading, refetch: refetchTables } = useQuery<TableInfo[]>({\n    queryKey: [\"/api/database/tables\"],\n  });\n\n  // Fetch table data\n  const { data: tableData, isLoading: tableDataLoading, refetch: refetchTableData } = useQuery({\n    queryKey: [\"/api/database/table-data\", selectedTable],\n    enabled: !!selectedTable,\n  });\n\n  // Execute custom query mutation\n  const executeQueryMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const response = await apiRequest(\"POST\", \"/api/database/execute\", { query });\n      return response.json();\n    },\n    onSuccess: (result: QueryResult) => {\n      setQueryResult(result);\n      toast({\n        title: \"Query Executed\",\n        description: `Query completed in ${result.executionTime}ms. Found ${result.rowCount} rows.`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Query Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Export data mutation\n  const exportDataMutation = useMutation({\n    mutationFn: async (tableName: string) => {\n      const response = await apiRequest(\"GET\", `/api/database/export/${tableName}`);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `${tableName}_export.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Export Complete\",\n        description: \"Table data has been exported successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Export Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleExecuteQuery = () => {\n    if (!customQuery.trim()) {\n      toast({\n        title: \"No Query\",\n        description: \"Please enter a SQL query to execute.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    executeQueryMutation.mutate(customQuery);\n  };\n\n  const getTableIcon = (tableName: string) => {\n    if (tableName.includes('user')) return <Users className=\"h-4 w-4\" />;\n    if (tableName.includes('school')) return <School className=\"h-4 w-4\" />;\n    if (tableName.includes('invoice')) return <FileText className=\"h-4 w-4\" />;\n    if (tableName.includes('feature')) return <Settings className=\"h-4 w-4\" />;\n    return <Database className=\"h-4 w-4\" />;\n  };\n\n  const quickQueries = [\n    { name: \"All Users\", query: \"SELECT id, name, email, role, school_id, created_at FROM users ORDER BY created_at DESC LIMIT 50;\" },\n    { name: \"All Schools\", query: \"SELECT id, school_name, short_name, admin_email, curriculum_type, subscription_status FROM schools ORDER BY created_at DESC;\" },\n    { name: \"Recent Invoices\", query: \"SELECT id, school_id, invoice_number, total_amount, status, due_date, created_at FROM invoices ORDER BY created_at DESC LIMIT 20;\" },\n    { name: \"Active Features\", query: \"SELECT id, name, description, price, pricing_type, is_active FROM features WHERE is_active = true;\" },\n    { name: \"School Features\", query: \"SELECT sf.school_id, s.school_name, f.name as feature_name, sf.enabled FROM school_features sf JOIN schools s ON sf.school_id = s.id JOIN features f ON sf.feature_id = f.id;\" },\n    { name: \"Grade Sections\", query: \"SELECT gs.id, gs.school_id, s.school_name, gs.grade_name, gs.section_id FROM grade_sections gs JOIN schools s ON gs.school_id = s.id ORDER BY s.school_name, gs.grade_name;\" }\n  ];\n\n  return (\n    <SuperAdminLayout \n      title=\"Database Management\" \n      subtitle=\"View and manage your database tables and data\"\n    >\n      <div className=\"space-y-6\">\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <Database className=\"h-8 w-8 text-primary mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{tables.length}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Tables</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <Users className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{tables.find(t => t.table_name === 'users')?.row_count || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Users</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <School className=\"h-8 w-8 text-green-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{tables.find(t => t.table_name === 'schools')?.row_count || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Schools</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <FileText className=\"h-8 w-8 text-orange-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{tables.find(t => t.table_name === 'invoices')?.row_count || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Invoices</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"tables\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"tables\" data-testid=\"tab-tables\">Tables</TabsTrigger>\n            <TabsTrigger value=\"query\" data-testid=\"tab-query\">SQL Query</TabsTrigger>\n            <TabsTrigger value=\"quick-queries\" data-testid=\"tab-quick-queries\">Quick Queries</TabsTrigger>\n          </TabsList>\n\n          {/* Tables Tab */}\n          <TabsContent value=\"tables\" className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-semibold\">Database Tables</h3>\n              <Button onClick={() => refetchTables()} variant=\"outline\" size=\"sm\" data-testid=\"button-refresh-tables\">\n                <RefreshCw className=\"h-4 w-4 mr-2\" />\n                Refresh\n              </Button>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Tables List */}\n              <Card className=\"lg:col-span-1\">\n                <CardHeader>\n                  <CardTitle>Tables ({tables.length})</CardTitle>\n                  <CardDescription>Click on a table to view its data</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-[400px]\">\n                    <div className=\"space-y-2\">\n                      {tablesLoading ? (\n                        <div className=\"flex items-center justify-center py-8\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                        </div>\n                      ) : (\n                        tables.map((table) => (\n                          <div\n                            key={table.table_name}\n                            className={`flex items-center justify-between p-3 rounded-lg border cursor-pointer transition-colors ${\n                              selectedTable === table.table_name\n                                ? \"bg-primary/10 border-primary\"\n                                : \"hover:bg-slate-50\"\n                            }`}\n                            onClick={() => setSelectedTable(table.table_name)}\n                            data-testid={`table-item-${table.table_name}`}\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              {getTableIcon(table.table_name)}\n                              <div>\n                                <p className=\"font-medium text-sm\">{table.table_name}</p>\n                                <p className=\"text-xs text-muted-foreground\">{table.row_count} rows</p>\n                              </div>\n                            </div>\n                            <Badge variant=\"secondary\">{table.row_count}</Badge>\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Table Data */}\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <CardTitle>\n                        {selectedTable ? `${selectedTable} Data` : \"Select a Table\"}\n                      </CardTitle>\n                      <CardDescription>\n                        {selectedTable ? `Viewing data from ${selectedTable} table` : \"Choose a table from the left to view its data\"}\n                      </CardDescription>\n                    </div>\n                    {selectedTable && (\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => refetchTableData()} \n                          variant=\"outline\" \n                          size=\"sm\"\n                          data-testid=\"button-refresh-table-data\"\n                        >\n                          <RefreshCw className=\"h-4 w-4 mr-2\" />\n                          Refresh\n                        </Button>\n                        <Button\n                          onClick={() => exportDataMutation.mutate(selectedTable)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          disabled={exportDataMutation.isPending}\n                          data-testid=\"button-export-table\"\n                        >\n                          <Download className=\"h-4 w-4 mr-2\" />\n                          Export CSV\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {selectedTable ? (\n                    tableDataLoading ? (\n                      <div className=\"flex items-center justify-center py-12\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                      </div>\n                    ) : tableData?.rows?.length > 0 ? (\n                      <ScrollArea className=\"h-[400px]\">\n                        <Table>\n                          <TableHeader>\n                            <TableRow>\n                              {tableData.columns.map((column: string) => (\n                                <TableHead key={column} className=\"font-semibold\">\n                                  {column}\n                                </TableHead>\n                              ))}\n                            </TableRow>\n                          </TableHeader>\n                          <TableBody>\n                            {tableData.rows.map((row: any[], index: number) => (\n                              <TableRow key={index}>\n                                {row.map((cell: any, cellIndex: number) => (\n                                  <TableCell key={cellIndex} className=\"max-w-[200px] truncate\">\n                                    {cell === null ? (\n                                      <span className=\"text-slate-400\">null</span>\n                                    ) : typeof cell === 'boolean' ? (\n                                      <Badge variant={cell ? \"default\" : \"secondary\"}>\n                                        {cell.toString()}\n                                      </Badge>\n                                    ) : (\n                                      String(cell)\n                                    )}\n                                  </TableCell>\n                                ))}\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                      </ScrollArea>\n                    ) : (\n                      <div className=\"text-center py-12\">\n                        <Database className=\"h-12 w-12 text-slate-300 mx-auto mb-4\" />\n                        <p className=\"text-slate-500\">No data found in this table</p>\n                      </div>\n                    )\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Database className=\"h-12 w-12 text-slate-300 mx-auto mb-4\" />\n                      <p className=\"text-slate-500\">Select a table to view its data</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* SQL Query Tab */}\n          <TabsContent value=\"query\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Execute Custom SQL Query</CardTitle>\n                <CardDescription>Run custom SQL queries against your database</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"custom-query\">SQL Query</Label>\n                  <Textarea\n                    id=\"custom-query\"\n                    placeholder=\"SELECT * FROM users LIMIT 10;\"\n                    value={customQuery}\n                    onChange={(e) => setCustomQuery(e.target.value)}\n                    className=\"min-h-[100px] font-mono\"\n                    data-testid=\"textarea-custom-query\"\n                  />\n                </div>\n                <Button \n                  onClick={handleExecuteQuery}\n                  disabled={executeQueryMutation.isPending || !customQuery.trim()}\n                  data-testid=\"button-execute-query\"\n                >\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  {executeQueryMutation.isPending ? \"Executing...\" : \"Execute Query\"}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Query Results */}\n            {queryResult && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Query Results</CardTitle>\n                  <CardDescription>\n                    Found {queryResult.rowCount} rows in {queryResult.executionTime}ms\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {queryResult.rows.length > 0 ? (\n                    <ScrollArea className=\"h-[400px]\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            {queryResult.columns.map((column) => (\n                              <TableHead key={column} className=\"font-semibold\">\n                                {column}\n                              </TableHead>\n                            ))}\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {queryResult.rows.map((row, index) => (\n                            <TableRow key={index}>\n                              {row.map((cell, cellIndex) => (\n                                <TableCell key={cellIndex} className=\"max-w-[200px] truncate\">\n                                  {cell === null ? (\n                                    <span className=\"text-slate-400\">null</span>\n                                  ) : typeof cell === 'boolean' ? (\n                                    <Badge variant={cell ? \"default\" : \"secondary\"}>\n                                      {cell.toString()}\n                                    </Badge>\n                                  ) : (\n                                    String(cell)\n                                  )}\n                                </TableCell>\n                              ))}\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </ScrollArea>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-slate-500\">No results returned</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Quick Queries Tab */}\n          <TabsContent value=\"quick-queries\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Queries</CardTitle>\n                <CardDescription>Pre-built queries for common tasks</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {quickQueries.map((quickQuery) => (\n                    <Card key={quickQuery.name} className=\"cursor-pointer hover:bg-slate-50 transition-colors\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <h4 className=\"font-medium\">{quickQuery.name}</h4>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setCustomQuery(quickQuery.query);\n                              executeQueryMutation.mutate(quickQuery.query);\n                            }}\n                            data-testid={`button-quick-query-${quickQuery.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                          >\n                            <Play className=\"h-3 w-3 mr-1\" />\n                            Run\n                          </Button>\n                        </div>\n                        <code className=\"text-xs text-slate-600 block bg-slate-100 p-2 rounded\">\n                          {quickQuery.query}\n                        </code>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SuperAdminLayout>\n  );\n}","size_bytes":20012},"database_summary.md":{"content":"# Elite Scholar Database Export Summary\n\nExport Date: Mon Aug 12 11:54:25 AM UTC 2025\nDatabase Size: 87KB\nDatabase Type: PostgreSQL 16.9\n\n## Database Tables and Record Counts:\n\n| Table Name | Record Count | Description |\n|------------|--------------|-------------|\n| **users** | 4 | User accounts (Super Admin, School Admin, Teacher, Student, Parent) |\n| **schools** | 7 | Educational institutions in the system |\n| **branches** | 11 | School branches/campuses |\n| **features** | 9 | Available system features (attendance, fee_management, etc.) |\n| **school_features** | 32 | Feature enablement per school |\n| **grade_sections** | 261 | Grade levels with sections (A, B, C) for each school |\n| **sections** | 18 | Section definitions (A, B, C sections) |\n| **invoices** | 2 | Generated invoices |\n| **invoice_lines** | 4 | Invoice line items |\n| **invoice_templates** | 4 | Invoice template designs |\n| **invoice_assets** | 0 | Invoice-related assets (logos, images) |\n| **subscriptions** | 0 | School subscription records |\n| **app_config** | 0 | New application configuration (migrated from app_settings) |\n| **app_settings** | 2 | Legacy application settings |\n\n## Key System Features:\n\n### Authentication & Users\n- Multi-role system: Super Admin, School Admin, Branch Admin, Teacher, Student, Parent\n- JWT-based authentication with role-based access control\n- 4 demo accounts configured for testing\n\n### School Management\n- 7 schools with various curriculum types (K12, Nigerian)\n- 11 branches across different schools\n- Automatic grade section creation based on school type\n- 261 grade sections with proper section organization (A, B, C)\n\n### Feature System\n- 9 modular features available: attendance, fee_management, student_portal, etc.\n- 32 school-feature associations for granular control\n- Feature toggles per school for customized experiences\n\n### Invoice System\n- Enhanced invoice generation with templates\n- Multi-unit pricing support (per_student, per_staff, etc.)\n- Email integration for invoice delivery\n- Cloudinary integration for asset management\n\n### Configuration Management\n- New app_config table structure (replacing legacy app_settings)\n- Service connection monitoring (SendGrid, Twilio, Cloudinary, SMTP)\n- Real-time status testing for external services\n\n## Database Export Files:\n\n1. **database_export.sql** (87KB) - Complete PostgreSQL dump with all tables, data, and structure\n2. **database_summary.md** (This file) - Human-readable summary and documentation\n\n## Import Instructions:\n\nTo restore this database on another PostgreSQL instance:\n\n```bash\n# For complete restoration:\npsql [CONNECTION_STRING] < database_export.sql\n\n# Or using pg_restore if needed:\npg_restore -d [DATABASE_NAME] database_export.sql\n```\n\n## Recent System Enhancements:\n\n- **Fixed critical school creation bug** where features were mapped incorrectly\n- **Migrated to new app_config system** with connection status monitoring  \n- **Enhanced invoice system** with comprehensive template support\n- **Improved error handling** to prevent interface crashes with null relations\n- **Added comprehensive Profile page** replacing legacy Settings with modern UI\n\n## Database Health:\n\n- ✅ All tables present and properly structured\n- ✅ No orphaned records after cleanup\n- ✅ Proper foreign key relationships maintained  \n- ✅ Feature associations correctly mapped to database IDs\n- ✅ Grade sections properly organized with section references\n\nThis export represents a fully functional School Management System with comprehensive features for multi-school administration, invoice management, and role-based access control.","size_bytes":3622},"server/controllers/invoice-assets.ts":{"content":"import { Router } from \"express\";\nimport multer from \"multer\";\nimport { storage } from \"../storage\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  },\n});\n\n// Get all invoice assets\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const schoolId = req.query.schoolId as string | undefined;\n    const assets = await storage.getInvoiceAssets(schoolId);\n    res.json({ assets });\n  } catch (error) {\n    console.error(\"Get assets error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get single asset\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const asset = await storage.getInvoiceAsset(req.params.id);\n    if (!asset) {\n      return res.status(404).json({ message: \"Asset not found\" });\n    }\n    res.json(asset);\n  } catch (error) {\n    console.error(\"Get asset error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Upload new asset\nrouter.post(\"/upload\", upload.single('file'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({ message: \"No file provided\" });\n    }\n\n    const { type } = req.body;\n    const schoolId = req.body.schoolId || null;\n\n    // In a real application, you would upload to cloud storage (like Cloudinary, AWS S3, etc.)\n    // For now, we'll create a data URL from the file buffer\n    const base64Data = req.file.buffer.toString('base64');\n    const dataUrl = `data:${req.file.mimetype};base64,${base64Data}`;\n\n    const assetData = {\n      name: req.file.originalname,\n      type: type || 'logo',\n      url: dataUrl,\n      size: req.file.size,\n      mimeType: req.file.mimetype,\n      schoolId,\n    };\n\n    const asset = await storage.createInvoiceAsset(assetData);\n    res.json(asset);\n  } catch (error) {\n    console.error(\"Upload asset error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Create asset with URL\nconst createAssetSchema = z.object({\n  name: z.string().min(1),\n  type: z.string(),\n  url: z.string().url(),\n  size: z.number().optional(),\n  mimeType: z.string().optional(),\n  schoolId: z.string().optional(),\n});\n\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const validatedData = createAssetSchema.parse(req.body);\n    const asset = await storage.createInvoiceAsset(validatedData);\n    res.json(asset);\n  } catch (error) {\n    console.error(\"Create asset error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Validation error\", \n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update asset\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const validatedData = createAssetSchema.partial().parse(req.body);\n    const asset = await storage.updateInvoiceAsset(req.params.id, validatedData);\n    res.json(asset);\n  } catch (error) {\n    console.error(\"Update asset error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Validation error\", \n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Delete asset\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    await storage.deleteInvoiceAsset(req.params.id);\n    res.json({ message: \"Asset deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete asset error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nexport default router;","size_bytes":3810},"server/controllers/invoice-templates.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { z } from \"zod\";\n\nconst router = Router();\n\n// Get all invoice templates\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const schoolId = req.query.schoolId as string | undefined;\n    const templates = await storage.getInvoiceTemplates(schoolId);\n    res.json({ templates });\n  } catch (error) {\n    console.error(\"Get templates error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Get single template\nrouter.get(\"/:id\", async (req, res) => {\n  try {\n    const template = await storage.getInvoiceTemplate(req.params.id);\n    if (!template) {\n      return res.status(404).json({ message: \"Template not found\" });\n    }\n    res.json(template);\n  } catch (error) {\n    console.error(\"Get template error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Create new template\nconst createTemplateSchema = z.object({\n  name: z.string().min(1),\n  templateType: z.string().default(\"modern\"),\n  primaryColor: z.string().default(\"#2563eb\"),\n  accentColor: z.string().default(\"#64748b\"),\n  logoUrl: z.string().optional(),\n  watermarkUrl: z.string().optional(),\n  backgroundImageUrl: z.string().optional(),\n  customization: z.object({\n    showWatermark: z.boolean(),\n    showBackgroundImage: z.boolean(),\n    headerStyle: z.string(),\n    footerText: z.string(),\n  }).optional(),\n  schoolId: z.string().optional(),\n});\n\nrouter.post(\"/\", async (req, res) => {\n  try {\n    const validatedData = createTemplateSchema.parse(req.body);\n    const template = await storage.createInvoiceTemplate(validatedData);\n    res.json(template);\n  } catch (error) {\n    console.error(\"Create template error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Validation error\", \n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update template\nrouter.put(\"/:id\", async (req, res) => {\n  try {\n    const validatedData = createTemplateSchema.partial().parse(req.body);\n    const template = await storage.updateInvoiceTemplate(req.params.id, validatedData);\n    res.json(template);\n  } catch (error) {\n    console.error(\"Update template error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ \n        message: \"Validation error\", \n        errors: error.errors \n      });\n    }\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Delete template\nrouter.delete(\"/:id\", async (req, res) => {\n  try {\n    await storage.deleteInvoiceTemplate(req.params.id);\n    res.json({ message: \"Template deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete template error:\", error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nexport default router;","size_bytes":2891},"server/services/sendgrid.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\ninterface EmailParams {\n  to: string;\n  from: string;\n  subject: string;\n  text?: string;\n  html?: string;\n}\n\nexport class SendGridService {\n  private mailService: MailService;\n  private isConfigured: boolean = false;\n\n  constructor() {\n    this.mailService = new MailService();\n    this.initializeSendGrid();\n  }\n\n  private initializeSendGrid() {\n    const apiKey = process.env.SENDGRID_API_KEY;\n    \n    if (apiKey) {\n      this.mailService.setApiKey(apiKey);\n      this.isConfigured = true;\n    } else {\n      console.log('SendGrid API key not configured');\n      this.isConfigured = false;\n    }\n  }\n\n  public isAvailable(): boolean {\n    return this.isConfigured;\n  }\n\n  public async sendEmail(params: EmailParams): Promise<boolean> {\n    if (!this.isAvailable()) {\n      console.error('SendGrid service not available');\n      return false;\n    }\n\n    try {\n      await this.mailService.send({\n        to: params.to,\n        from: params.from,\n        subject: params.subject,\n        text: params.text,\n        html: params.html,\n      });\n      console.log(`Email sent successfully to ${params.to}`);\n      return true;\n    } catch (error) {\n      console.error('SendGrid email error:', error);\n      return false;\n    }\n  }\n\n  public async sendInvoiceEmail(\n    to: string,\n    schoolName: string,\n    invoiceNumber: string,\n    amount: string,\n    dueDate: string,\n    pdfBuffer?: Buffer\n  ): Promise<boolean> {\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n          .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: #2563eb; color: white; padding: 20px; text-align: center; }\n          .content { padding: 20px; background: #f8fafc; }\n          .invoice-info { background: white; padding: 15px; border-radius: 8px; margin: 20px 0; }\n          .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }\n          .amount { font-size: 24px; font-weight: bold; color: #2563eb; }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>Elite Scholar Invoice</h1>\n          </div>\n          <div class=\"content\">\n            <h2>New Invoice - ${invoiceNumber}</h2>\n            <p>Dear ${schoolName} Administrator,</p>\n            <p>We have generated a new invoice for your school's subscription services.</p>\n            \n            <div class=\"invoice-info\">\n              <h3>Invoice Details:</h3>\n              <p><strong>Invoice Number:</strong> ${invoiceNumber}</p>\n              <p><strong>Amount:</strong> <span class=\"amount\">₦${amount}</span></p>\n              <p><strong>Due Date:</strong> ${dueDate}</p>\n            </div>\n\n            <p>Please ensure payment is made before the due date to avoid any interruption in services.</p>\n            <p>If you have any questions regarding this invoice, please contact our billing department.</p>\n            <p>Thank you for choosing Elite Scholar.</p>\n            <p>Best regards,<br>The Elite Scholar Billing Team</p>\n          </div>\n          <div class=\"footer\">\n            <p>Powered by Elite Edu Tech</p>\n            <p>This is an automated message. Please do not reply to this email.</p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const fromEmail = process.env.SMTP_USER || \"admin@elitescholar.com\";\n    const emailData: any = {\n      to: to,\n      from: fromEmail,\n      subject: `Elite Scholar Invoice ${invoiceNumber} - ${schoolName}`,\n      html,\n    };\n\n    if (pdfBuffer) {\n      emailData.attachments = [{\n        filename: `${invoiceNumber}.pdf`,\n        content: pdfBuffer.toString('base64'),\n        type: \"application/pdf\",\n        disposition: \"attachment\",\n      }];\n    }\n\n    return this.sendEmail(emailData);\n  }\n}\n\nexport const sendGridService = new SendGridService();","size_bytes":3985},"client/src/pages/superadmin/enhanced-invoice-view.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, MessageSquare, Phone, Send, Eye, Download } from \"lucide-react\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\n\ninterface InvoiceViewPageProps {\n  invoiceId: string;\n  onClose: () => void;\n}\n\ninterface EnhancedInvoice {\n  id: string;\n  invoiceNumber: string;\n  totalAmount: string;\n  status: string;\n  dueDate: string;\n  notes?: string;\n  emailSent?: boolean;\n  emailSentAt?: string;\n  lines: Array<{\n    id: string;\n    description: string;\n    quantity: number;\n    unitPrice: string;\n    unitMeasurement: string;\n    negotiatedPrice?: string;\n    total: string;\n    startDate?: string;\n    endDate?: string;\n  }>;\n  school: {\n    id: string;\n    name: string;\n    email: string;\n    phones: string[];\n    address: string;\n    state: string;\n    lga: string;\n  };\n}\n\ninterface CommunicationSettings {\n  email: { available: boolean; address: string };\n  whatsapp: { available: boolean; phones: string[] };\n  sms: { available: boolean; phones: string[] };\n}\n\nexport default function EnhancedInvoiceView({ invoiceId, onClose }: InvoiceViewPageProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [communicationMethod, setCommunicationMethod] = useState<\"email\" | \"whatsapp\" | \"both\">(\"email\");\n  const [customEmail, setCustomEmail] = useState(\"\");\n  const [customPhone, setCustomPhone] = useState(\"\");\n  const [subject, setSubject] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  // Fetch invoice details\n  const { data: invoice, isLoading: invoiceLoading } = useQuery<EnhancedInvoice>({\n    queryKey: [\"/api/invoices/enhanced\", invoiceId],\n    queryFn: () => apiRequest(\"GET\", `/api/invoices/enhanced/${invoiceId}`).then(res => res.json()),\n  });\n\n  // Fetch communication settings\n  const { data: commSettings } = useQuery<CommunicationSettings>({\n    queryKey: [\"/api/invoices/enhanced/school\", invoice?.school.id, \"communication-settings\"],\n    queryFn: () => apiRequest(\"GET\", `/api/invoices/enhanced/school/${invoice?.school.id}/communication-settings`).then(res => res.json()),\n    enabled: !!invoice?.school.id,\n  });\n\n  // Send invoice mutation\n  const sendInvoiceMutation = useMutation({\n    mutationFn: async (data: {\n      communicationMethod: string;\n      subject?: string;\n      message: string;\n      recipients: { email?: string; phone?: string };\n    }) => {\n      const response = await apiRequest(\"POST\", `/api/invoices/enhanced/${invoiceId}/send`, data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Invoice Sent\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices/enhanced\", invoiceId] });\n      setSendDialogOpen(false);\n      resetSendForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Send Failed\",\n        description: error.message || \"Failed to send invoice. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetSendForm = () => {\n    setCustomEmail(\"\");\n    setCustomPhone(\"\");\n    setSubject(\"\");\n    setMessage(\"\");\n    setCommunicationMethod(\"email\");\n  };\n\n  const handleSendInvoice = () => {\n    if (!invoice) return;\n\n    const recipients: { email?: string; phone?: string } = {};\n    \n    if (communicationMethod === \"email\" || communicationMethod === \"both\") {\n      recipients.email = customEmail || invoice.school.email;\n    }\n    \n    if (communicationMethod === \"whatsapp\" || communicationMethod === \"both\") {\n      recipients.phone = customPhone || (invoice.school.phones && invoice.school.phones[0]);\n    }\n\n    sendInvoiceMutation.mutate({\n      communicationMethod,\n      subject: subject || `Invoice ${invoice.invoiceNumber} from Elite Scholar`,\n      message: message || `Dear ${invoice.school.name},\\n\\nPlease find your invoice ${invoice.invoiceNumber} for the amount of ₦${(parseFloat(invoice.totalAmount) / 100).toFixed(2)}.\\n\\nDue Date: ${new Date(invoice.dueDate).toLocaleDateString()}\\n\\nThank you for choosing Elite Scholar.`,\n      recipients,\n    });\n  };\n\n  const openSendDialog = () => {\n    if (!invoice) return;\n    \n    setSubject(`Invoice ${invoice.invoiceNumber} from Elite Scholar`);\n    setMessage(`Dear ${invoice.school.name},\\n\\nPlease find your invoice ${invoice.invoiceNumber} for the amount of ₦${(parseFloat(invoice.totalAmount) / 100).toFixed(2)}.\\n\\nDue Date: ${new Date(invoice.dueDate).toLocaleDateString()}\\n\\nThank you for choosing Elite Scholar.`);\n    setSendDialogOpen(true);\n  };\n\n  if (invoiceLoading) {\n    return (\n      <SuperAdminLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading invoice...</div>\n        </div>\n      </SuperAdminLayout>\n    );\n  }\n\n  if (!invoice) {\n    return (\n      <SuperAdminLayout>\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg text-red-600\">Invoice not found</div>\n        </div>\n      </SuperAdminLayout>\n    );\n  }\n\n  return (\n    <SuperAdminLayout>\n      <div className=\"space-y-6\" data-testid=\"enhanced-invoice-view\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Invoice Details</h1>\n            <p className=\"text-muted-foreground\">View and manage invoice {invoice.invoiceNumber}</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={openSendDialog}\n              data-testid=\"button-send-invoice\"\n            >\n              <Send className=\"h-4 w-4 mr-2\" />\n              Send Invoice\n            </Button>\n            <Button variant=\"outline\" data-testid=\"button-download-pdf\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download PDF\n            </Button>\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close\">\n              Close\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Invoice Information */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card data-testid=\"card-invoice-info\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Invoice Information\n                  <Badge variant={invoice.status === \"PAID\" ? \"default\" : \"secondary\"}>\n                    {invoice.status}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Invoice Number</Label>\n                    <p className=\"text-lg font-semibold\" data-testid=\"text-invoice-number\">{invoice.invoiceNumber}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Total Amount</Label>\n                    <p className=\"text-lg font-semibold text-green-600\" data-testid=\"text-total-amount\">\n                      ₦{(parseFloat(invoice.totalAmount) / 100).toFixed(2)}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Due Date</Label>\n                    <p className=\"text-lg\" data-testid=\"text-due-date\">{new Date(invoice.dueDate).toLocaleDateString()}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Status</Label>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant={invoice.emailSent ? \"default\" : \"secondary\"}>\n                        {invoice.emailSent ? \"Email Sent\" : \"Email Not Sent\"}\n                      </Badge>\n                      {invoice.emailSentAt && (\n                        <span className=\"text-sm text-muted-foreground\">\n                          on {new Date(invoice.emailSentAt).toLocaleDateString()}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                {invoice.notes && (\n                  <div>\n                    <Label className=\"text-sm font-medium text-muted-foreground\">Notes</Label>\n                    <p className=\"text-sm\" data-testid=\"text-notes\">{invoice.notes}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Invoice Lines */}\n            <Card data-testid=\"card-invoice-lines\">\n              <CardHeader>\n                <CardTitle>Invoice Items</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {invoice.lines && invoice.lines.length > 0 ? (\n                    invoice.lines.map((line, index) => (\n                      <div key={line.id} className=\"border rounded-lg p-4\" data-testid={`invoice-line-${index}`}>\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 text-sm\">\n                          <div>\n                            <Label className=\"text-xs text-muted-foreground\">Description</Label>\n                            <p className=\"font-medium\">{line.description}</p>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs text-muted-foreground\">Quantity & Unit</Label>\n                            <p>{line.quantity} {line.unitMeasurement}</p>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs text-muted-foreground\">Unit Price</Label>\n                            <p>₦{(parseFloat(line.unitPrice) / 100).toFixed(2)}</p>\n                            {line.negotiatedPrice && (\n                              <p className=\"text-xs text-green-600\">\n                                Negotiated: ₦{(parseFloat(line.negotiatedPrice) / 100).toFixed(2)}\n                              </p>\n                            )}\n                          </div>\n                          <div>\n                            <Label className=\"text-xs text-muted-foreground\">Total</Label>\n                            <p className=\"font-semibold\">₦{(parseFloat(line.total) / 100).toFixed(2)}</p>\n                          </div>\n                          {(line.startDate || line.endDate) && (\n                            <div className=\"col-span-2 md:col-span-4 mt-2 pt-2 border-t\">\n                              <Label className=\"text-xs text-muted-foreground\">Service Period</Label>\n                              <p className=\"text-xs\">\n                                {line.startDate && new Date(line.startDate).toLocaleDateString()} - {line.endDate && new Date(line.endDate).toLocaleDateString()}\n                              </p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-muted-foreground text-center py-4\">No line items available</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* School Information */}\n          <div className=\"space-y-6\">\n            <Card data-testid=\"card-school-info\">\n              <CardHeader>\n                <CardTitle>School Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">School Name</Label>\n                  <p className=\"font-semibold\" data-testid=\"text-school-name\">{invoice.school.name}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Email</Label>\n                  <p className=\"text-sm\" data-testid=\"text-school-email\">{invoice.school.email || \"Not provided\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Phone Numbers</Label>\n                  <div className=\"space-y-1\">\n                    {invoice.school.phones && invoice.school.phones.length > 0 ? (\n                      invoice.school.phones.map((phone, index) => (\n                        <p key={index} className=\"text-sm\" data-testid={`text-phone-${index}`}>{phone}</p>\n                      ))\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground\">Not provided</p>\n                    )}\n                  </div>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Address</Label>\n                  <p className=\"text-sm\" data-testid=\"text-school-address\">\n                    {invoice.school.address || \"Not provided\"}\n                    {invoice.school.lga && `, ${invoice.school.lga}`}\n                    {invoice.school.state && `, ${invoice.school.state}`}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Communication Status */}\n            {commSettings && (\n              <Card data-testid=\"card-communication-status\">\n                <CardHeader>\n                  <CardTitle>Communication Options</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">Email:</span>\n                      <Badge variant={commSettings.email.available ? \"default\" : \"secondary\"}>\n                        {commSettings.email.available ? \"Available\" : \"Not Available\"}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <MessageSquare className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">WhatsApp:</span>\n                      <Badge variant={commSettings.whatsapp.available ? \"default\" : \"secondary\"}>\n                        {commSettings.whatsapp.available ? \"Available\" : \"Not Available\"}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      <span className=\"text-sm\">SMS:</span>\n                      <Badge variant={commSettings.sms.available ? \"default\" : \"secondary\"}>\n                        {commSettings.sms.available ? \"Available\" : \"Not Available\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Send Invoice Dialog */}\n        <Dialog open={sendDialogOpen} onOpenChange={setSendDialogOpen}>\n          <DialogContent className=\"max-w-2xl\" data-testid=\"dialog-send-invoice\">\n            <DialogHeader>\n              <DialogTitle>Send Invoice {invoice.invoiceNumber}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-6\">\n              {/* Communication Method */}\n              <div>\n                <Label className=\"text-sm font-medium\">Communication Method</Label>\n                <RadioGroup \n                  value={communicationMethod} \n                  onValueChange={(value: \"email\" | \"whatsapp\" | \"both\") => setCommunicationMethod(value)}\n                  className=\"mt-2\"\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"email\" id=\"email\" data-testid=\"radio-email\" />\n                    <Label htmlFor=\"email\" className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4\" />\n                      Email Only\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"whatsapp\" id=\"whatsapp\" data-testid=\"radio-whatsapp\" />\n                    <Label htmlFor=\"whatsapp\" className=\"flex items-center gap-2\">\n                      <MessageSquare className=\"h-4 w-4\" />\n                      WhatsApp Only\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <RadioGroupItem value=\"both\" id=\"both\" data-testid=\"radio-both\" />\n                    <Label htmlFor=\"both\" className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4 mr-1\" />\n                      <MessageSquare className=\"h-4 w-4\" />\n                      Both Email & WhatsApp\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Recipients */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {(communicationMethod === \"email\" || communicationMethod === \"both\") && (\n                  <div>\n                    <Label htmlFor=\"customEmail\">Email Address</Label>\n                    <Input\n                      id=\"customEmail\"\n                      type=\"email\"\n                      placeholder={invoice.school.email || \"Enter email address\"}\n                      value={customEmail}\n                      onChange={(e) => setCustomEmail(e.target.value)}\n                      data-testid=\"input-custom-email\"\n                    />\n                  </div>\n                )}\n                {(communicationMethod === \"whatsapp\" || communicationMethod === \"both\") && (\n                  <div>\n                    <Label htmlFor=\"customPhone\">Phone Number</Label>\n                    <Input\n                      id=\"customPhone\"\n                      type=\"tel\"\n                      placeholder={invoice.school.phones?.[0] || \"Enter phone number\"}\n                      value={customPhone}\n                      onChange={(e) => setCustomPhone(e.target.value)}\n                      data-testid=\"input-custom-phone\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              {/* Subject (for email) */}\n              {(communicationMethod === \"email\" || communicationMethod === \"both\") && (\n                <div>\n                  <Label htmlFor=\"subject\">Email Subject</Label>\n                  <Input\n                    id=\"subject\"\n                    value={subject}\n                    onChange={(e) => setSubject(e.target.value)}\n                    data-testid=\"input-subject\"\n                  />\n                </div>\n              )}\n\n              {/* Message */}\n              <div>\n                <Label htmlFor=\"message\">Message</Label>\n                <Textarea\n                  id=\"message\"\n                  rows={6}\n                  value={message}\n                  onChange={(e) => setMessage(e.target.value)}\n                  className=\"resize-none\"\n                  data-testid=\"textarea-message\"\n                />\n              </div>\n\n              {/* Actions */}\n              <div className=\"flex justify-end gap-2\">\n                <Button variant=\"outline\" onClick={() => setSendDialogOpen(false)} data-testid=\"button-cancel-send\">\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSendInvoice}\n                  disabled={sendInvoiceMutation.isPending}\n                  data-testid=\"button-confirm-send\"\n                >\n                  {sendInvoiceMutation.isPending ? \"Sending...\" : \"Send Invoice\"}\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </SuperAdminLayout>\n  );\n}","size_bytes":20739},"client/src/pages/superadmin/invoice-pdf-generator.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Document, Page, Text, View, StyleSheet, Font, Image, pdf } from \"@react-pdf/renderer\";\nimport { ChromePicker } from \"react-color\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  FileImage, \n  Download, \n  Eye, \n  Upload, \n  Palette, \n  Settings, \n  Save,\n  Plus,\n  Trash2,\n  Copy,\n  RefreshCw\n} from \"lucide-react\";\nimport type { \n  School, \n  InvoiceTemplate, \n  InvoiceAsset, \n  InsertInvoiceTemplate, \n  InsertInvoiceAsset,\n  Feature,\n  SchoolFeature,\n  InvoiceLine\n} from \"@shared/schema\";\n\n// Invoice PDF Schema\nconst invoiceLineSchema = z.object({\n  featureId: z.string(),\n  quantity: z.number().min(1),\n  unitPrice: z.number(),\n  unitMeasurement: z.string(),\n  negotiatedPrice: z.number().optional(),\n});\n\nconst invoicePDFSchema = z.object({\n  schoolId: z.string().min(1, \"School is required\"),\n  templateId: z.string().optional(),\n  features: z.array(invoiceLineSchema).min(1, \"At least one feature must be selected\"),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  notes: z.string().optional(),\n  customization: z.object({\n    primaryColor: z.string().default(\"#2563eb\"),\n    accentColor: z.string().default(\"#64748b\"),\n    logoUrl: z.string().optional(),\n    watermarkUrl: z.string().optional(),\n    backgroundImageUrl: z.string().optional(),\n    showWatermark: z.boolean().default(false),\n    showBackgroundImage: z.boolean().default(false),\n    headerStyle: z.string().default(\"default\"),\n    footerText: z.string().default(\"\"),\n  }),\n});\n\ntype InvoicePDFFormData = z.infer<typeof invoicePDFSchema>;\ntype InvoiceLineData = z.infer<typeof invoiceLineSchema>;\n\n// PDF Template Types\ntype TemplateType = \"modern\" | \"classic\" | \"minimal\" | \"corporate\";\n\n// Template Schema\nconst templateSchema = z.object({\n  name: z.string().min(1, \"Template name is required\"),\n  templateType: z.enum([\"modern\", \"classic\", \"minimal\", \"corporate\"]),\n  primaryColor: z.string(),\n  accentColor: z.string(),\n  logoUrl: z.string().optional(),\n  watermarkUrl: z.string().optional(),\n  backgroundImageUrl: z.string().optional(),\n  customization: z.object({\n    showWatermark: z.boolean(),\n    showBackgroundImage: z.boolean(),\n    headerStyle: z.string(),\n    footerText: z.string(),\n  }),\n});\n\ntype TemplateFormData = z.infer<typeof templateSchema>;\n\n// PDF Styles based on template type\nconst createStyles = (customization: any, templateType: TemplateType) => {\n  const baseStyles = {\n    page: {\n      flexDirection: 'column' as const,\n      backgroundColor: '#ffffff',\n      padding: templateType === 'minimal' ? 30 : 40,\n      fontFamily: 'Helvetica',\n    },\n    header: {\n      flexDirection: 'row' as const,\n      justifyContent: 'space-between' as const,\n      alignItems: 'center' as const,\n      marginBottom: 30,\n      paddingBottom: 20,\n      borderBottomWidth: templateType === 'classic' ? 2 : 1,\n      borderBottomColor: customization.primaryColor || '#2563eb',\n      borderBottomStyle: 'solid' as const,\n    },\n    logo: {\n      width: 80,\n      height: 80,\n      objectFit: 'contain' as const,\n    },\n    title: {\n      fontSize: templateType === 'corporate' ? 28 : 24,\n      fontWeight: 'bold' as const,\n      color: customization.primaryColor || '#2563eb',\n      marginBottom: 5,\n    },\n    subtitle: {\n      fontSize: 14,\n      color: customization.accentColor || '#64748b',\n    },\n    billToSection: {\n      flexDirection: 'row' as const,\n      justifyContent: 'space-between' as const,\n      marginBottom: 30,\n    },\n    table: {\n      marginBottom: 30,\n    },\n    tableHeader: {\n      flexDirection: 'row' as const,\n      backgroundColor: templateType === 'modern' ? customization.primaryColor : '#f8fafc',\n      padding: 12,\n      marginBottom: 1,\n    },\n    tableHeaderText: {\n      fontSize: 12,\n      fontWeight: 'bold' as const,\n      color: templateType === 'modern' ? '#ffffff' : customization.primaryColor,\n    },\n    tableRow: {\n      flexDirection: 'row' as const,\n      padding: 10,\n      borderBottomWidth: 0.5,\n      borderBottomColor: '#e2e8f0',\n      borderBottomStyle: 'solid' as const,\n    },\n    tableCell: {\n      fontSize: 11,\n      color: '#374151',\n    },\n    footer: {\n      marginTop: 'auto' as const,\n      paddingTop: 20,\n      borderTopWidth: 1,\n      borderTopColor: '#e2e8f0',\n      borderTopStyle: 'solid' as const,\n      textAlign: 'center' as const,\n    },\n    watermark: {\n      position: 'absolute' as const,\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%) rotate(-45deg)',\n      opacity: 0.1,\n      fontSize: 60,\n      color: customization.accentColor || '#64748b',\n    }\n  };\n\n  return StyleSheet.create(baseStyles);\n};\n\n// PDF Invoice Component\nconst InvoicePDFDocument: React.FC<{\n  invoice: any;\n  school: School;\n  template: any;\n}> = ({ invoice, school, template }) => {\n  const styles = createStyles(template.customization, template.templateType);\n  \n  return (\n    <Document>\n      <Page size=\"A4\" style={styles.page}>\n        {/* Background Image */}\n        {template.customization?.showBackgroundImage && template.backgroundImageUrl && (\n          <Image\n            src={template.backgroundImageUrl}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              opacity: 0.05,\n            }}\n          />\n        )}\n\n        {/* Header */}\n        <View style={styles.header}>\n          <View>\n            {template.logoUrl && (\n              <Image src={template.logoUrl} style={styles.logo} />\n            )}\n          </View>\n          <View style={{ alignItems: 'flex-end' }}>\n            <Text style={styles.title}>INVOICE</Text>\n            <Text style={styles.subtitle}>#{invoice.invoiceNumber || 'INV-001'}</Text>\n          </View>\n        </View>\n\n        {/* Bill To Section */}\n        <View style={styles.billToSection}>\n          <View>\n            <Text style={{ fontSize: 16, fontWeight: 'bold', marginBottom: 10 }}>\n              Bill To:\n            </Text>\n            <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 5 }}>\n              {school.name}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#64748b', marginBottom: 2 }}>\n              {school.address}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#64748b' }}>\n              {school.email}\n            </Text>\n          </View>\n          <View style={{ alignItems: 'flex-end' }}>\n            <Text style={{ fontSize: 12, marginBottom: 5 }}>\n              <Text style={{ fontWeight: 'bold' }}>Date: </Text>\n              {new Date().toLocaleDateString()}\n            </Text>\n            <Text style={{ fontSize: 12, marginBottom: 5 }}>\n              <Text style={{ fontWeight: 'bold' }}>Due Date: </Text>\n              {new Date(invoice.dueDate).toLocaleDateString()}\n            </Text>\n          </View>\n        </View>\n\n        {/* Table */}\n        <View style={styles.table}>\n          {/* Table Header */}\n          <View style={styles.tableHeader}>\n            <Text style={[styles.tableHeaderText, { flex: 3 }]}>Description</Text>\n            <Text style={[styles.tableHeaderText, { flex: 1, textAlign: 'right' }]}>Qty</Text>\n            <Text style={[styles.tableHeaderText, { flex: 1, textAlign: 'right' }]}>Price</Text>\n            <Text style={[styles.tableHeaderText, { flex: 1, textAlign: 'right' }]}>Amount</Text>\n          </View>\n\n          {/* Table Rows */}\n          {invoice.features.map((item: any, index: number) => (\n            <View key={index} style={styles.tableRow}>\n              <Text style={[styles.tableCell, { flex: 3 }]}>{item.name}</Text>\n              <Text style={[styles.tableCell, { flex: 1, textAlign: 'right' }]}>\n                {item.quantity}\n              </Text>\n              <Text style={[styles.tableCell, { flex: 1, textAlign: 'right' }]}>\n                ₦{(item.unitPrice / 100).toLocaleString()}\n              </Text>\n              <Text style={[styles.tableCell, { flex: 1, textAlign: 'right' }]}>\n                ₦{((item.negotiatedPrice || item.unitPrice) * item.quantity / 100).toLocaleString()}\n              </Text>\n            </View>\n          ))}\n        </View>\n\n        {/* Total */}\n        <View style={{ alignItems: 'flex-end', marginBottom: 30 }}>\n          <Text style={{\n            fontSize: 18,\n            fontWeight: 'bold',\n            color: template.primaryColor || '#2563eb',\n            padding: 15,\n            backgroundColor: '#f8fafc',\n            borderRadius: 5,\n          }}>\n            Total: ₦{(invoice.totalAmount / 100).toLocaleString()}\n          </Text>\n        </View>\n\n        {/* Notes */}\n        {invoice.notes && (\n          <View style={{ marginBottom: 20 }}>\n            <Text style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 10 }}>\n              Notes:\n            </Text>\n            <Text style={{ fontSize: 12, color: '#64748b' }}>\n              {invoice.notes}\n            </Text>\n          </View>\n        )}\n\n        {/* Watermark */}\n        {template.customization?.showWatermark && (\n          <Text style={styles.watermark}>INVOICE</Text>\n        )}\n\n        {/* Footer */}\n        <View style={styles.footer}>\n          <Text style={{ fontSize: 10, color: '#64748b' }}>\n            {template.customization?.footerText || \"Thank you for your business!\"}\n          </Text>\n        </View>\n      </Page>\n    </Document>\n  );\n};\n\nexport default function InvoicePDFGenerator() {\n  const { toast } = useToast();\n  const [selectedSchoolId, setSelectedSchoolId] = useState(\"\");\n  const [enabledFeatures, setEnabledFeatures] = useState<(SchoolFeature & { feature: Feature })[]>([]);\n  const [selectedTemplate, setSelectedTemplate] = useState<InvoiceTemplate | null>(null);\n  const [showColorPicker, setShowColorPicker] = useState<{ type: string; show: boolean }>({ type: \"\", show: false });\n  const [previewData, setPreviewData] = useState<any>(null);\n  const [assets, setAssets] = useState<InvoiceAsset[]>([]);\n  const [createTemplateDialogOpen, setCreateTemplateDialogOpen] = useState(false);\n\n  // Form for invoice generation\n  const form = useForm<InvoicePDFFormData>({\n    resolver: zodResolver(invoicePDFSchema),\n    defaultValues: {\n      schoolId: \"\",\n      features: [],\n      dueDate: \"\",\n      notes: \"\",\n      customization: {\n        primaryColor: \"#2563eb\",\n        accentColor: \"#64748b\",\n        showWatermark: false,\n        showBackgroundImage: false,\n        headerStyle: \"default\",\n        footerText: \"\",\n      },\n    },\n  });\n\n  // Form for template creation\n  const templateForm = useForm<TemplateFormData>({\n    resolver: zodResolver(templateSchema),\n    defaultValues: {\n      name: \"\",\n      templateType: \"modern\",\n      primaryColor: \"#2563eb\",\n      accentColor: \"#64748b\",\n      customization: {\n        showWatermark: false,\n        showBackgroundImage: false,\n        headerStyle: \"default\",\n        footerText: \"\",\n      },\n    },\n  });\n\n  // Fetch schools\n  const { data: schoolsResponse } = useQuery<{ schools: School[] }>({\n    queryKey: [\"/api/superadmin/schools\"],\n  });\n  const schools = schoolsResponse?.schools || [];\n\n  // Fetch templates\n  const { data: templatesResponse } = useQuery<{ templates: InvoiceTemplate[] }>({\n    queryKey: [\"/api/invoice-templates\"],\n  });\n  const templates = templatesResponse?.templates || [];\n\n  // Fetch assets\n  const { data: assetsResponse } = useQuery<{ assets: InvoiceAsset[] }>({\n    queryKey: [\"/api/invoice-assets\"],\n  });\n\n  useEffect(() => {\n    if (assetsResponse?.assets) {\n      setAssets(assetsResponse.assets);\n    }\n  }, [assetsResponse]);\n\n  // Fetch enabled school features when school is selected\n  useEffect(() => {\n    if (selectedSchoolId) {\n      const fetchFeatures = async () => {\n        try {\n          const response = await fetch(`/api/schools/${selectedSchoolId}/enabled-features`);\n          const features = await response.json();\n          setEnabledFeatures(features);\n        } catch (error) {\n          console.error(\"Failed to fetch school features:\", error);\n          toast({\n            title: \"Error\",\n            description: \"Failed to fetch school features\",\n            variant: \"destructive\",\n          });\n        }\n      };\n      fetchFeatures();\n    }\n  }, [selectedSchoolId, toast]);\n\n  // Create template mutation\n  const createTemplateMutation = useMutation({\n    mutationFn: async (data: TemplateFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/invoice-templates\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Template created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoice-templates\"] });\n      setCreateTemplateDialogOpen(false);\n      templateForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Generate PDF mutation\n  const generatePDFMutation = useMutation({\n    mutationFn: async (data: InvoicePDFFormData) => {\n      // Create the invoice data\n      const invoiceData = {\n        ...data,\n        invoiceNumber: `INV-${Date.now()}`,\n        totalAmount: data.features.reduce((sum, feature) => {\n          const price = feature.negotiatedPrice || feature.unitPrice;\n          return sum + (price * feature.quantity);\n        }, 0),\n      };\n\n      // Find the selected school\n      const school = schools.find(s => s.id === data.schoolId);\n      if (!school) throw new Error(\"School not found\");\n\n      // Use selected template or create default\n      const template = selectedTemplate || {\n        templateType: \"modern\",\n        primaryColor: data.customization.primaryColor,\n        accentColor: data.customization.accentColor,\n        customization: data.customization,\n      };\n\n      // Generate PDF\n      const pdfDoc = <InvoicePDFDocument \n        invoice={invoiceData} \n        school={school} \n        template={template} \n      />;\n      \n      const blob = await pdf(pdfDoc).toBlob();\n      \n      // Download the PDF\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `invoice-${invoiceData.invoiceNumber}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n\n      return invoiceData;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"PDF invoice generated successfully!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Upload asset mutation\n  const uploadAssetMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('type', file.type.startsWith('image/') ? 'logo' : 'document');\n      \n      const response = await fetch('/api/invoice-assets/upload', {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) throw new Error('Failed to upload asset');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: \"Asset uploaded successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoice-assets\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSchoolChange = (schoolId: string) => {\n    setSelectedSchoolId(schoolId);\n    form.setValue(\"schoolId\", schoolId);\n  };\n\n  const handleTemplateSelect = (template: InvoiceTemplate) => {\n    setSelectedTemplate(template);\n    // Update form with template customization\n    const currentCustomization = form.getValues(\"customization\");\n    const templateCustomization = (template.customization as any) || {};\n    form.setValue(\"customization\", {\n      ...currentCustomization,\n      primaryColor: template.primaryColor || \"#2563eb\",\n      accentColor: template.accentColor || \"#64748b\",\n      logoUrl: template.logoUrl || undefined,\n      watermarkUrl: template.watermarkUrl || undefined,\n      backgroundImageUrl: template.backgroundImageUrl || undefined,\n      showWatermark: templateCustomization.showWatermark || false,\n      showBackgroundImage: templateCustomization.showBackgroundImage || false,\n      headerStyle: templateCustomization.headerStyle || \"default\",\n      footerText: templateCustomization.footerText || \"\",\n    });\n  };\n\n  const handleColorChange = (color: { hex: string }, type: 'primary' | 'accent') => {\n    const colorValue = color.hex;\n    form.setValue(`customization.${type === 'primary' ? 'primaryColor' : 'accentColor'}`, colorValue);\n    if (type === 'primary') {\n      templateForm.setValue('primaryColor', colorValue);\n    } else {\n      templateForm.setValue('accentColor', colorValue);\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>, type: 'logo' | 'watermark' | 'background') => {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadAssetMutation.mutate(file);\n    }\n  };\n\n  const addFeatureToInvoice = (feature: SchoolFeature & { feature: Feature }) => {\n    const currentFeatures = form.getValues(\"features\");\n    const exists = currentFeatures.find(f => f.featureId === feature.featureId);\n    \n    if (!exists) {\n      const newFeature: InvoiceLineData = {\n        featureId: feature.featureId,\n        quantity: 1,\n        unitPrice: feature.feature.price || 0,\n        unitMeasurement: feature.feature.pricingType || \"per_school\",\n      };\n      \n      form.setValue(\"features\", [...currentFeatures, newFeature]);\n      \n      // Update preview data\n      updatePreview();\n    }\n  };\n\n  const removeFeatureFromInvoice = (index: number) => {\n    const currentFeatures = form.getValues(\"features\");\n    form.setValue(\"features\", currentFeatures.filter((_, i) => i !== index));\n    updatePreview();\n  };\n\n  const updatePreview = () => {\n    const formData = form.getValues();\n    if (formData.schoolId && formData.features.length > 0) {\n      const school = schools.find(s => s.id === formData.schoolId);\n      const featuresWithDetails = formData.features.map(f => {\n        const featureDetails = enabledFeatures.find(ef => ef.featureId === f.featureId);\n        return {\n          ...f,\n          name: featureDetails?.feature.name || \"Unknown Feature\",\n        };\n      });\n      \n      setPreviewData({\n        ...formData,\n        school,\n        features: featuresWithDetails,\n        totalAmount: featuresWithDetails.reduce((sum, feature) => {\n          const price = feature.negotiatedPrice || feature.unitPrice;\n          return sum + (price * feature.quantity);\n        }, 0),\n      });\n    }\n  };\n\n  const onSubmit = (data: InvoicePDFFormData) => {\n    generatePDFMutation.mutate(data);\n  };\n\n  const onCreateTemplate = (data: TemplateFormData) => {\n    createTemplateMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-hidden\">\n        <div className=\"h-full p-6\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">\n              PDF Invoice Generator\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Create professional PDF invoices with customizable templates, colors, and assets.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-180px)]\">\n            {/* Left Panel - Form */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"h-full\">\n                <CardHeader>\n                  <CardTitle>Invoice Configuration</CardTitle>\n                  <CardDescription>\n                    Configure your invoice settings and customize the appearance\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"overflow-y-auto max-h-[calc(100vh-300px)]\">\n                  <Tabs defaultValue=\"invoice\" className=\"w-full\">\n                    <TabsList className=\"grid w-full grid-cols-4\">\n                      <TabsTrigger value=\"invoice\">Invoice</TabsTrigger>\n                      <TabsTrigger value=\"template\">Template</TabsTrigger>\n                      <TabsTrigger value=\"customization\">Design</TabsTrigger>\n                      <TabsTrigger value=\"assets\">Assets</TabsTrigger>\n                    </TabsList>\n\n                    {/* Invoice Tab */}\n                    <TabsContent value=\"invoice\" className=\"space-y-6\">\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                          {/* School Selection */}\n                          <FormField\n                            control={form.control}\n                            name=\"schoolId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>School</FormLabel>\n                                <Select onValueChange={handleSchoolChange} value={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-school-pdf\">\n                                      <SelectValue placeholder=\"Select school\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {schools.map((school) => (\n                                      <SelectItem key={school.id} value={school.id}>\n                                        {school.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* Available Features */}\n                          {selectedSchoolId && enabledFeatures.length > 0 && (\n                            <div className=\"space-y-4\">\n                              <h4 className=\"text-sm font-medium\">Available Features</h4>\n                              <div className=\"grid grid-cols-1 gap-3 max-h-40 overflow-y-auto\">\n                                {enabledFeatures.map((schoolFeature) => (\n                                  <div\n                                    key={schoolFeature.id}\n                                    className=\"flex items-center justify-between p-3 border rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\"\n                                    onClick={() => addFeatureToInvoice(schoolFeature)}\n                                  >\n                                    <div className=\"flex-1\">\n                                      <div className=\"font-medium text-sm\">\n                                        {schoolFeature.feature.name}\n                                      </div>\n                                      <div className=\"text-xs text-muted-foreground\">\n                                        ₦{((schoolFeature.feature.price || 0) / 100).toLocaleString()} • {schoolFeature.feature.pricingType}\n                                      </div>\n                                    </div>\n                                    <Button\n                                      type=\"button\"\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      data-testid={`button-add-feature-${schoolFeature.featureId}`}\n                                    >\n                                      <Plus className=\"h-4 w-4\" />\n                                    </Button>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Selected Features */}\n                          {form.watch(\"features\").length > 0 && (\n                            <div className=\"space-y-4\">\n                              <h4 className=\"text-sm font-medium\">Selected Features</h4>\n                              <div className=\"space-y-3\">\n                                {form.watch(\"features\").map((feature, index) => {\n                                  const featureDetails = enabledFeatures.find(\n                                    (ef) => ef.featureId === feature.featureId\n                                  );\n                                  return (\n                                    <div key={index} className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                                      <div className=\"flex-1\">\n                                        <div className=\"font-medium text-sm\">\n                                          {featureDetails?.feature.name || \"Unknown Feature\"}\n                                        </div>\n                                        <div className=\"flex gap-4 mt-2\">\n                                          <Input\n                                            type=\"number\"\n                                            placeholder=\"Qty\"\n                                            className=\"w-20\"\n                                            value={feature.quantity}\n                                            onChange={(e) => {\n                                              const features = form.getValues(\"features\");\n                                              features[index].quantity = parseInt(e.target.value) || 1;\n                                              form.setValue(\"features\", features);\n                                              updatePreview();\n                                            }}\n                                          />\n                                          <Input\n                                            type=\"number\"\n                                            placeholder=\"Price\"\n                                            className=\"w-28\"\n                                            value={feature.unitPrice}\n                                            onChange={(e) => {\n                                              const features = form.getValues(\"features\");\n                                              features[index].unitPrice = parseInt(e.target.value) || 0;\n                                              form.setValue(\"features\", features);\n                                              updatePreview();\n                                            }}\n                                          />\n                                        </div>\n                                      </div>\n                                      <Button\n                                        type=\"button\"\n                                        size=\"sm\"\n                                        variant=\"destructive\"\n                                        onClick={() => removeFeatureFromInvoice(index)}\n                                        data-testid={`button-remove-feature-${index}`}\n                                      >\n                                        <Trash2 className=\"h-4 w-4\" />\n                                      </Button>\n                                    </div>\n                                  );\n                                })}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Due Date */}\n                          <FormField\n                            control={form.control}\n                            name=\"dueDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Due Date</FormLabel>\n                                <FormControl>\n                                  <Input type=\"date\" {...field} data-testid=\"input-due-date\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          {/* Notes */}\n                          <FormField\n                            control={form.control}\n                            name=\"notes\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Notes (Optional)</FormLabel>\n                                <FormControl>\n                                  <Textarea\n                                    placeholder=\"Additional notes or terms...\"\n                                    {...field}\n                                    data-testid=\"textarea-notes\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <Button\n                            type=\"submit\"\n                            className=\"w-full\"\n                            disabled={generatePDFMutation.isPending}\n                            data-testid=\"button-generate-pdf\"\n                          >\n                            {generatePDFMutation.isPending ? (\n                              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                            ) : (\n                              <Download className=\"h-4 w-4 mr-2\" />\n                            )}\n                            Generate PDF Invoice\n                          </Button>\n                        </form>\n                      </Form>\n                    </TabsContent>\n\n                    {/* Template Tab */}\n                    <TabsContent value=\"template\" className=\"space-y-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                          <h4 className=\"text-sm font-medium\">Select Template</h4>\n                          <Dialog open={createTemplateDialogOpen} onOpenChange={setCreateTemplateDialogOpen}>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" data-testid=\"button-create-template\">\n                                <Plus className=\"h-4 w-4 mr-2\" />\n                                Create Template\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent>\n                              <DialogHeader>\n                                <DialogTitle>Create New Template</DialogTitle>\n                                <DialogDescription>\n                                  Create a custom invoice template with your preferred styling.\n                                </DialogDescription>\n                              </DialogHeader>\n                              <Form {...templateForm}>\n                                <form onSubmit={templateForm.handleSubmit(onCreateTemplate)} className=\"space-y-4\">\n                                  <FormField\n                                    control={templateForm.control}\n                                    name=\"name\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Template Name</FormLabel>\n                                        <FormControl>\n                                          <Input {...field} placeholder=\"My Custom Template\" />\n                                        </FormControl>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n                                  \n                                  <FormField\n                                    control={templateForm.control}\n                                    name=\"templateType\"\n                                    render={({ field }) => (\n                                      <FormItem>\n                                        <FormLabel>Template Type</FormLabel>\n                                        <Select onValueChange={field.onChange} value={field.value}>\n                                          <FormControl>\n                                            <SelectTrigger>\n                                              <SelectValue placeholder=\"Select template type\" />\n                                            </SelectTrigger>\n                                          </FormControl>\n                                          <SelectContent>\n                                            <SelectItem value=\"modern\">Modern</SelectItem>\n                                            <SelectItem value=\"classic\">Classic</SelectItem>\n                                            <SelectItem value=\"minimal\">Minimal</SelectItem>\n                                            <SelectItem value=\"corporate\">Corporate</SelectItem>\n                                          </SelectContent>\n                                        </Select>\n                                        <FormMessage />\n                                      </FormItem>\n                                    )}\n                                  />\n\n                                  <div className=\"flex gap-4\">\n                                    <Button\n                                      type=\"submit\"\n                                      disabled={createTemplateMutation.isPending}\n                                      data-testid=\"button-save-template\"\n                                    >\n                                      {createTemplateMutation.isPending ? (\n                                        <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                                      ) : (\n                                        <Save className=\"h-4 w-4 mr-2\" />\n                                      )}\n                                      Save Template\n                                    </Button>\n                                  </div>\n                                </form>\n                              </Form>\n                            </DialogContent>\n                          </Dialog>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 gap-3\">\n                          {templates.map((template) => (\n                            <div\n                              key={template.id}\n                              className={`p-4 border rounded-lg cursor-pointer transition-colors ${\n                                selectedTemplate?.id === template.id\n                                  ? \"bg-blue-50 dark:bg-blue-900/20 border-blue-300\"\n                                  : \"hover:bg-gray-50 dark:hover:bg-gray-800\"\n                              }`}\n                              onClick={() => handleTemplateSelect(template)}\n                            >\n                              <div className=\"flex justify-between items-start\">\n                                <div>\n                                  <h5 className=\"font-medium\">{template.name}</h5>\n                                  <p className=\"text-sm text-muted-foreground capitalize\">\n                                    {template.templateType} style\n                                  </p>\n                                  <div className=\"flex gap-2 mt-2\">\n                                    <div\n                                      className=\"w-4 h-4 rounded border\"\n                                      style={{ backgroundColor: template.primaryColor || '#2563eb' }}\n                                    />\n                                    <div\n                                      className=\"w-4 h-4 rounded border\"\n                                      style={{ backgroundColor: template.accentColor || '#64748b' }}\n                                    />\n                                  </div>\n                                </div>\n                                {selectedTemplate?.id === template.id && (\n                                  <Badge variant=\"secondary\">Selected</Badge>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    {/* Customization Tab */}\n                    <TabsContent value=\"customization\" className=\"space-y-6\">\n                      <div className=\"space-y-6\">\n                        {/* Colors */}\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-sm font-medium\">Colors</h4>\n                          \n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <label className=\"text-sm font-medium\">Primary Color</label>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <div\n                                  className=\"w-8 h-8 rounded border cursor-pointer\"\n                                  style={{ backgroundColor: form.watch(\"customization.primaryColor\") }}\n                                  onClick={() => setShowColorPicker({ type: \"primary\", show: !showColorPicker.show })}\n                                />\n                                <Input\n                                  value={form.watch(\"customization.primaryColor\")}\n                                  onChange={(e) => handleColorChange({ hex: e.target.value }, 'primary')}\n                                  className=\"flex-1\"\n                                />\n                              </div>\n                              {showColorPicker.show && showColorPicker.type === \"primary\" && (\n                                <div className=\"absolute z-10 mt-2\">\n                                  <ChromePicker\n                                    color={form.watch(\"customization.primaryColor\") || \"#2563eb\"}\n                                    onChange={(color: { hex: string }) => handleColorChange(color, 'primary')}\n                                  />\n                                </div>\n                              )}\n                            </div>\n\n                            <div>\n                              <label className=\"text-sm font-medium\">Accent Color</label>\n                              <div className=\"flex items-center gap-2 mt-1\">\n                                <div\n                                  className=\"w-8 h-8 rounded border cursor-pointer\"\n                                  style={{ backgroundColor: form.watch(\"customization.accentColor\") }}\n                                  onClick={() => setShowColorPicker({ type: \"accent\", show: !showColorPicker.show })}\n                                />\n                                <Input\n                                  value={form.watch(\"customization.accentColor\")}\n                                  onChange={(e) => handleColorChange({ hex: e.target.value }, 'accent')}\n                                  className=\"flex-1\"\n                                />\n                              </div>\n                              {showColorPicker.show && showColorPicker.type === \"accent\" && (\n                                <div className=\"absolute z-10 mt-2\">\n                                  <ChromePicker\n                                    color={form.watch(\"customization.accentColor\") || \"#64748b\"}\n                                    onChange={(color: { hex: string }) => handleColorChange(color, 'accent')}\n                                  />\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Display Options */}\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-sm font-medium\">Display Options</h4>\n                          \n                          <div className=\"space-y-3\">\n                            <div className=\"flex items-center justify-between\">\n                              <label className=\"text-sm\">Show Watermark</label>\n                              <Switch\n                                checked={form.watch(\"customization.showWatermark\")}\n                                onCheckedChange={(checked) => \n                                  form.setValue(\"customization.showWatermark\", checked)\n                                }\n                              />\n                            </div>\n\n                            <div className=\"flex items-center justify-between\">\n                              <label className=\"text-sm\">Show Background Image</label>\n                              <Switch\n                                checked={form.watch(\"customization.showBackgroundImage\")}\n                                onCheckedChange={(checked) => \n                                  form.setValue(\"customization.showBackgroundImage\", checked)\n                                }\n                              />\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Footer Text */}\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Footer Text</label>\n                          <Input\n                            value={form.watch(\"customization.footerText\")}\n                            onChange={(e) => form.setValue(\"customization.footerText\", e.target.value)}\n                            placeholder=\"Thank you for your business!\"\n                          />\n                        </div>\n                      </div>\n                    </TabsContent>\n\n                    {/* Assets Tab */}\n                    <TabsContent value=\"assets\" className=\"space-y-6\">\n                      <div className=\"space-y-6\">\n                        {/* Upload Buttons */}\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <div className=\"text-center\">\n                            <input\n                              type=\"file\"\n                              accept=\"image/*\"\n                              onChange={(e) => handleFileUpload(e, 'logo')}\n                              className=\"hidden\"\n                              id=\"logo-upload\"\n                            />\n                            <label\n                              htmlFor=\"logo-upload\"\n                              className=\"flex flex-col items-center justify-center p-4 border-2 border-dashed rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\"\n                            >\n                              <Upload className=\"h-8 w-8 mb-2 text-gray-400\" />\n                              <span className=\"text-sm font-medium\">Upload Logo</span>\n                            </label>\n                          </div>\n\n                          <div className=\"text-center\">\n                            <input\n                              type=\"file\"\n                              accept=\"image/*\"\n                              onChange={(e) => handleFileUpload(e, 'watermark')}\n                              className=\"hidden\"\n                              id=\"watermark-upload\"\n                            />\n                            <label\n                              htmlFor=\"watermark-upload\"\n                              className=\"flex flex-col items-center justify-center p-4 border-2 border-dashed rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\"\n                            >\n                              <FileImage className=\"h-8 w-8 mb-2 text-gray-400\" />\n                              <span className=\"text-sm font-medium\">Upload Watermark</span>\n                            </label>\n                          </div>\n\n                          <div className=\"text-center\">\n                            <input\n                              type=\"file\"\n                              accept=\"image/*\"\n                              onChange={(e) => handleFileUpload(e, 'background')}\n                              className=\"hidden\"\n                              id=\"background-upload\"\n                            />\n                            <label\n                              htmlFor=\"background-upload\"\n                              className=\"flex flex-col items-center justify-center p-4 border-2 border-dashed rounded-lg cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800\"\n                            >\n                              <FileImage className=\"h-8 w-8 mb-2 text-gray-400\" />\n                              <span className=\"text-sm font-medium\">Upload Background</span>\n                            </label>\n                          </div>\n                        </div>\n\n                        {/* Assets Grid */}\n                        <div className=\"space-y-4\">\n                          <h4 className=\"text-sm font-medium\">Uploaded Assets</h4>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            {assets.map((asset) => (\n                              <div key={asset.id} className=\"p-3 border rounded-lg\">\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"text-sm font-medium\">{asset.name}</span>\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    {asset.type}\n                                  </Badge>\n                                </div>\n                                {asset.url && (\n                                  <img\n                                    src={asset.url}\n                                    alt={asset.name}\n                                    className=\"w-full h-20 object-cover rounded border\"\n                                  />\n                                )}\n                                <div className=\"mt-2 flex justify-between items-center\">\n                                  <span className=\"text-xs text-muted-foreground\">\n                                    {asset.size && `${(asset.size / 1024).toFixed(1)}KB`}\n                                  </span>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      if (asset.type === 'logo') {\n                                        form.setValue(\"customization.logoUrl\", asset.url);\n                                      } else if (asset.type === 'watermark') {\n                                        form.setValue(\"customization.watermarkUrl\", asset.url);\n                                      } else {\n                                        form.setValue(\"customization.backgroundImageUrl\", asset.url);\n                                      }\n                                    }}\n                                  >\n                                    Use\n                                  </Button>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Right Panel - Preview */}\n            <div className=\"lg:col-span-1\">\n              <Card className=\"h-full\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Eye className=\"h-5 w-5\" />\n                    Live Preview\n                  </CardTitle>\n                  <CardDescription>\n                    See how your invoice will look\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"overflow-y-auto max-h-[calc(100vh-300px)]\">\n                  {previewData ? (\n                    <div className=\"space-y-4\">\n                      {/* Preview Header */}\n                      <div \n                        className=\"p-4 rounded-lg text-white\"\n                        style={{ backgroundColor: form.watch(\"customization.primaryColor\") }}\n                      >\n                        <h3 className=\"text-lg font-bold\">INVOICE</h3>\n                        <p className=\"text-sm opacity-90\">Preview Mode</p>\n                      </div>\n\n                      {/* School Info */}\n                      <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n                        <h4 className=\"font-medium text-sm\">Bill To:</h4>\n                        <p className=\"font-bold\">{previewData.school?.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {previewData.school?.address}\n                        </p>\n                      </div>\n\n                      {/* Items */}\n                      <div className=\"space-y-2\">\n                        <h4 className=\"font-medium text-sm\">Items:</h4>\n                        {previewData.features.map((item: any, index: number) => (\n                          <div key={index} className=\"flex justify-between text-sm p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                            <span>{item.name}</span>\n                            <span>₦{((item.negotiatedPrice || item.unitPrice) * item.quantity / 100).toLocaleString()}</span>\n                          </div>\n                        ))}\n                      </div>\n\n                      {/* Total */}\n                      <div \n                        className=\"p-3 rounded text-white font-bold text-center\"\n                        style={{ backgroundColor: form.watch(\"customization.accentColor\") }}\n                      >\n                        Total: ₦{(previewData.totalAmount / 100).toLocaleString()}\n                      </div>\n\n                      {/* Notes */}\n                      {previewData.notes && (\n                        <div className=\"p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded\">\n                          <h4 className=\"font-medium text-sm mb-1\">Notes:</h4>\n                          <p className=\"text-xs\">{previewData.notes}</p>\n                        </div>\n                      )}\n\n                      {/* Footer */}\n                      {form.watch(\"customization.footerText\") && (\n                        <div className=\"text-center text-xs text-muted-foreground border-t pt-3\">\n                          {form.watch(\"customization.footerText\")}\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-full text-center\">\n                      <div>\n                        <Eye className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                        <p className=\"text-sm text-muted-foreground\">\n                          Select a school and add features to see preview\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":53331},"client/src/pages/school-login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuthStore } from \"@/store/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, GraduationCap, ArrowLeft } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function SchoolLoginPage() {\n  const [, setLocation] = useLocation();\n  const login = useAuthStore((state) => state.login);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [shortName, setShortName] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string; shortName: string }) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user, data.token);\n      setLocation(\"/school\");\n    },\n    onError: (error: any) => {\n      setError(error?.message || \"Login failed. Please check your credentials.\");\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    \n    if (!email || !password || !shortName) {\n      setError(\"Please fill in all fields\");\n      return;\n    }\n\n    loginMutation.mutate({\n      email: email.toLowerCase().trim(),\n      password,\n      shortName: shortName.toLowerCase().trim(),\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-0 bg-white/80 backdrop-blur-sm\">\n        <CardHeader className=\"space-y-2 text-center pb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-indigo-600 rounded-2xl flex items-center justify-center shadow-lg\">\n              <GraduationCap className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">School Portal</CardTitle>\n          <p className=\"text-gray-500 text-sm\">Sign in to access your school dashboard</p>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"shortName\" className=\"text-sm font-medium text-gray-700\">\n                School Code\n              </Label>\n              <Input\n                id=\"shortName\"\n                type=\"text\"\n                placeholder=\"Enter your school code (e.g., cis)\"\n                value={shortName}\n                onChange={(e) => setShortName(e.target.value)}\n                className=\"h-11 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                data-testid=\"input-school-code\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                Email Address\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"h-11 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                data-testid=\"input-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"h-11 pr-10 border-gray-200 focus:border-blue-500 focus:ring-blue-500\"\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-11 px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription data-testid=\"error-message\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full h-11 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 font-medium\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"flex items-center justify-center pt-4 border-t border-gray-100\">\n            <Link\n              href=\"/login\"\n              className=\"flex items-center text-sm text-gray-600 hover:text-blue-600 transition-colors\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-1\" />\n              Back to Super Admin Login\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6320},"client/src/pages/school/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { School, Users, BookOpen, Calendar, TrendingUp, Clock } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { SchoolLayout } from \"@/components/school\";\n\ninterface DashboardStats {\n  totalStudents: number;\n  totalStaff: number;\n  totalClasses: number;\n  activeSubjects: number;\n  currentTerm: string;\n  currentWeek: number;\n}\n\ninterface QuickAction {\n  title: string;\n  description: string;\n  icon: React.ReactNode;\n  href: string;\n  color: string;\n}\n\nexport default function SchoolDashboard() {\n  const { user } = useAuth();\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  // Update time every second\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Fetch dashboard stats\n  const { data: stats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/schools/dashboard/stats\"],\n  });\n\n  // Fetch assigned features for this school\n  const { data: schoolFeatures = [] } = useQuery({\n    queryKey: [\"/api/schools/features\"],\n  });\n\n  // Get quick actions based on user role and assigned features\n  const getQuickActions = (): QuickAction[] => {\n    console.log('School features:', schoolFeatures);\n    \n    // Base actions that are always available\n    const baseActions: QuickAction[] = [];\n\n    // Feature-based actions - only show if feature is assigned and enabled\n    const featureActions: Record<string, QuickAction> = {\n      'academic_management': {\n        title: \"Academic Years\",\n        description: \"Manage academic years and terms\",\n        icon: <Calendar className=\"h-6 w-6\" />,\n        href: \"/school/academic-years\",\n        color: \"bg-blue-500\",\n      },\n      'class_management': {\n        title: \"View Classes\",\n        description: \"Browse all classes and sections\",\n        icon: <School className=\"h-6 w-6\" />,\n        href: \"/school/classes\",\n        color: \"bg-green-500\",\n      },\n      'subject_management': {\n        title: \"Subjects\",\n        description: \"Manage school subjects\",\n        icon: <BookOpen className=\"h-6 w-6\" />,\n        href: \"/school/subjects\",\n        color: \"bg-purple-500\",\n      },\n      'staff_management': {\n        title: \"Staff Management\",\n        description: \"Manage staff profiles and assignments\",\n        icon: <Users className=\"h-6 w-6\" />,\n        href: \"/school/features/staff-management\",\n        color: \"bg-orange-500\",\n      },\n      'school_setup': {\n        title: \"School Setup\",\n        description: \"Configure school structure\",\n        icon: <School className=\"h-6 w-6\" />,\n        href: \"/school/setup\",\n        color: \"bg-indigo-500\",\n      },\n      'attendance': {\n        title: \"Attendance\",\n        description: \"Track student attendance\",\n        icon: <Clock className=\"h-6 w-6\" />,\n        href: \"/school/features/attendance\",\n        color: \"bg-red-500\",\n      },\n      'gradebook': {\n        title: \"Gradebook\",\n        description: \"Manage grades and assessments\",\n        icon: <BookOpen className=\"h-6 w-6\" />,\n        href: \"/school/features/gradebook\",\n        color: \"bg-emerald-500\",\n      },\n      'report_generation': {\n        title: \"Reports\",\n        description: \"Generate academic reports\",\n        icon: <TrendingUp className=\"h-6 w-6\" />,\n        href: \"/school/features/reports\",\n        color: \"bg-blue-600\",\n      }\n    };\n\n    // Add features that are assigned and enabled to this school\n    schoolFeatures.forEach((feature: any) => {\n      if (feature.enabled && featureActions[feature.key]) {\n        baseActions.push(featureActions[feature.key]);\n      }\n    });\n\n    // Always show School Setup for school admins\n    if (user?.role === \"school_admin\" && !baseActions.find(action => action.href === \"/school/setup\")) {\n      baseActions.push(featureActions['school_setup']);\n    }\n\n    return baseActions;\n  };\n\n  const quickActions = getQuickActions();\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true\n    });\n  };\n\n  const formatDate = (date: Date) => {\n    return date.toLocaleDateString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <SchoolLayout \n      title={`Welcome back, ${user?.name || 'User'}!`}\n      subtitle={`${formatDate(currentTime)} - Good ${currentTime.getHours() < 12 ? 'morning' : currentTime.getHours() < 17 ? 'afternoon' : 'evening'}!`}\n    >\n      <div className=\"space-y-8\">\n        {/* Real-time Clock */}\n        <Card className=\"bg-gradient-to-r from-primary/10 to-primary/5\">\n          <CardContent className=\"flex items-center justify-between p-6\">\n            <div>\n              <h3 className=\"text-2xl font-bold text-primary mb-2\">\n                {formatTime(currentTime)}\n              </h3>\n              <p className=\"text-slate-600\">\n                {formatDate(currentTime)}\n              </p>\n            </div>\n            <Clock className=\"h-12 w-12 text-primary\" />\n          </CardContent>\n        </Card>\n\n        {/* Dashboard Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <Users className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats?.totalStudents || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Students</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <Users className=\"h-8 w-8 text-green-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats?.totalStaff || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Staff Members</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <School className=\"h-8 w-8 text-purple-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats?.totalClasses || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Active Classes</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"flex items-center p-6\">\n              <BookOpen className=\"h-8 w-8 text-orange-600 mr-3\" />\n              <div>\n                <p className=\"text-2xl font-bold\">{stats?.activeSubjects || 0}</p>\n                <p className=\"text-xs text-muted-foreground\">Subjects</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Current Academic Info */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5\" />\n                Current Academic Period\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Current Term:</span>\n                <Badge variant=\"default\">{stats?.currentTerm || \"Not Set\"}</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Current Week:</span>\n                <Badge variant=\"secondary\">Week {stats?.currentWeek || \"N/A\"}</Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                System Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">School Status:</span>\n                <Badge variant=\"default\" className=\"bg-green-500\">Active</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium\">Last Sync:</span>\n                <span className=\"text-sm text-muted-foreground\">Just now</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>\n              Get started with the most common tasks\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {quickActions.map((action, index) => (\n                <Card \n                  key={index}\n                  className=\"cursor-pointer hover:shadow-md transition-shadow group\"\n                  onClick={() => window.location.href = action.href}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className={`p-2 rounded-lg ${action.color} text-white`}>\n                        {action.icon}\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm group-hover:text-primary transition-colors\">\n                          {action.title}\n                        </h4>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {action.description}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Role Badge */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium\">Logged in as:</p>\n                <p className=\"text-xs text-muted-foreground\">{user?.email}</p>\n              </div>\n              <Badge variant=\"outline\" className=\"capitalize\">\n                {user?.role?.replace('_', ' ')}\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":10891},"server/routes/database.ts":{"content":"import { Router } from \"express\";\nimport { z } from \"zod\";\nimport { db } from \"../db\";\nimport { sql } from \"drizzle-orm\";\nimport { authMiddleware } from \"../middleware/auth\";\n\nconst router = Router();\n\n// Apply auth middleware and check for superadmin role\nrouter.use(authMiddleware);\nrouter.use((req: any, res, next) => {\n  if (req.user?.role !== 'superadmin') {\n    return res.status(403).json({ error: 'Access denied. Super admin required.' });\n  }\n  next();\n});\n\n// Get all tables with row counts\nrouter.get(\"/tables\", async (req, res) => {\n  try {\n    // Get all tables from information schema\n    const tables = await db.execute(\n      sql`\n        SELECT \n          table_name,\n          (\n            SELECT COUNT(*) \n            FROM information_schema.tables t2 \n            WHERE t2.table_name = t.table_name \n            AND t2.table_schema = 'public'\n          ) as table_exists\n        FROM information_schema.tables t\n        WHERE table_schema = 'public' \n        AND table_type = 'BASE TABLE'\n        ORDER BY table_name\n      `\n    );\n\n    // Get row counts for each table\n    const tablesWithCounts = await Promise.all(\n      tables.map(async (table: any) => {\n        try {\n          const countResult = await db.execute(\n            sql.raw(`SELECT COUNT(*) as count FROM \"${table.table_name}\"`)\n          );\n          return {\n            table_name: table.table_name,\n            row_count: Number(countResult[0]?.count) || 0\n          };\n        } catch (error) {\n          console.error(`Error counting rows for ${table.table_name}:`, error);\n          return {\n            table_name: table.table_name,\n            row_count: 0\n          };\n        }\n      })\n    );\n\n    res.json(tablesWithCounts);\n  } catch (error) {\n    console.error(\"Error fetching tables:\", error);\n    res.status(500).json({ error: \"Failed to fetch database tables\" });\n  }\n});\n\n// Get data from a specific table\nrouter.get(\"/table-data/:tableName\", async (req, res) => {\n  try {\n    const { tableName } = req.params;\n    const limit = Math.min(parseInt(req.query.limit as string) || 100, 1000);\n    const offset = parseInt(req.query.offset as string) || 0;\n\n    // Validate table name to prevent SQL injection\n    if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(tableName)) {\n      return res.status(400).json({ error: \"Invalid table name\" });\n    }\n\n    // Get table structure first\n    const columns = await db.execute(\n      sql`\n        SELECT column_name, data_type \n        FROM information_schema.columns \n        WHERE table_name = ${tableName} \n        AND table_schema = 'public'\n        ORDER BY ordinal_position\n      `\n    );\n\n    if (columns.length === 0) {\n      return res.status(404).json({ error: \"Table not found\" });\n    }\n\n    // Get table data\n    const data = await db.execute(\n      sql.raw(`SELECT * FROM \"${tableName}\" ORDER BY 1 LIMIT ${limit} OFFSET ${offset}`)\n    );\n\n    const columnNames = columns.map((col: any) => col.column_name);\n    const rows = data.map((row: any) => columnNames.map((col: string) => row[col]));\n\n    res.json({\n      columns: columnNames,\n      rows: rows,\n      rowCount: data.length,\n      totalRows: data.length // This would need a separate COUNT query for pagination\n    });\n  } catch (error) {\n    console.error(\"Error fetching table data:\", error);\n    res.status(500).json({ error: \"Failed to fetch table data\" });\n  }\n});\n\n// Execute custom SQL query\nconst executeQuerySchema = z.object({\n  query: z.string().min(1, \"Query is required\")\n});\n\nrouter.post(\"/execute\", async (req, res) => {\n  try {\n    const { query } = executeQuerySchema.parse(req.body);\n\n    // Basic security: only allow SELECT, SHOW, DESCRIBE statements\n    const trimmedQuery = query.trim().toLowerCase();\n    if (!trimmedQuery.startsWith('select') && \n        !trimmedQuery.startsWith('show') && \n        !trimmedQuery.startsWith('describe') &&\n        !trimmedQuery.startsWith('explain')) {\n      return res.status(400).json({ \n        error: \"Only SELECT, SHOW, DESCRIBE, and EXPLAIN queries are allowed for security reasons\" \n      });\n    }\n\n    const startTime = Date.now();\n    const result = await db.execute(sql.raw(query));\n    const executionTime = Date.now() - startTime;\n\n    // Extract column names from first row if available\n    const columns = result.length > 0 ? Object.keys(result[0]) : [];\n    const rows = result.map(row => columns.map(col => row[col]));\n\n    res.json({\n      columns,\n      rows,\n      rowCount: result.length,\n      executionTime\n    });\n  } catch (error) {\n    console.error(\"Error executing query:\", error);\n    res.status(400).json({ \n      error: error instanceof Error ? error.message : \"Query execution failed\" \n    });\n  }\n});\n\n// Export table data as CSV\nrouter.get(\"/export/:tableName\", async (req, res) => {\n  try {\n    const { tableName } = req.params;\n\n    // Validate table name\n    if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(tableName)) {\n      return res.status(400).json({ error: \"Invalid table name\" });\n    }\n\n    // Get table data\n    const data = await db.execute(\n      sql.raw(`SELECT * FROM \"${tableName}\" ORDER BY 1`)\n    );\n\n    if (data.length === 0) {\n      return res.status(404).json({ error: \"No data found in table\" });\n    }\n\n    // Convert to CSV\n    const columns = Object.keys(data[0]);\n    const csvHeader = columns.join(\",\");\n    const csvRows = data.map((row: any) => \n      columns.map((col: string) => {\n        const value = row[col];\n        if (value === null) return \"\";\n        if (typeof value === \"string\" && (value.includes(\",\") || value.includes('\"') || value.includes(\"\\n\"))) {\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\n        }\n        return String(value);\n      }).join(\",\")\n    );\n\n    const csv = [csvHeader, ...csvRows].join(\"\\n\");\n\n    res.setHeader(\"Content-Type\", \"text/csv\");\n    res.setHeader(\"Content-Disposition\", `attachment; filename=\"${tableName}_export.csv\"`);\n    res.send(csv);\n  } catch (error) {\n    console.error(\"Error exporting table:\", error);\n    res.status(500).json({ error: \"Failed to export table data\" });\n  }\n});\n\nexport { router as databaseRoutes };","size_bytes":6101},"client/src/components/school/layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { \n  Menu,\n  Search,\n  Bell,\n  Settings,\n  LogOut,\n  ChevronDown,\n  ChevronRight,\n  Home,\n  Users,\n  BookOpen,\n  Calendar,\n  School,\n  GraduationCap,\n  Star,\n  Moon,\n  Sun,\n  Clock,\n  List,\n  BarChart,\n  AlertTriangle,\n  Edit,\n  User,\n  MoreHorizontal,\n  MapPin,\n  Heart\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SchoolLayoutProps {\n  children: React.ReactNode;\n  title: string;\n  subtitle?: string;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n  menuLinks?: {\n    name: string;\n    href: string;\n    icon?: string;\n    enabled?: boolean;\n  }[];\n}\n\ninterface NavItem {\n  id: string;\n  name: string;\n  href: string;\n  icon: React.ReactNode;\n  children?: NavItem[];\n  isFavorite?: boolean;\n}\n\nexport default function SchoolLayout({ children, title, subtitle }: SchoolLayoutProps) {\n  const { user, logout } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n\n  // Fetch enabled features for the school\n  const { data: features = [] } = useQuery<Feature[]>({\n    queryKey: [\"/api/schools/features\"],\n    queryFn: () => {\n      // Get school ID from user context or URL\n      const schoolId = user?.schoolId;\n      if (!schoolId) {\n        console.error(\"No school ID found for user\");\n        return [];\n      }\n      return fetch(`/api/schools/features?schoolId=${schoolId}`)\n        .then(res => res.json());\n    },\n    enabled: !!user?.schoolId,\n  });\n\n  // Parse feature descriptions to generate navigation items\n  const parseFeatureDescription = (feature: Feature): NavItem[] => {\n    if (!feature.description) return [];\n\n    const children: NavItem[] = [];\n    const description = feature.description.toLowerCase();\n\n    // Parse description and create appropriate child items\n    if (description.includes('manage') || description.includes('list')) {\n      children.push({\n        id: `${feature.id}-list`,\n        name: `${feature.name} List`,\n        href: `/school/features/${feature.id}/list`,\n        icon: <BookOpen className=\"h-4 w-4\" />,\n      });\n    }\n\n    if (description.includes('create') || description.includes('add')) {\n      children.push({\n        id: `${feature.id}-create`,\n        name: `Create ${feature.name.replace(' Management', '')}`,\n        href: `/school/features/${feature.id}/create`,\n        icon: <Users className=\"h-4 w-4\" />,\n      });\n    }\n\n    if (description.includes('assignment') || description.includes('assign')) {\n      children.push({\n        id: `${feature.id}-assignments`,\n        name: 'Assignments',\n        href: `/school/features/${feature.id}/assignments`,\n        icon: <GraduationCap className=\"h-4 w-4\" />,\n      });\n    }\n\n    if (description.includes('schedule') || description.includes('timetable')) {\n      children.push({\n        id: `${feature.id}-schedules`,\n        name: 'Schedules',\n        href: `/school/features/${feature.id}/schedules`,\n        icon: <Calendar className=\"h-4 w-4\" />,\n      });\n    }\n\n    if (description.includes('type') && feature.name.includes('Staff')) {\n      children.push({\n        id: `${feature.id}-types`,\n        name: 'Staff Types',\n        href: `/school/features/${feature.id}/types`,\n        icon: <Settings className=\"h-4 w-4\" />,\n      });\n    }\n\n    return children;\n  };\n\n  // Generate navigation items from features\n  const generateNavigation = (): NavItem[] => {\n    const baseNavigation: NavItem[] = [\n      {\n        id: 'dashboard',\n        name: 'Dashboard',\n        href: '/school',\n        icon: <Home className=\"h-4 w-4\" />,\n        isFavorite: true,\n      },\n    ];\n\n    // Add feature-based navigation with menu links from database\n    const featureNavigation: NavItem[] = features\n      .filter(f => f.enabled)\n      .map(feature => {\n        console.log(`Processing feature: ${feature.name}, menuLinks:`, feature.menuLinks);\n        \n        // Use menu links from feature if available, otherwise use parsed description\n        const menuLinks = feature.menuLinks && Array.isArray(feature.menuLinks) && feature.menuLinks.length > 0\n          ? feature.menuLinks.filter(link => link.enabled !== false)\n          : [];\n        \n        const children = menuLinks.length > 0\n          ? menuLinks.map(link => ({\n              id: `${feature.id}-${link.name?.replace(/\\s+/g, '-')}`,\n              name: link.name,\n              href: link.href,\n              icon: getMenuLinkIcon(link.icon),\n            }))\n          : parseFeatureDescription(feature);\n\n        console.log(`Feature ${feature.name} has ${children.length} menu items`);\n\n        return {\n          id: feature.id,\n          name: feature.name,\n          href: `/school/features/${feature.key}`,\n          icon: getFeatureIcon(feature.name),\n          children: children.length > 0 ? children : undefined,\n        };\n      });\n\n    console.log('Generated navigation:', [...baseNavigation, ...featureNavigation]);\n    return [...baseNavigation, ...featureNavigation];\n  };\n\n  const getFeatureIcon = (featureName: string) => {\n    if (featureName.toLowerCase().includes('staff')) return <Users className=\"h-4 w-4\" />;\n    if (featureName.toLowerCase().includes('student')) return <GraduationCap className=\"h-4 w-4\" />;\n    if (featureName.toLowerCase().includes('class')) return <School className=\"h-4 w-4\" />;\n    if (featureName.toLowerCase().includes('subject')) return <BookOpen className=\"h-4 w-4\" />;\n    if (featureName.toLowerCase().includes('attendance')) return <Clock className=\"h-4 w-4\" />;\n    return <Settings className=\"h-4 w-4\" />;\n  };\n\n  const getMenuLinkIcon = (iconClass?: string) => {\n    if (!iconClass) return <Settings className=\"h-4 w-4\" />;\n    \n    // Map FontAwesome classes to Lucide icons\n    if (iconClass.includes('fa-home')) return <Home className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-user-graduate') || iconClass.includes('fa-graduation-cap')) return <GraduationCap className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-users')) return <Users className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-list')) return <List className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-chart-bar') || iconClass.includes('fa-chart-line')) return <BarChart className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-calendar')) return <Calendar className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-exclamation-triangle')) return <AlertTriangle className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-book')) return <BookOpen className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-edit')) return <Edit className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-cog')) return <Settings className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-plus')) return <Edit className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-building')) return <School className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-money-bill')) return <BarChart className=\"h-4 w-4\" />;\n    if (iconClass.includes('fa-file-alt')) return <BookOpen className=\"h-4 w-4\" />;\n    \n    return <Settings className=\"h-4 w-4\" />;\n  };\n\n  const navigation = generateNavigation();\n\n  const toggleExpanded = (itemId: string) => {\n    setExpandedItems(prev => \n      prev.includes(itemId) \n        ? prev.filter(id => id !== itemId)\n        : [...prev, itemId]\n    );\n  };\n\n  const isActive = (href: string) => {\n    if (href === '/school' && location === '/school') return true;\n    if (href !== '/school' && location.startsWith(href)) return true;\n    return false;\n  };\n\n  const handleLogout = () => {\n    logout();\n    window.location.href = \"/school-login\";\n  };\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n    // You can implement actual dark mode toggle here\n  };\n\n  const filteredNavigation = navigation.filter(item =>\n    item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    item.children?.some(child => \n      child.name.toLowerCase().includes(searchQuery.toLowerCase())\n    )\n  );\n\n  return (\n    <div className={cn(\"min-h-screen flex bg-slate-50\", darkMode && \"dark\")}>\n      {/* Sidebar */}\n      <div className={cn(\n        \"transition-all duration-300 bg-white shadow-lg border-r border-slate-200\",\n        sidebarOpen ? \"w-64\" : \"w-16\"\n      )}>\n        {/* Sidebar Header */}\n        <div className=\"p-4 border-b border-slate-200\">\n          <div className=\"flex items-center justify-between\">\n            {sidebarOpen && (\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <School className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <h1 className=\"text-sm font-bold text-slate-900\">Elite Scholar</h1>\n                  <p className=\"text-xs text-slate-500\">School Portal</p>\n                </div>\n              </div>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              data-testid=\"sidebar-toggle\"\n            >\n              <Menu className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* School Info */}\n        {sidebarOpen && (\n          <div className=\"p-4 bg-slate-50 border-b border-slate-200\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"w-10 h-10\">\n                <AvatarImage src=\"https://via.placeholder.com/40\" />\n                <AvatarFallback>SC</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-slate-900 truncate\">\n                  Demo School\n                </p>\n                <p className=\"text-xs text-slate-500\">\n                  Branch: Main Campus\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Search */}\n        {sidebarOpen && (\n          <div className=\"p-4\">\n            <div className=\"relative\">\n              <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n              <Input\n                type=\"text\"\n                placeholder=\"Search features...\"\n                className=\"pl-10\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"search-features\"\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Navigation */}\n        <ScrollArea className={cn(\"flex-1\", sidebarOpen ? \"h-[calc(100vh-280px)]\" : \"h-[calc(100vh-120px)]\")}>\n          <div className=\"p-2\">\n            {filteredNavigation.map((item) => (\n              <div key={item.id} className=\"mb-1\">\n                {item.children ? (\n                  <Collapsible\n                    open={expandedItems.includes(item.id)}\n                    onOpenChange={() => toggleExpanded(item.id)}\n                  >\n                    <CollapsibleTrigger asChild>\n                      <div\n                        className={cn(\n                          \"flex items-center w-full px-3 py-2 rounded-lg text-sm cursor-pointer transition-colors hover:bg-slate-100\",\n                          isActive(item.href) && \"bg-primary/10 text-primary font-medium\"\n                        )}\n                        data-testid={`nav-item-${item.id}`}\n                      >\n                        {item.icon}\n                        {sidebarOpen && (\n                          <>\n                            <span className=\"ml-3 flex-1 text-left\">{item.name}</span>\n                            {item.isFavorite && <Star className=\"h-3 w-3 text-yellow-500 mr-2\" />}\n                            {expandedItems.includes(item.id) ? \n                              <ChevronDown className=\"h-4 w-4\" /> : \n                              <ChevronRight className=\"h-4 w-4\" />\n                            }\n                          </>\n                        )}\n                      </div>\n                    </CollapsibleTrigger>\n                    {sidebarOpen && (\n                      <CollapsibleContent className=\"ml-6 mt-1 space-y-1\">\n                        {item.children.map((child) => (\n                          <div\n                            key={child.id}\n                            className={cn(\n                              \"flex items-center px-3 py-2 rounded-lg text-sm cursor-pointer transition-colors hover:bg-slate-100\",\n                              isActive(child.href) && \"bg-primary/10 text-primary font-medium\"\n                            )}\n                            onClick={() => setLocation(child.href)}\n                            data-testid={`nav-child-${child.id}`}\n                          >\n                            {child.icon}\n                            <span className=\"ml-3\">{child.name}</span>\n                          </div>\n                        ))}\n                      </CollapsibleContent>\n                    )}\n                  </Collapsible>\n                ) : (\n                  <div\n                    className={cn(\n                      \"flex items-center px-3 py-2 rounded-lg text-sm cursor-pointer transition-colors hover:bg-slate-100\",\n                      isActive(item.href) && \"bg-primary/10 text-primary font-medium\"\n                    )}\n                    onClick={() => setLocation(item.href)}\n                    data-testid={`nav-item-${item.id}`}\n                  >\n                    {item.icon}\n                    {sidebarOpen && (\n                      <>\n                        <span className=\"ml-3\">{item.name}</span>\n                        {item.isFavorite && <Star className=\"h-3 w-3 text-yellow-500 ml-auto\" />}\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Header */}\n        <header className=\"bg-white shadow-sm border-b border-slate-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-slate-900\" data-testid=\"page-title\">\n                {title}\n              </h2>\n              {subtitle && (\n                <p className=\"text-slate-600 mt-1\" data-testid=\"page-subtitle\">\n                  {subtitle}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex items-center space-x-4\">\n              {/* Academic Period Indicator */}\n              <div className=\"hidden md:flex items-center space-x-2\">\n                <Calendar className=\"h-4 w-4 text-slate-400\" />\n                <span className=\"text-sm text-slate-600\">Term 1, Week 5</span>\n              </div>\n\n              <Separator orientation=\"vertical\" className=\"h-6\" />\n\n              {/* Dark Mode Toggle */}\n              <Button variant=\"ghost\" size=\"sm\" onClick={toggleDarkMode}>\n                {darkMode ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n              </Button>\n\n              {/* Notifications */}\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"h-4 w-4\" />\n                <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 w-5 h-5 text-xs\">\n                  3\n                </Badge>\n              </Button>\n\n              {/* User Menu */}\n              <div className=\"flex items-center space-x-3\">\n                <Avatar className=\"w-8 h-8\">\n                  <AvatarImage src=\"https://via.placeholder.com/32\" />\n                  <AvatarFallback>{user?.name?.charAt(0) || 'U'}</AvatarFallback>\n                </Avatar>\n                <div className=\"hidden md:block\">\n                  <p className=\"text-sm font-medium text-slate-900\">\n                    {user?.name}\n                  </p>\n                  <p className=\"text-xs text-slate-500 capitalize\">\n                    {user?.role?.replace('_', ' ')}\n                  </p>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout} data-testid=\"logout-button\">\n                  <LogOut className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </header>\n\n        {/* Page Content */}\n        <main className=\"flex-1 p-6 overflow-auto\" data-testid=\"page-content\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":17332},"client/src/pages/school/setup/academic-years.tsx":{"content":"import { SchoolLayout } from \"@/components/school\";\n\nexport default function AcademicYears() {\n  return (\n    <SchoolLayout title=\"Academic Years\" subtitle=\"Manage academic years, terms, and calendar\">\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">Academic Years Coming Soon</h3>\n          <p className=\"text-slate-600\">Comprehensive academic year management with automatic week generation and calendar view.</p>\n        </div>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":587},"client/src/pages/school/setup/branches.tsx":{"content":"import { SchoolLayout } from \"@/components/school\";\n\nexport default function Branches() {\n  return (\n    <SchoolLayout title=\"Branches\" subtitle=\"Manage school branches and administrators\">\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">Branches Coming Soon</h3>\n          <p className=\"text-slate-600\">Branch management with admin assignments and validation.</p>\n        </div>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":537},"client/src/pages/school/setup/classes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Search, Edit, Trash2, GraduationCap } from \"lucide-react\";\nimport { SchoolLayout } from \"@/components/school\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SchoolSection {\n  id: string;\n  name: string;\n  code: string;\n}\n\ninterface ClassLevel {\n  id: string;\n  name: string;\n  levelLabel: string;\n  fullName: string;\n  capacity: number;\n  sortOrder: number;\n  isActive: boolean;\n}\n\ninterface SectionWithClasses {\n  section: SchoolSection;\n  classes: ClassLevel[];\n}\n\nconst classLevelFormSchema = z.object({\n  sectionId: z.string().min(1, \"Section is required\"),\n  name: z.string().min(1, \"Class name is required\"),\n  levelLabel: z.string().min(1, \"Level label is required\"),\n  capacity: z.number().min(0).optional(),\n});\n\ntype ClassLevelFormData = z.infer<typeof classLevelFormSchema>;\n\nexport default function Classes() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [selectedSection, setSelectedSection] = useState<string>(\"\");\n\n  // Fetch sections\n  const { data: sections = [] } = useQuery<SchoolSection[]>({\n    queryKey: [\"/api/schools/setup/sections\"],\n  });\n\n  // Fetch class levels grouped by section\n  const { data: sectionsWithClasses = [], isLoading } = useQuery<SectionWithClasses[]>({\n    queryKey: [\"/api/schools/setup/class-levels\"],\n  });\n\n  // Create class level mutation\n  const createClassLevelMutation = useMutation({\n    mutationFn: (data: ClassLevelFormData) => apiRequest(\"POST\", \"/api/schools/setup/class-levels\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/setup/class-levels\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({ title: \"Success\", description: \"Class level created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create class level\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Create form\n  const createForm = useForm<ClassLevelFormData>({\n    resolver: zodResolver(classLevelFormSchema),\n    defaultValues: {\n      sectionId: \"\",\n      name: \"\",\n      levelLabel: \"A\",\n      capacity: 0,\n    },\n  });\n\n  const handleCreateClass = (sectionId?: string) => {\n    if (sectionId) {\n      createForm.setValue(\"sectionId\", sectionId);\n    }\n    setShowCreateDialog(true);\n  };\n\n  const onCreateSubmit = (data: ClassLevelFormData) => {\n    createClassLevelMutation.mutate(data);\n  };\n\n  // Filter sections and classes based on search query\n  const filteredSectionsWithClasses = sectionsWithClasses.map(sectionWithClasses => ({\n    ...sectionWithClasses,\n    classes: sectionWithClasses.classes.filter(classLevel =>\n      classLevel.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      classLevel.name.toLowerCase().includes(searchQuery.toLowerCase())\n    )\n  })).filter(sectionWithClasses => \n    sectionWithClasses.section.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    sectionWithClasses.classes.length > 0\n  );\n\n  const totalClasses = sectionsWithClasses.reduce((total, section) => total + section.classes.length, 0);\n\n  return (\n    <SchoolLayout title=\"Classes\" subtitle=\"Manage class levels and organize students\">\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n          <div className=\"relative w-full sm:w-80\">\n            <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search classes...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"search-classes\"\n            />\n          </div>\n          <Button \n            onClick={() => handleCreateClass()}\n            data-testid=\"create-class-button\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Class Level\n          </Button>\n        </div>\n\n        {/* Stats Card */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-2xl font-bold\">{totalClasses}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Classes</p>\n              </div>\n              <div className=\"text-blue-600\">\n                <GraduationCap className=\"w-8 h-8\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Classes grouped by Section */}\n        {isLoading ? (\n          <div className=\"flex justify-center py-8\">\n            <div>Loading classes...</div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {filteredSectionsWithClasses.map((sectionWithClasses) => (\n              <Card key={sectionWithClasses.section.id}>\n                <CardHeader>\n                  <div className=\"flex justify-between items-center\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        {sectionWithClasses.section.name}\n                        <Badge variant=\"outline\">{sectionWithClasses.section.code}</Badge>\n                      </CardTitle>\n                      <CardDescription>\n                        {sectionWithClasses.classes.length} classes in this section\n                      </CardDescription>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleCreateClass(sectionWithClasses.section.id)}\n                      data-testid={`add-class-${sectionWithClasses.section.id}`}\n                    >\n                      <Plus className=\"h-3 w-3 mr-1\" />\n                      Add Level\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {sectionWithClasses.classes.length > 0 ? (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                      {sectionWithClasses.classes.map((classLevel) => (\n                        <Card key={classLevel.id} className=\"border-slate-200\">\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <h4 className=\"font-semibold text-lg\">{classLevel.fullName}</h4>\n                              <Badge variant={classLevel.isActive ? \"default\" : \"secondary\"}>\n                                {classLevel.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </div>\n                            <div className=\"space-y-1 text-sm text-muted-foreground\">\n                              <div>Base: {classLevel.name}</div>\n                              <div>Level: {classLevel.levelLabel}</div>\n                              <div>Capacity: {classLevel.capacity || \"Not set\"}</div>\n                            </div>\n                            <div className=\"flex justify-end space-x-1 mt-3\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid={`edit-class-${classLevel.id}`}\n                              >\n                                <Edit className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                data-testid={`delete-class-${classLevel.id}`}\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      No classes in this section. Add your first class level!\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n\n            {filteredSectionsWithClasses.length === 0 && (\n              <Card>\n                <CardContent className=\"text-center py-8 text-muted-foreground\">\n                  {searchQuery ? 'No classes match your search.' : 'No sections found. Create sections first before adding classes.'}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Create Class Level Dialog */}\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Class Level</DialogTitle>\n              <DialogDescription>\n                Create a new class level in a section\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"sectionId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Section</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"section-select\">\n                            <SelectValue placeholder=\"Select section\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {sections.map((section) => (\n                            <SelectItem key={section.id} value={section.id}>\n                              {section.name} ({section.code})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., JSS1, SSS2\" data-testid=\"class-name-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"levelLabel\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Level Label</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., A, B, C\" data-testid=\"level-label-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={createForm.control}\n                  name=\"capacity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Capacity (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"capacity-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createClassLevelMutation.isPending}\n                    data-testid=\"submit-create-class\"\n                  >\n                    {createClassLevelMutation.isPending ? \"Creating...\" : \"Create Class\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":14015},"client/src/pages/school/setup/sections.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Search, Edit, Trash2, School } from \"lucide-react\";\nimport { SchoolLayout } from \"@/components/school\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface SchoolSection {\n  id: string;\n  name: string;\n  code: string;\n  description: string;\n  sortOrder: number;\n  isActive: boolean;\n  createdAt: string;\n  classCount: number;\n}\n\nconst sectionFormSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  sortOrder: z.number().min(0).optional(),\n});\n\ntype SectionFormData = z.infer<typeof sectionFormSchema>;\n\nexport default function Sections() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [selectedSection, setSelectedSection] = useState<SchoolSection | null>(null);\n\n  // Fetch sections\n  const { data: sections = [], isLoading } = useQuery<SchoolSection[]>({\n    queryKey: [\"/api/schools/setup/sections\"],\n  });\n\n  // Create section mutation\n  const createSectionMutation = useMutation({\n    mutationFn: (data: SectionFormData) => apiRequest(\"POST\", \"/api/schools/setup/sections\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/setup/sections\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({ title: \"Success\", description: \"Section created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create section\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update section mutation\n  const updateSectionMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: SectionFormData }) => \n      apiRequest(\"PATCH\", `/api/schools/setup/sections/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/setup/sections\"] });\n      setShowEditDialog(false);\n      setSelectedSection(null);\n      editForm.reset();\n      toast({ title: \"Success\", description: \"Section updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update section\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Delete section mutation\n  const deleteSectionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/schools/setup/sections/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/setup/sections\"] });\n      toast({ title: \"Success\", description: \"Section deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete section\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Create form\n  const createForm = useForm<SectionFormData>({\n    resolver: zodResolver(sectionFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      sortOrder: 0,\n    },\n  });\n\n  // Edit form\n  const editForm = useForm<SectionFormData>({\n    resolver: zodResolver(sectionFormSchema),\n  });\n\n  // Filter sections based on search query\n  const filteredSections = sections.filter(section =>\n    section.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    section.code.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (section.description && section.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleEdit = (section: SchoolSection) => {\n    setSelectedSection(section);\n    editForm.reset({\n      name: section.name,\n      description: section.description || \"\",\n      sortOrder: section.sortOrder,\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (section: SchoolSection) => {\n    if (section.classCount > 0) {\n      toast({\n        title: \"Cannot Delete\",\n        description: \"Cannot delete section with existing classes\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (confirm(`Are you sure you want to delete ${section.name}?`)) {\n      deleteSectionMutation.mutate(section.id);\n    }\n  };\n\n  const onCreateSubmit = (data: SectionFormData) => {\n    createSectionMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: SectionFormData) => {\n    if (selectedSection) {\n      updateSectionMutation.mutate({ id: selectedSection.id, data });\n    }\n  };\n\n  return (\n    <SchoolLayout title=\"Sections\" subtitle=\"Manage class groupings for your school\">\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n          <div className=\"relative w-full sm:w-80\">\n            <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search sections...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"search-sections\"\n            />\n          </div>\n          <Button \n            onClick={() => setShowCreateDialog(true)}\n            data-testid=\"create-section-button\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Section\n          </Button>\n        </div>\n\n        {/* Stats Card */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-2xl font-bold\">{sections.length}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Sections</p>\n              </div>\n              <div className=\"text-blue-600\">\n                <School className=\"w-8 h-8\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Sections Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>School Sections</CardTitle>\n            <CardDescription>\n              {filteredSections.length} of {sections.length} sections shown\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div>Loading sections...</div>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Code</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Classes</TableHead>\n                    <TableHead>Sort Order</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredSections\n                    .sort((a, b) => a.sortOrder - b.sortOrder)\n                    .map((section) => (\n                    <TableRow key={section.id} data-testid={`section-row-${section.id}`}>\n                      <TableCell className=\"font-medium\">{section.name}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{section.code}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs truncate\">\n                          {section.description || \"No description\"}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"secondary\">{section.classCount} classes</Badge>\n                      </TableCell>\n                      <TableCell>{section.sortOrder}</TableCell>\n                      <TableCell>\n                        <Badge variant={section.isActive ? \"default\" : \"secondary\"}>\n                          {section.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(section)}\n                            data-testid={`edit-section-${section.id}`}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(section)}\n                            disabled={section.classCount > 0}\n                            data-testid={`delete-section-${section.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {filteredSections.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8 text-muted-foreground\">\n                        {searchQuery ? 'No sections match your search.' : 'No sections found. Add your first section!'}\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Section Dialog */}\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Section</DialogTitle>\n              <DialogDescription>\n                Create a new section for grouping classes. Section code will be auto-generated.\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Section Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Primary, Junior Secondary\" data-testid=\"section-name-input\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Brief description of this section...\"\n                          data-testid=\"section-description-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"sortOrder\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sort Order</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"section-sort-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createSectionMutation.isPending}\n                    data-testid=\"submit-create-section\"\n                  >\n                    {createSectionMutation.isPending ? \"Creating...\" : \"Create Section\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Section Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Section</DialogTitle>\n              <DialogDescription>\n                Update section information\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Section Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Primary, Junior Secondary\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Brief description of this section...\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"sortOrder\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sort Order</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowEditDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateSectionMutation.isPending}\n                  >\n                    {updateSectionMutation.isPending ? \"Updating...\" : \"Update Section\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":16792},"client/src/pages/school/setup/subjects.tsx":{"content":"import { SchoolLayout } from \"@/components/school\";\n\nexport default function Subjects() {\n  return (\n    <SchoolLayout title=\"Subjects\" subtitle=\"Manage school subjects and departments\">\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">Subjects Coming Soon</h3>\n          <p className=\"text-slate-600\">Advanced subject management with department support and multi-class assignments.</p>\n        </div>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":558},"server/controllers/school-setup.ts":{"content":"import { Router } from \"express\";\nimport { eq, and, desc, sql, inArray } from \"drizzle-orm\";\nimport { z } from \"zod\";\nimport { db } from \"../db\";\nimport { \n  schoolSections, \n  classLevels, \n  subjectsDepartments, \n  enhancedSubjects,\n  subjectClassAssignments,\n  academicYears,\n  academicTerms,\n  academicWeeks,\n  branches,\n  branchAdmins,\n  users\n} from \"../../shared/schema\";\nimport { authMiddleware } from \"../middleware/auth\";\n\nconst router = Router();\n\n// Apply auth middleware\nrouter.use(authMiddleware);\n\n// Validation schemas\nconst createSectionSchema = z.object({\n  name: z.string().min(1),\n  code: z.string().optional(), // Optional, will be auto-generated if not provided\n  description: z.string().optional(),\n  sortOrder: z.number().optional(),\n});\n\nconst createClassLevelSchema = z.object({\n  sectionId: z.string().min(1),\n  name: z.string().min(1),\n  levelLabel: z.string().default(\"A\"),\n  capacity: z.number().optional(),\n});\n\nconst createSubjectDepartmentSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n});\n\nconst createEnhancedSubjectSchema = z.object({\n  name: z.string().min(1),\n  code: z.string().min(1),\n  description: z.string().optional(),\n  departmentId: z.string().optional(),\n  isCore: z.boolean().default(false),\n  creditUnits: z.number().default(1),\n  classLevelIds: z.array(z.string()).min(1),\n});\n\nconst createAcademicYearSchema = z.object({\n  name: z.string().min(1),\n  startDate: z.string().min(1),\n  endDate: z.string().min(1),\n  terms: z.array(z.object({\n    name: z.string().min(1),\n    code: z.string().min(1),\n    startDate: z.string().min(1),\n    endDate: z.string().min(1),\n    isActive: z.boolean().default(false),\n  })).min(1),\n});\n\n// SECTIONS CRUD\n\n// Get all sections\nrouter.get(\"/sections\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    console.log(`Fetching sections for school: ${schoolId}, branch: ${branchId}`);\n\n    const sectionsList = await db\n      .select({\n        id: schoolSections.id,\n        name: schoolSections.name,\n        code: schoolSections.code,\n        description: schoolSections.description,\n        sortOrder: schoolSections.sortOrder,\n        isActive: schoolSections.isActive,\n        createdAt: schoolSections.createdAt,\n        classCount: sql<number>`count(${classLevels.id})`,\n      })\n      .from(schoolSections)\n      .leftJoin(classLevels, and(\n        eq(schoolSections.id, classLevels.sectionId),\n        eq(classLevels.schoolId, schoolId),\n        eq(classLevels.branchId, branchId)\n      ))\n      .where(and(\n        eq(schoolSections.schoolId, schoolId),\n        eq(schoolSections.branchId, branchId),\n        eq(schoolSections.isActive, true)\n      ))\n      .groupBy(schoolSections.id, schoolSections.name, schoolSections.code, schoolSections.description, schoolSections.sortOrder, schoolSections.isActive, schoolSections.createdAt)\n      .orderBy(schoolSections.sortOrder, schoolSections.name);\n\n    console.log(`Found ${sectionsList.length} sections for school ${schoolId}`);\n    res.json(sectionsList);\n  } catch (error) {\n    console.error(\"Get sections error:\", error);\n    res.status(500).json({ error: \"Failed to fetch sections\" });\n  }\n});\n\n// Create section\nrouter.post(\"/sections\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const validatedData = createSectionSchema.parse(req.body);\n\n    // Auto-generate section code from name\n    const generateSectionCode = (name: string): string => {\n      const words = name.trim().split(/\\s+/);\n      if (words.length === 1) {\n        return words[0].substring(0, 3).toUpperCase();\n      }\n      return words.map(word => word.substring(0, 1).toUpperCase()).join('').substring(0, 5);\n    };\n\n    let baseCode = validatedData.code || generateSectionCode(validatedData.name);\n    let finalCode = baseCode;\n    let counter = 1;\n\n    // Ensure unique code by appending number if needed\n    while (true) {\n      const existingSection = await db\n        .select()\n        .from(schoolSections)\n        .where(and(\n          eq(schoolSections.schoolId, schoolId),\n          eq(schoolSections.branchId, branchId),\n          eq(schoolSections.code, finalCode)\n        ))\n        .limit(1);\n\n      if (existingSection.length === 0) break;\n      \n      finalCode = `${baseCode}${counter}`;\n      counter++;\n    }\n\n    const [newSection] = await db\n      .insert(schoolSections)\n      .values({\n        schoolId,\n        branchId,\n        name: validatedData.name,\n        code: finalCode,\n        description: validatedData.description || null,\n        sortOrder: validatedData.sortOrder || 0,\n      })\n      .returning();\n\n    res.status(201).json(newSection);\n  } catch (error) {\n    console.error(`Create section error for school ${req.user.schoolId}:`, error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to create section\" });\n  }\n});\n\n// Update section\nrouter.patch(\"/sections/:id\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const sectionId = req.params.id;\n    const validatedData = createSectionSchema.partial().parse(req.body);\n\n    console.log(`Updating section ${sectionId} for school: ${schoolId}, branch: ${branchId}`);\n\n    const updateData: any = { updatedAt: new Date() };\n    if (validatedData.name) updateData.name = validatedData.name;\n    if (validatedData.description !== undefined) updateData.description = validatedData.description;\n    if (validatedData.sortOrder !== undefined) updateData.sortOrder = validatedData.sortOrder;\n\n    const [updatedSection] = await db\n      .update(schoolSections)\n      .set(updateData)\n      .where(and(\n        eq(schoolSections.id, sectionId),\n        eq(schoolSections.schoolId, schoolId),\n        eq(schoolSections.branchId, branchId)\n      ))\n      .returning();\n\n    if (!updatedSection) {\n      console.log(`Section ${sectionId} not found for school ${schoolId}`);\n      return res.status(404).json({ error: \"Section not found\" });\n    }\n\n    console.log(`Successfully updated section ${sectionId}`);\n    res.json(updatedSection);\n  } catch (error) {\n    console.error(\"Update section error:\", error);\n    res.status(500).json({ error: \"Failed to update section\" });\n  }\n});\n\n// Delete section\nrouter.delete(\"/sections/:id\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const sectionId = req.params.id;\n\n    console.log(`Deleting section ${sectionId} for school: ${schoolId}, branch: ${branchId}`);\n\n    // Check if section has classes and belongs to the same school\n    const sectionClasses = await db\n      .select()\n      .from(classLevels)\n      .where(and(\n        eq(classLevels.sectionId, sectionId),\n        eq(classLevels.schoolId, schoolId),\n        eq(classLevels.branchId, branchId)\n      ))\n      .limit(1);\n\n    if (sectionClasses.length > 0) {\n      console.log(`Cannot delete section ${sectionId} - has existing classes`);\n      return res.status(400).json({ error: \"Cannot delete section with existing classes\" });\n    }\n\n    const result = await db\n      .update(schoolSections)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(and(\n        eq(schoolSections.id, sectionId),\n        eq(schoolSections.schoolId, schoolId),\n        eq(schoolSections.branchId, branchId)\n      ))\n      .returning();\n\n    if (result.length === 0) {\n      console.log(`Section ${sectionId} not found for school ${schoolId}`);\n      return res.status(404).json({ error: \"Section not found\" });\n    }\n\n    console.log(`Successfully deleted section ${sectionId}`);\n    res.json({ message: \"Section deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete section error:\", error);\n    res.status(500).json({ error: \"Failed to delete section\" });\n  }\n});\n\n// CLASS LEVELS CRUD\n\n// Get all class levels grouped by section\nrouter.get(\"/class-levels\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    const classLevelsList = await db\n      .select({\n        id: classLevels.id,\n        name: classLevels.name,\n        levelLabel: classLevels.levelLabel,\n        fullName: classLevels.fullName,\n        capacity: classLevels.capacity,\n        sortOrder: classLevels.sortOrder,\n        isActive: classLevels.isActive,\n        section: {\n          id: schoolSections.id,\n          name: schoolSections.name,\n          code: schoolSections.code,\n        },\n      })\n      .from(classLevels)\n      .innerJoin(schoolSections, eq(classLevels.sectionId, schoolSections.id))\n      .where(and(\n        eq(classLevels.schoolId, schoolId),\n        eq(classLevels.branchId, branchId),\n        eq(classLevels.isActive, true)\n      ))\n      .orderBy(schoolSections.sortOrder, classLevels.sortOrder, classLevels.fullName);\n\n    // Group by section\n    const groupedBySection = classLevelsList.reduce((acc: any, classLevel) => {\n      const sectionId = classLevel.section.id;\n      if (!acc[sectionId]) {\n        acc[sectionId] = {\n          section: classLevel.section,\n          classes: [],\n        };\n      }\n      acc[sectionId].classes.push({\n        id: classLevel.id,\n        name: classLevel.name,\n        levelLabel: classLevel.levelLabel,\n        fullName: classLevel.fullName,\n        capacity: classLevel.capacity,\n        sortOrder: classLevel.sortOrder,\n        isActive: classLevel.isActive,\n      });\n      return acc;\n    }, {});\n\n    res.json(Object.values(groupedBySection));\n  } catch (error) {\n    console.error(\"Get class levels error:\", error);\n    res.status(500).json({ error: \"Failed to fetch class levels\" });\n  }\n});\n\n// Create class level\nrouter.post(\"/class-levels\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const validatedData = createClassLevelSchema.parse(req.body);\n\n    const fullName = `${validatedData.name}${validatedData.levelLabel}`;\n\n    // Check for duplicate full name\n    const existingClass = await db\n      .select()\n      .from(classLevels)\n      .where(and(\n        eq(classLevels.schoolId, schoolId),\n        eq(classLevels.branchId, branchId),\n        eq(classLevels.fullName, fullName)\n      ))\n      .limit(1);\n\n    if (existingClass.length > 0) {\n      return res.status(400).json({ error: \"Class with this name and level already exists\" });\n    }\n\n    // Get the sort order from the section\n    const section = await db\n      .select({ sortOrder: schoolSections.sortOrder })\n      .from(schoolSections)\n      .where(eq(schoolSections.id, validatedData.sectionId))\n      .limit(1);\n\n    const sectionSortOrder = section[0]?.sortOrder || 0;\n\n    const [newClassLevel] = await db\n      .insert(classLevels)\n      .values({\n        schoolId,\n        branchId,\n        sectionId: validatedData.sectionId,\n        name: validatedData.name,\n        levelLabel: validatedData.levelLabel,\n        fullName,\n        capacity: validatedData.capacity || 0,\n        sortOrder: sectionSortOrder * 100 + parseInt(validatedData.name.replace(/\\D/g, '') || '0'),\n      })\n      .returning();\n\n    res.status(201).json(newClassLevel);\n  } catch (error) {\n    console.error(\"Create class level error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to create class level\" });\n  }\n});\n\n// SUBJECT DEPARTMENTS CRUD\n\n// Get all departments\nrouter.get(\"/departments\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    const departmentsList = await db\n      .select()\n      .from(subjectsDepartments)\n      .where(and(\n        eq(subjectsDepartments.schoolId, schoolId),\n        eq(subjectsDepartments.branchId, branchId),\n        eq(subjectsDepartments.isActive, true)\n      ))\n      .orderBy(subjectsDepartments.name);\n\n    res.json(departmentsList);\n  } catch (error) {\n    console.error(\"Get departments error:\", error);\n    res.status(500).json({ error: \"Failed to fetch departments\" });\n  }\n});\n\n// Create department\nrouter.post(\"/departments\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const validatedData = createSubjectDepartmentSchema.parse(req.body);\n\n    const [newDepartment] = await db\n      .insert(subjectsDepartments)\n      .values({\n        schoolId,\n        branchId,\n        name: validatedData.name,\n        description: validatedData.description || null,\n      })\n      .returning();\n\n    res.status(201).json(newDepartment);\n  } catch (error) {\n    console.error(\"Create department error:\", error);\n    res.status(500).json({ error: \"Failed to create department\" });\n  }\n});\n\n// ENHANCED SUBJECTS CRUD\n\n// Get all subjects with assignments\nrouter.get(\"/subjects\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    const subjectsList = await db\n      .select({\n        id: enhancedSubjects.id,\n        name: enhancedSubjects.name,\n        code: enhancedSubjects.code,\n        description: enhancedSubjects.description,\n        isCore: enhancedSubjects.isCore,\n        creditUnits: enhancedSubjects.creditUnits,\n        isActive: enhancedSubjects.isActive,\n        department: {\n          id: subjectsDepartments.id,\n          name: subjectsDepartments.name,\n        },\n      })\n      .from(enhancedSubjects)\n      .leftJoin(subjectsDepartments, eq(enhancedSubjects.departmentId, subjectsDepartments.id))\n      .where(and(\n        eq(enhancedSubjects.schoolId, schoolId),\n        eq(enhancedSubjects.branchId, branchId),\n        eq(enhancedSubjects.isActive, true)\n      ))\n      .orderBy(enhancedSubjects.name);\n\n    // Get class assignments for each subject\n    for (const subject of subjectsList) {\n      const assignments = await db\n        .select({\n          classLevel: {\n            id: classLevels.id,\n            fullName: classLevels.fullName,\n            section: {\n              name: sections.name,\n            },\n          },\n        })\n        .from(subjectClassAssignments)\n        .innerJoin(classLevels, eq(subjectClassAssignments.classLevelId, classLevels.id))\n        .innerJoin(schoolSections, eq(classLevels.sectionId, schoolSections.id))\n        .where(and(\n          eq(subjectClassAssignments.subjectId, subject.id),\n          eq(subjectClassAssignments.isActive, true)\n        ));\n\n      (subject as any).assignedClasses = assignments.map(a => a.classLevel);\n    }\n\n    res.json(subjectsList);\n  } catch (error) {\n    console.error(\"Get subjects error:\", error);\n    res.status(500).json({ error: \"Failed to fetch subjects\" });\n  }\n});\n\n// Create subject with class assignments\nrouter.post(\"/subjects\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const validatedData = createEnhancedSubjectSchema.parse(req.body);\n\n    await db.transaction(async (tx) => {\n      // Create subject\n      const [newSubject] = await tx\n        .insert(enhancedSubjects)\n        .values({\n          schoolId,\n          branchId,\n          name: validatedData.name,\n          code: validatedData.code,\n          description: validatedData.description || null,\n          departmentId: validatedData.departmentId || null,\n          isCore: validatedData.isCore,\n          creditUnits: validatedData.creditUnits,\n        })\n        .returning();\n\n      // Create class assignments\n      const assignments = validatedData.classLevelIds.map(classLevelId => ({\n        subjectId: newSubject.id,\n        classLevelId,\n      }));\n\n      await tx.insert(subjectClassAssignments).values(assignments);\n\n      res.status(201).json(newSubject);\n    });\n  } catch (error) {\n    console.error(\"Create subject error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to create subject\" });\n  }\n});\n\n// ACADEMIC YEARS with automatic week generation\n\n// Get academic years with terms and weeks\nrouter.get(\"/academic-years\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    const yearsList = await db\n      .select({\n        id: academicYears.id,\n        name: academicYears.name,\n        startDate: academicYears.startDate,\n        endDate: academicYears.endDate,\n        isActive: academicYears.isActive,\n        createdAt: academicYears.createdAt,\n      })\n      .from(academicYears)\n      .where(and(\n        eq(academicYears.schoolId, schoolId),\n        eq(academicYears.branchId, branchId)\n      ))\n      .orderBy(desc(academicYears.startDate));\n\n    // Get terms and weeks for each year\n    for (const year of yearsList) {\n      const terms = await db\n        .select({\n          id: academicTerms.id,\n          name: academicTerms.name,\n          code: academicTerms.code,\n          startDate: academicTerms.startDate,\n          endDate: academicTerms.endDate,\n          isCurrent: academicTerms.isCurrent,\n          isActive: academicTerms.isActive,\n        })\n        .from(academicTerms)\n        .where(eq(academicTerms.academicYearId, year.id))\n        .orderBy(academicTerms.startDate);\n\n      for (const term of terms) {\n        const weeks = await db\n          .select()\n          .from(academicWeeks)\n          .where(eq(academicWeeks.academicTermId, term.id))\n          .orderBy(academicWeeks.weekNumber);\n\n        (term as any).weeks = weeks;\n      }\n\n      (year as any).terms = terms;\n    }\n\n    res.json(yearsList);\n  } catch (error) {\n    console.error(\"Get academic years error:\", error);\n    res.status(500).json({ error: \"Failed to fetch academic years\" });\n  }\n});\n\n// Create academic year with terms and auto-generate weeks\nrouter.post(\"/academic-years\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n    const validatedData = createAcademicYearSchema.parse(req.body);\n\n    await db.transaction(async (tx) => {\n      // Check if we need to deactivate current active year\n      const activeTerms = validatedData.terms.filter(t => t.isActive);\n      if (activeTerms.length > 0) {\n        await tx\n          .update(academicYears)\n          .set({ isActive: false })\n          .where(and(\n            eq(academicYears.schoolId, schoolId),\n            eq(academicYears.branchId, branchId),\n            eq(academicYears.isActive, true)\n          ));\n\n        await tx\n          .update(academicTerms)\n          .set({ isCurrent: false, isActive: false })\n          .where(and(\n            eq(academicTerms.schoolId, schoolId),\n            eq(academicTerms.branchId, branchId)\n          ));\n      }\n\n      // Create academic year\n      const [newYear] = await tx\n        .insert(academicYears)\n        .values({\n          schoolId,\n          branchId,\n          name: validatedData.name,\n          startDate: new Date(validatedData.startDate),\n          endDate: new Date(validatedData.endDate),\n          isActive: activeTerms.length > 0,\n        })\n        .returning();\n\n      // Create terms and generate weeks\n      for (const termData of validatedData.terms) {\n        const [newTerm] = await tx\n          .insert(academicTerms)\n          .values({\n            schoolId,\n            branchId,\n            academicYearId: newYear.id,\n            name: termData.name,\n            code: termData.code,\n            startDate: new Date(termData.startDate),\n            endDate: new Date(termData.endDate),\n            isCurrent: termData.isActive,\n            isActive: termData.isActive,\n          })\n          .returning();\n\n        // Generate weeks for this term\n        const termStart = new Date(termData.startDate);\n        const termEnd = new Date(termData.endDate);\n        const weeks = [];\n        let weekNumber = 1;\n        let currentWeekStart = new Date(termStart);\n\n        while (currentWeekStart < termEnd) {\n          const weekEnd = new Date(currentWeekStart);\n          weekEnd.setDate(weekEnd.getDate() + 6); // End of week (Sunday)\n          \n          if (weekEnd > termEnd) {\n            weekEnd.setTime(termEnd.getTime());\n          }\n\n          weeks.push({\n            academicYearId: newYear.id,\n            academicTermId: newTerm.id,\n            weekNumber,\n            startDate: new Date(currentWeekStart),\n            endDate: new Date(weekEnd),\n            isCurrent: false,\n          });\n\n          currentWeekStart.setDate(currentWeekStart.getDate() + 7);\n          weekNumber++;\n        }\n\n        if (weeks.length > 0) {\n          await tx.insert(academicWeeks).values(weeks);\n        }\n      }\n\n      res.status(201).json(newYear);\n    });\n  } catch (error) {\n    console.error(\"Create academic year error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to create academic year\" });\n  }\n});\n\n// BRANCHES AND ADMINS\n\n// Get branches with admins\nrouter.get(\"/branches\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n\n    const branchesList = await db\n      .select({\n        id: branches.id,\n        name: branches.name,\n        address: branches.address,\n        phone: branches.phone,\n        email: branches.email,\n        isActive: branches.isActive,\n        createdAt: branches.createdAt,\n      })\n      .from(branches)\n      .where(eq(branches.schoolId, schoolId))\n      .orderBy(branches.name);\n\n    // Get admins for each branch\n    for (const branch of branchesList) {\n      const admins = await db\n        .select({\n          id: branchAdmins.id,\n          user: {\n            id: users.id,\n            name: users.name,\n            email: users.email,\n          },\n          assignedAt: branchAdmins.assignedAt,\n          isActive: branchAdmins.isActive,\n        })\n        .from(branchAdmins)\n        .innerJoin(users, eq(branchAdmins.userId, users.id))\n        .where(and(\n          eq(branchAdmins.branchId, branch.id),\n          eq(branchAdmins.isActive, true)\n        ));\n\n      (branch as any).admins = admins;\n    }\n\n    res.json(branchesList);\n  } catch (error) {\n    console.error(\"Get branches error:\", error);\n    res.status(500).json({ error: \"Failed to fetch branches\" });\n  }\n});\n\n// Assign admin to branch\nrouter.post(\"/branches/:branchId/admins\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.params.branchId;\n    const { userId } = req.body;\n\n    // Check if assignment already exists\n    const existingAssignment = await db\n      .select()\n      .from(branchAdmins)\n      .where(and(\n        eq(branchAdmins.branchId, branchId),\n        eq(branchAdmins.userId, userId)\n      ))\n      .limit(1);\n\n    if (existingAssignment.length > 0) {\n      return res.status(400).json({ error: \"User is already assigned to this branch\" });\n    }\n\n    const [newAssignment] = await db\n      .insert(branchAdmins)\n      .values({\n        schoolId,\n        branchId,\n        userId,\n      })\n      .returning();\n\n    res.status(201).json(newAssignment);\n  } catch (error) {\n    console.error(\"Assign branch admin error:\", error);\n    res.status(500).json({ error: \"Failed to assign branch admin\" });\n  }\n});\n\nexport default router;","size_bytes":23682},"server/controllers/school-dashboard.ts":{"content":"import { Router } from \"express\";\nimport { eq, sql } from \"drizzle-orm\";\nimport { db } from \"../db\";\nimport { \n  users, \n  schools, \n  branches, \n  features, \n  schoolFeatures,\n  staff,\n  classes,\n  subjects,\n  academicYears,\n  academicTerms,\n  staffTypes,\n  staffAssignments,\n  schedules\n} from \"../../shared/schema\";\nimport { authMiddleware } from \"../middleware/auth\";\n\nconst router = Router();\n\n// Apply auth middleware\nrouter.use(authMiddleware);\n\n// Get school dashboard stats\nrouter.get(\"/stats\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    // Get total students (role = 'student')\n    const [totalStudentsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(sql`${users.schoolId} = ${schoolId} AND ${users.role} = 'student'`);\n\n    // Get total staff\n    const [totalStaffResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(staff)\n      .where(eq(staff.schoolId, schoolId));\n\n    // Get total classes\n    const [totalClassesResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(classes)\n      .where(eq(classes.schoolId, schoolId));\n\n    // Get total subjects\n    const [totalSubjectsResult] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(subjects)\n      .where(eq(subjects.schoolId, schoolId));\n\n    // Get current academic term\n    const currentTerm = await db\n      .select({\n        name: academicTerms.name,\n        code: academicTerms.code,\n      })\n      .from(academicTerms)\n      .where(sql`${academicTerms.schoolId} = ${schoolId} AND ${academicTerms.isCurrent} = true`)\n      .limit(1);\n\n    const stats = {\n      totalStudents: Number(totalStudentsResult?.count) || 0,\n      totalStaff: Number(totalStaffResult?.count) || 0,\n      totalClasses: Number(totalClassesResult?.count) || 0,\n      activeSubjects: Number(totalSubjectsResult?.count) || 0,\n      currentTerm: currentTerm[0]?.name || \"Not Set\",\n      currentWeek: 5, // This would be calculated based on current date and term start\n    };\n\n    res.json(stats);\n  } catch (error) {\n    console.error(\"Dashboard stats error:\", error);\n    res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n  }\n});\n\n// Get school features for navigation\nrouter.get(\"/features\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const userRole = req.user.role;\n\n    console.log(`Fetching features for school: ${schoolId}, user role: ${userRole}`);\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    const schoolFeaturesList = await db\n      .select({\n        id: features.id,\n        key: features.key,\n        name: features.name,\n        description: features.description,\n        category: features.category,\n        isCore: features.isCore,\n        enabled: schoolFeatures.enabled,\n        createdAt: schoolFeatures.createdAt,\n      })\n      .from(schoolFeatures)\n      .innerJoin(features, eq(schoolFeatures.featureId, features.id))\n      .where(eq(schoolFeatures.schoolId, schoolId));\n\n    console.log(`Found ${schoolFeaturesList.length} features assigned to school ${schoolId}`);\n    res.json(schoolFeaturesList);\n  } catch (error) {\n    console.error(\"Features fetch error:\", error);\n    res.status(500).json({ error: \"Failed to fetch features\" });\n  }\n});\n\nexport default router;","size_bytes":3534},"client/src/pages/superadmin/feature-assignment.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Users, Settings, Check, X, Plus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SuperAdminLayout from \"@/components/superadmin/layout\";\n\ninterface School {\n  id: string;\n  name: string;\n  shortName: string;\n  type: string;\n  status: string;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  category: string;\n  isCore: boolean;\n}\n\ninterface SchoolFeature {\n  id: string;\n  schoolId: string;\n  featureId: string;\n  enabled: boolean;\n  feature: Feature;\n}\n\nexport default function FeatureAssignment() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedSchool, setSelectedSchool] = useState(\"\");\n  const [selectedSchools, setSelectedSchools] = useState<string[]>([]);\n  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch schools\n  const { data: schoolsData, isLoading: schoolsLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\"],\n  });\n\n  const schools = schoolsData?.schools || [];\n\n  // Fetch all features\n  const { data: allFeatures = [], isLoading: featuresLoading } = useQuery({\n    queryKey: [\"/api/features\"],\n  });\n\n  // Fetch school features for selected school\n  const {\n    data: schoolFeatures = [],\n    isLoading: schoolFeaturesLoading,\n    refetch: refetchSchoolFeatures,\n  } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", selectedSchool, \"features\"],\n    enabled: !!selectedSchool,\n  });\n\n  // Mutation to toggle school feature\n  const toggleFeatureMutation = useMutation({\n    mutationFn: async ({\n      schoolId,\n      featureId,\n      enabled,\n    }: {\n      schoolId: string;\n      featureId: string;\n      enabled: boolean;\n    }) => {\n      return apiRequest(`/api/superadmin/schools/${schoolId}/features`, {\n        method: \"POST\",\n        body: { featureId, enabled },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/superadmin/schools\", selectedSchool, \"features\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Feature assignment updated successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Toggle feature error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update feature assignment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation to assign multiple features to a school\n  const assignFeaturesMutation = useMutation({\n    mutationFn: async ({\n      schoolId,\n      featureIds,\n    }: {\n      schoolId: string;\n      featureIds: string[];\n    }) => {\n      return apiRequest(`/api/superadmin/schools/${schoolId}/features/bulk`, {\n        method: \"POST\",\n        body: { featureIds },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/superadmin/schools\", selectedSchool, \"features\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Features assigned successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Assign features error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to assign features\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredSchools = schools.filter(\n    (school: School) =>\n      school.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      school.shortName.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  const handleToggleFeature = (featureId: string, enabled: boolean) => {\n    if (!selectedSchool) return;\n    toggleFeatureMutation.mutate({\n      schoolId: selectedSchool,\n      featureId,\n      enabled,\n    });\n  };\n\n  // Bulk assign features mutation\n  const bulkAssignFeaturesMutation = useMutation({\n    mutationFn: async ({\n      schoolIds,\n      featureIds,\n    }: {\n      schoolIds: string[];\n      featureIds: string[];\n    }) => {\n      return apiRequest(`/api/superadmin/schools/features/bulk-assign`, {\n        method: \"POST\",\n        body: { schoolIds, featureIds },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/schools\"] });\n      setSelectedSchools([]);\n      setSelectedFeatures([]);\n      toast({\n        title: \"Success\",\n        description: \"Features assigned to schools successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Bulk assign features error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to assign features to schools\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignAllCoreFeatures = () => {\n    if (!selectedSchool) return;\n    const coreFeatureIds = allFeatures\n      .filter((f: Feature) => f.isCore)\n      .map((f: Feature) => f.id);\n    assignFeaturesMutation.mutate({\n      schoolId: selectedSchool,\n      featureIds: coreFeatureIds,\n    });\n  };\n\n  const handleBulkAssign = () => {\n    if (selectedSchools.length === 0 || selectedFeatures.length === 0) {\n      toast({\n        title: \"Selection Required\",\n        description: \"Please select both schools and features to assign\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    bulkAssignFeaturesMutation.mutate({\n      schoolIds: selectedSchools,\n      featureIds: selectedFeatures,\n    });\n  };\n\n  const toggleSchoolSelection = (schoolId: string) => {\n    setSelectedSchools((prev) =>\n      prev.includes(schoolId)\n        ? prev.filter((id) => id !== schoolId)\n        : [...prev, schoolId],\n    );\n  };\n\n  const toggleFeatureSelection = (featureId: string) => {\n    setSelectedFeatures((prev) =>\n      prev.includes(featureId)\n        ? prev.filter((id) => id !== featureId)\n        : [...prev, featureId],\n    );\n  };\n\n  const getFeatureStatus = (featureId: string) => {\n    const schoolFeature = schoolFeatures.find(\n      (sf: SchoolFeature) => sf.featureId === featureId,\n    );\n    return schoolFeature?.enabled || false;\n  };\n\n  if (schoolsLoading || featuresLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-64 bg-gray-200 rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <SuperAdminLayout \n      title=\"Feature Assignment\"\n      subtitle=\"Assign features to schools and manage access permissions\"\n      > \n      <div\n        className=\"container mx-auto p-6 space-y-6\"\n        data-testid=\"feature-assignment-page\"\n      >\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1\n              className=\"text-3xl font-bold text-gray-900\"\n              data-testid=\"page-title\"\n            >\n              Feature Assignment\n            </h1>\n            <p className=\"text-gray-600 mt-2\" data-testid=\"page-description\">\n              Assign features to schools and manage their access permissions\n            </p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"individual\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"individual\" data-testid=\"tab-individual\">\n              Individual Assignment\n            </TabsTrigger>\n            <TabsTrigger value=\"bulk\" data-testid=\"tab-bulk\">\n              Bulk Assignment\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"individual\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* School Selection */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    Select School\n                  </CardTitle>\n                  <CardDescription>\n                    Choose a school to manage its feature assignments\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Search schools...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-schools\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n                    {filteredSchools.map((school: School) => (\n                      <div\n                        key={school.id}\n                        className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                          selectedSchool === school.id\n                            ? \"border-blue-500 bg-blue-50\"\n                            : \"border-gray-200 hover:border-gray-300\"\n                        }`}\n                        onClick={() => setSelectedSchool(school.id)}\n                        data-testid={`school-item-${school.id}`}\n                      >\n                        <h3 className=\"font-medium text-gray-900\">\n                          {school.name}\n                        </h3>\n                        <p className=\"text-sm text-gray-600\">\n                          {school.shortName}\n                        </p>\n                        <div className=\"flex gap-2 mt-2\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {school.type}\n                          </Badge>\n                          <Badge\n                            variant={\n                              school.status === \"ACTIVE\"\n                                ? \"default\"\n                                : \"secondary\"\n                            }\n                            className=\"text-xs\"\n                          >\n                            {school.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Feature Assignment */}\n              <Card className=\"lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Settings className=\"h-5 w-5\" />\n                    Feature Assignment\n                    {selectedSchool && (\n                      <Button\n                        onClick={assignAllCoreFeatures}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"ml-auto\"\n                        disabled={assignFeaturesMutation.isPending}\n                        data-testid=\"button-assign-core-features\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-1\" />\n                        Assign Core Features\n                      </Button>\n                    )}\n                  </CardTitle>\n                  <CardDescription>\n                    {selectedSchool\n                      ? \"Toggle features on/off for the selected school\"\n                      : \"Select a school to manage its features\"}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {selectedSchool ? (\n                    <div className=\"space-y-6\">\n                      {schoolFeaturesLoading ? (\n                        <div className=\"animate-pulse space-y-3\">\n                          {[1, 2, 3, 4, 5].map((i) => (\n                            <div\n                              key={i}\n                              className=\"h-16 bg-gray-200 rounded\"\n                            ></div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {allFeatures.map((feature: Feature) => {\n                            const isEnabled = getFeatureStatus(feature.id);\n                            return (\n                              <div\n                                key={feature.id}\n                                className=\"flex items-center justify-between p-4 border rounded-lg\"\n                                data-testid={`feature-item-${feature.key}`}\n                              >\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <h3 className=\"font-medium text-gray-900\">\n                                      {feature.name}\n                                    </h3>\n                                    {feature.isCore && (\n                                      <Badge\n                                        variant=\"default\"\n                                        className=\"text-xs\"\n                                      >\n                                        Core\n                                      </Badge>\n                                    )}\n                                    <Badge\n                                      variant=\"outline\"\n                                      className=\"text-xs\"\n                                    >\n                                      {feature.category}\n                                    </Badge>\n                                  </div>\n                                  {feature.description && (\n                                    <p className=\"text-sm text-gray-600 mt-1\">\n                                      {feature.description}\n                                    </p>\n                                  )}\n                                </div>\n                                <div className=\"flex items-center gap-3\">\n                                  <div className=\"flex items-center gap-2\">\n                                    {isEnabled ? (\n                                      <Check className=\"h-4 w-4 text-green-500\" />\n                                    ) : (\n                                      <X className=\"h-4 w-4 text-red-500\" />\n                                    )}\n                                    <span className=\"text-sm text-gray-600\">\n                                      {isEnabled ? \"Enabled\" : \"Disabled\"}\n                                    </span>\n                                  </div>\n                                  <Switch\n                                    checked={isEnabled}\n                                    onCheckedChange={(checked) =>\n                                      handleToggleFeature(feature.id, checked)\n                                    }\n                                    disabled={toggleFeatureMutation.isPending}\n                                    data-testid={`switch-feature-${feature.key}`}\n                                  />\n                                </div>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      )}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12\">\n                      <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                        No School Selected\n                      </h3>\n                      <p className=\"text-gray-600\">\n                        Please select a school from the list to manage its\n                        feature assignments.\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"bulk\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Bulk Feature Assignment</CardTitle>\n                <CardDescription>\n                  Assign features to multiple schools at once\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Schools Selection */}\n                  <div>\n                    <h3 className=\"font-medium mb-3\">Select Schools</h3>\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto border rounded-md p-2\">\n                      {schools.map((school: School) => (\n                        <div\n                          key={school.id}\n                          className=\"flex items-center space-x-2 p-2 hover:bg-gray-50 rounded\"\n                        >\n                          <Checkbox\n                            checked={selectedSchools.includes(school.id)}\n                            onCheckedChange={() =>\n                              toggleSchoolSelection(school.id)\n                            }\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-sm\">\n                              {school.name}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {school.shortName}\n                            </div>\n                          </div>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {school.type}\n                          </Badge>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"text-sm text-gray-500 mt-2\">\n                      {selectedSchools.length} school(s) selected\n                    </div>\n                  </div>\n\n                  {/* Features Selection */}\n                  <div>\n                    <h3 className=\"font-medium mb-3\">Select Features</h3>\n                    <div className=\"space-y-2 max-h-64 overflow-y-auto border rounded-md p-2\">\n                      {allFeatures.map((feature: Feature) => (\n                        <div\n                          key={feature.id}\n                          className=\"flex items-center space-x-2 p-2 hover:bg-gray-50 rounded\"\n                        >\n                          <Checkbox\n                            checked={selectedFeatures.includes(feature.id)}\n                            onCheckedChange={() =>\n                              toggleFeatureSelection(feature.id)\n                            }\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"font-medium text-sm\">\n                                {feature.name}\n                              </span>\n                              {feature.isCore && (\n                                <Badge variant=\"default\" className=\"text-xs\">\n                                  Core\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {feature.description}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"text-sm text-gray-500 mt-2\">\n                      {selectedFeatures.length} feature(s) selected\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-center pt-4\">\n                  <Button\n                    onClick={handleBulkAssign}\n                    disabled={\n                      bulkAssignFeaturesMutation.isPending ||\n                      selectedSchools.length === 0 ||\n                      selectedFeatures.length === 0\n                    }\n                    className=\"w-full max-w-md\"\n                  >\n                    {bulkAssignFeaturesMutation.isPending\n                      ? \"Assigning...\"\n                      : `Assign ${selectedFeatures.length} Feature(s) to ${selectedSchools.length} School(s)`}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </SuperAdminLayout>\n  );\n}\n","size_bytes":21214},"client/src/components/superadmin/school-feature-management-modal.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Settings, Link, Save, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface School {\n  id: string;\n  name: string;\n  shortName: string;\n}\n\ninterface MenuLink {\n  name: string;\n  href: string;\n  icon: string;\n  enabled?: boolean;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  menuLinks: MenuLink[];\n  enabled: boolean;\n}\n\ninterface SchoolFeatureManagementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  school: School | null;\n}\n\nexport default function SchoolFeatureManagementModal({ \n  isOpen, \n  onClose, \n  school \n}: SchoolFeatureManagementModalProps) {\n  const [modifiedMenuLinks, setModifiedMenuLinks] = useState<Record<string, MenuLink[]>>({});\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch school features with menu links\n  const { data: schoolFeatures = [], isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", school?.id, \"features-with-menu\"],\n    enabled: !!school?.id && isOpen,\n  });\n\n  // Fetch school feature setup (customized menu links)\n  const { data: schoolFeatureSetup = [] } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", school?.id, \"feature-setup\"],\n    enabled: !!school?.id && isOpen,\n  });\n\n  // Mutation to update school feature setup\n  const updateFeatureSetupMutation = useMutation({\n    mutationFn: async ({ schoolId, featureId, menuLinks }: { \n      schoolId: string; \n      featureId: string; \n      menuLinks: MenuLink[] \n    }) => {\n      return apiRequest(`/api/superadmin/schools/${schoolId}/feature-setup`, {\n        method: \"PUT\",\n        body: { featureId, menuLinks },\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/superadmin/schools\", school?.id, \"feature-setup\"] \n      });\n      toast({\n        title: \"Success\",\n        description: \"Feature menu links updated successfully\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Update feature setup error:\", error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to update feature menu links\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMenuLinkToggle = (featureId: string, linkIndex: number, enabled: boolean) => {\n    const feature = schoolFeatures.find((f: Feature) => f.id === featureId);\n    if (!feature) return;\n\n    const currentLinks = modifiedMenuLinks[featureId] || feature.menuLinks;\n    const updatedLinks = currentLinks.map((link, index) => \n      index === linkIndex ? { ...link, enabled } : link\n    );\n\n    setModifiedMenuLinks(prev => ({\n      ...prev,\n      [featureId]: updatedLinks\n    }));\n  };\n\n  const handleSaveFeature = async (featureId: string) => {\n    if (!school?.id) return;\n    \n    const menuLinks = modifiedMenuLinks[featureId];\n    if (!menuLinks) return;\n\n    await updateFeatureSetupMutation.mutateAsync({\n      schoolId: school.id,\n      featureId,\n      menuLinks\n    });\n  };\n\n  const handleSaveAll = async () => {\n    if (!school?.id) return;\n\n    try {\n      for (const [featureId, menuLinks] of Object.entries(modifiedMenuLinks)) {\n        await updateFeatureSetupMutation.mutateAsync({\n          schoolId: school.id,\n          featureId,\n          menuLinks\n        });\n      }\n      \n      setModifiedMenuLinks({});\n      toast({\n        title: \"Success\",\n        description: \"All feature configurations saved successfully\",\n      });\n    } catch (error) {\n      console.error(\"Save all error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to save some configurations\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getMenuLinksForFeature = (feature: Feature) => {\n    return modifiedMenuLinks[feature.id] || feature.menuLinks || [];\n  };\n\n  const hasModifications = Object.keys(modifiedMenuLinks).length > 0;\n\n  if (!school) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Feature Management - {school.name}\n          </DialogTitle>\n          <DialogDescription>\n            Configure menu links and settings for each feature assigned to this school.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-sm text-gray-600\">\n            Manage which menu links are visible for each feature\n          </div>\n          {hasModifications && (\n            <Button \n              onClick={handleSaveAll} \n              disabled={updateFeatureSetupMutation.isPending}\n              className=\"flex items-center gap-2\"\n            >\n              <Save className=\"h-4 w-4\" />\n              Save All Changes\n            </Button>\n          )}\n        </div>\n\n        <ScrollArea className=\"flex-1 max-h-[60vh]\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"p-4 border rounded-lg animate-pulse\">\n                  <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-100 rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-gray-100 rounded w-1/2\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : schoolFeatures.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Settings className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Features Assigned</h3>\n              <p className=\"text-gray-600\">\n                This school doesn't have any features assigned. Assign features first from the Feature Assignment page.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {schoolFeatures.map((feature: Feature) => {\n                const menuLinks = getMenuLinksForFeature(feature);\n                const hasChanges = modifiedMenuLinks[feature.id];\n                \n                return (\n                  <div key={feature.id} className=\"border rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">{feature.name}</h3>\n                          {feature.description && (\n                            <p className=\"text-sm text-gray-600\">{feature.description}</p>\n                          )}\n                        </div>\n                        <Badge variant={feature.enabled ? \"default\" : \"secondary\"}>\n                          {feature.enabled ? \"Enabled\" : \"Disabled\"}\n                        </Badge>\n                      </div>\n                      \n                      {hasChanges && (\n                        <Button \n                          size=\"sm\" \n                          onClick={() => handleSaveFeature(feature.id)}\n                          disabled={updateFeatureSetupMutation.isPending}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <Save className=\"h-3 w-3\" />\n                          Save\n                        </Button>\n                      )}\n                    </div>\n\n                    {feature.enabled && (\n                      <>\n                        <Separator className=\"mb-4\" />\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 mb-3 flex items-center gap-2\">\n                            <Link className=\"h-4 w-4\" />\n                            Menu Links ({menuLinks.filter(l => l.enabled !== false).length} active)\n                          </h4>\n                          \n                          {menuLinks.length === 0 ? (\n                            <p className=\"text-sm text-gray-500 italic\">\n                              No menu links configured for this feature\n                            </p>\n                          ) : (\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                              {menuLinks.map((link, index) => (\n                                <div \n                                  key={index}\n                                  className={`flex items-center justify-between p-3 border rounded-md ${\n                                    link.enabled === false ? 'bg-gray-50 opacity-60' : 'bg-white'\n                                  }`}\n                                >\n                                  <div className=\"flex items-center gap-2\">\n                                    <i className={`${link.icon} text-gray-500 w-4`}></i>\n                                    <span className=\"font-medium\">{link.name}</span>\n                                  </div>\n                                  \n                                  <Checkbox\n                                    checked={link.enabled !== false}\n                                    onCheckedChange={(checked) => \n                                      handleMenuLinkToggle(feature.id, index, !!checked)\n                                    }\n                                  />\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </ScrollArea>\n\n        <div className=\"flex justify-end gap-2 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={onClose}>\n            <X className=\"h-4 w-4 mr-1\" />\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10610},"client/src/components/superadmin/school-feature-menu-modal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Save, X, Link, Settings, Plus, Edit2, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MenuLink {\n  name: string;\n  href: string;\n  icon: string;\n  enabled?: boolean;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  menuLinks?: MenuLink[];\n}\n\ninterface School {\n  id: string;\n  name: string;\n  shortName: string;\n}\n\ninterface SchoolFeatureMenuModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  school: School | null;\n  feature?: Feature | null;\n}\n\nconst defaultIcons = [\n  \"fas fa-home\",\n  \"fas fa-dashboard\",\n  \"fas fa-chart-bar\",\n  \"fas fa-users\",\n  \"fas fa-cog\",\n  \"fas fa-book\",\n  \"fas fa-graduation-cap\",\n  \"fas fa-calendar\",\n  \"fas fa-file-alt\",\n  \"fas fa-bell\",\n];\n\nexport default function SchoolFeatureMenuModal({ \n  isOpen, \n  onClose, \n  school,\n  feature = null\n}: SchoolFeatureMenuModalProps) {\n  const [selectedFeature, setSelectedFeature] = useState<Feature | null>(feature);\n  const [selectedMenuLinks, setSelectedMenuLinks] = useState<string[]>([]);\n  const [customMenuLinks, setCustomMenuLinks] = useState<MenuLink[]>([]);\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const [newMenuLink, setNewMenuLink] = useState<MenuLink>({\n    name: \"\",\n    href: \"\",\n    icon: \"fas fa-home\",\n    enabled: true,\n  });\n  const [showAddForm, setShowAddForm] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch all features\n  const { data: allFeatures, isLoading: featuresLoading } = useQuery({\n    queryKey: [\"/api/superadmin/features\"],\n    enabled: isOpen,\n  });\n\n  // Fetch current school feature setup for selected feature\n  const { data: schoolFeatureSetup, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", school?.id, \"feature-setup\", selectedFeature?.id],\n    enabled: !!(school?.id && selectedFeature?.id && isOpen),\n  });\n\n  useEffect(() => {\n    if (schoolFeatureSetup && schoolFeatureSetup.menuLinks) {\n      // Parse menu links from JSON string if needed\n      let menuLinks = schoolFeatureSetup.menuLinks;\n      if (typeof menuLinks === 'string') {\n        try {\n          menuLinks = JSON.parse(menuLinks);\n        } catch (e) {\n          console.error('Failed to parse menu links:', e);\n          menuLinks = [];\n        }\n      }\n      \n      // Use only database menu links - no defaults\n      const enabledLinks = (menuLinks || [])\n        .filter((link: MenuLink) => link.enabled)\n        .map((link: MenuLink) => link.name);\n      \n      setSelectedMenuLinks(enabledLinks);\n      setCustomMenuLinks(menuLinks || []);\n    } else {\n      // If no setup exists, start with empty state - no defaults\n      setSelectedMenuLinks([]);\n      setCustomMenuLinks([]);\n    }\n  }, [schoolFeatureSetup, selectedFeature]);\n\n  // Set initial feature if provided\n  useEffect(() => {\n    if (feature && !selectedFeature) {\n      setSelectedFeature(feature);\n    }\n  }, [feature, selectedFeature]);\n\n  // Update school feature setup mutation\n  const updateSchoolFeatureSetupMutation = useMutation({\n    mutationFn: async ({ schoolId, featureId, menuLinks }: {\n      schoolId: string;\n      featureId: string;\n      menuLinks: MenuLink[];\n    }) => {\n      console.log('Updating school feature setup:', { schoolId, featureId, menuLinks });\n      const response = await apiRequest(\"PUT\", `/api/superadmin/schools/${schoolId}/feature-setup`, {\n        featureId,\n        menuLinks\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      console.log('School feature setup updated successfully');\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/superadmin/schools\", school?.id, \"feature-setup\"] \n      });\n      queryClient.invalidateQueries({ \n        queryKey: [\"/api/schools/features\"] \n      });\n      toast({\n        title: \"Success\",\n        description: \"School feature menu links updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      console.error(\"Update school feature setup error:\", error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to update school feature menu links\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleMenuLink = (linkName: string) => {\n    setSelectedMenuLinks(prev => \n      prev.includes(linkName)\n        ? prev.filter(name => name !== linkName)\n        : [...prev, linkName]\n    );\n  };\n\n  const handleSave = () => {\n    if (!school?.id || !selectedFeature?.id) {\n      console.error('Missing school or feature ID:', { schoolId: school?.id, featureId: selectedFeature?.id });\n      return;\n    }\n\n    // Save only the custom menu links with enabled status\n    const menuLinksWithStatus = customMenuLinks.map(link => ({\n      ...link,\n      enabled: selectedMenuLinks.includes(link.name)\n    }));\n\n    console.log('Calling save with data:', {\n      schoolId: school.id,\n      featureId: selectedFeature.id,\n      menuLinks: menuLinksWithStatus\n    });\n\n    updateSchoolFeatureSetupMutation.mutate({\n      schoolId: school.id,\n      featureId: selectedFeature.id,\n      menuLinks: menuLinksWithStatus\n    });\n  };\n\n  const handleAddCustomMenuLink = () => {\n    if (!newMenuLink.name.trim() || !newMenuLink.href.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Menu link name and URL are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Check if name already exists\n    const allExistingNames = customMenuLinks.map(link => link.name);\n\n    if (allExistingNames.includes(newMenuLink.name)) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Menu link name already exists\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setCustomMenuLinks([...customMenuLinks, newMenuLink]);\n    setSelectedMenuLinks([...selectedMenuLinks, newMenuLink.name]);\n    setNewMenuLink({\n      name: \"\",\n      href: \"\",\n      icon: \"fas fa-home\",\n      enabled: true,\n    });\n    setShowAddForm(false);\n  };\n\n  const handleUpdateCustomMenuLink = (index: number, updates: Partial<MenuLink>) => {\n    const updated = customMenuLinks.map((link, i) => \n      i === index ? { ...link, ...updates } : link\n    );\n    setCustomMenuLinks(updated);\n  };\n\n  const handleRemoveCustomMenuLink = (index: number) => {\n    const linkToRemove = customMenuLinks[index];\n    const updated = customMenuLinks.filter((_, i) => i !== index);\n    setCustomMenuLinks(updated);\n    \n    // Remove from selected links as well\n    setSelectedMenuLinks(prev => prev.filter(name => name !== linkToRemove.name));\n    \n    if (editingIndex === index) {\n      setEditingIndex(null);\n    }\n  };\n\n  if (!school) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Configure Menu Links - {school.name}\n          </DialogTitle>\n          <DialogDescription>\n            Select a feature and manage its menu links for this school\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Feature Selection */}\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"feature-select\">Select Feature</Label>\n            <Select \n              value={selectedFeature?.id || \"\"} \n              onValueChange={(value) => {\n                const feature = allFeatures?.find((f: Feature) => f.id === value);\n                setSelectedFeature(feature || null);\n                setSelectedMenuLinks([]);\n                setCustomMenuLinks([]);\n              }}\n            >\n              <SelectTrigger id=\"feature-select\">\n                <SelectValue placeholder=\"Choose a feature to manage\" />\n              </SelectTrigger>\n              <SelectContent>\n                {allFeatures?.map((feature: Feature) => (\n                  <SelectItem key={feature.id} value={feature.id}>\n                    {feature.name} ({feature.key})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {selectedFeature && (\n          <div className=\"flex items-center justify-between bg-blue-50 p-3 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\">{school.shortName}</Badge>\n              <span className=\"text-sm font-medium\">{school.name}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"default\">{selectedFeature.name}</Badge>\n              <Button\n                size=\"sm\"\n                onClick={() => setShowAddForm(true)}\n                className=\"flex items-center gap-1\"\n              >\n                <Plus className=\"h-3 w-3\" />\n                Add Menu Link\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {selectedFeature && (\n        <ScrollArea className=\"flex-1 max-h-[50vh]\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Add New Menu Link Form */}\n              {showAddForm && (\n                <Card className=\"border-dashed border-2 border-blue-300\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm flex items-center justify-between\">\n                      <span>Add New Menu Link</span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => setShowAddForm(false)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"new-name\">Link Name</Label>\n                        <Input\n                          id=\"new-name\"\n                          value={newMenuLink.name}\n                          onChange={(e) => setNewMenuLink({ ...newMenuLink, name: e.target.value })}\n                          placeholder=\"Reports, Analytics, etc.\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"new-href\">Link URL</Label>\n                        <Input\n                          id=\"new-href\"\n                          value={newMenuLink.href}\n                          onChange={(e) => setNewMenuLink({ ...newMenuLink, href: e.target.value })}\n                          placeholder=\"/school/features/feature-key/page\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"new-icon\">Icon Class</Label>\n                        <select\n                          id=\"new-icon\"\n                          value={newMenuLink.icon}\n                          onChange={(e) => setNewMenuLink({ ...newMenuLink, icon: e.target.value })}\n                          className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n                        >\n                          {defaultIcons.map(icon => (\n                            <option key={icon} value={icon}>\n                              {icon}\n                            </option>\n                          ))}\n                        </select>\n                      </div>\n                      \n                      <div className=\"flex items-end\">\n                        <Button onClick={handleAddCustomMenuLink} className=\"w-full\">\n                          <Plus className=\"h-4 w-4 mr-1\" />\n                          Add Menu Link\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Menu Links from Database */}\n              {customMenuLinks.length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Menu Links</h4>\n                  <div className=\"space-y-2\">\n                    {customMenuLinks.map((link, index) => (\n                      <Card \n                        key={`custom-${index}`} \n                        className={`transition-all ${\n                          selectedMenuLinks.includes(link.name) \n                            ? 'ring-2 ring-green-500 bg-green-50' \n                            : 'opacity-60'\n                        }`}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Checkbox\n                              checked={selectedMenuLinks.includes(link.name)}\n                              onCheckedChange={() => handleToggleMenuLink(link.name)}\n                              data-testid={`checkbox-custom-menu-link-${index}`}\n                            />\n                            <div className=\"flex items-center gap-3 flex-1\">\n                              <i className={`${link.icon} text-gray-600`} />\n                              <div>\n                                <div className=\"font-medium text-sm\">{link.name}</div>\n                                <div className=\"text-xs text-gray-500\">{link.href}</div>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge \n                                variant={selectedMenuLinks.includes(link.name) ? \"default\" : \"secondary\"}\n                                className=\"text-xs\"\n                              >\n                                {selectedMenuLinks.includes(link.name) ? \"Enabled\" : \"Disabled\"}\n                              </Badge>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => setEditingIndex(editingIndex === index ? null : index)}\n                              >\n                                <Edit2 className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleRemoveCustomMenuLink(index)}\n                                className=\"text-red-600 hover:text-red-700\"\n                              >\n                                <Trash2 className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          {editingIndex === index && (\n                            <div className=\"mt-4 pt-4 border-t\">\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor={`edit-name-${index}`}>Link Name</Label>\n                                  <Input\n                                    id={`edit-name-${index}`}\n                                    value={link.name}\n                                    onChange={(e) => handleUpdateCustomMenuLink(index, { name: e.target.value })}\n                                    placeholder=\"Dashboard, Reports, Settings...\"\n                                  />\n                                </div>\n                                \n                                <div>\n                                  <Label htmlFor={`edit-href-${index}`}>Link URL</Label>\n                                  <Input\n                                    id={`edit-href-${index}`}\n                                    value={link.href}\n                                    onChange={(e) => handleUpdateCustomMenuLink(index, { href: e.target.value })}\n                                    placeholder=\"/school/features/feature-key/page\"\n                                  />\n                                </div>\n                                \n                                <div>\n                                  <Label htmlFor={`edit-icon-${index}`}>Icon Class</Label>\n                                  <select\n                                    id={`edit-icon-${index}`}\n                                    value={link.icon}\n                                    onChange={(e) => handleUpdateCustomMenuLink(index, { icon: e.target.value })}\n                                    className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n                                  >\n                                    {defaultIcons.map(icon => (\n                                      <option key={icon} value={icon}>\n                                        {icon}\n                                      </option>\n                                    ))}\n                                  </select>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Empty State */}\n              {customMenuLinks.length === 0 && !showAddForm && (\n                <div className=\"text-center py-8\">\n                  <Link className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No Menu Links Yet\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">\n                    Add menu links for this feature to make them available to the school.\n                  </p>\n                  <Button onClick={() => setShowAddForm(true)}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add First Menu Link\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </ScrollArea>\n        )}\n\n        {selectedFeature && (\n        <div className=\"border-t pt-4\">\n          <div className=\"text-sm text-gray-600 mb-3\">\n            {selectedMenuLinks.length} of {customMenuLinks.length} menu links enabled\n\n          </div>\n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={onClose}>\n              <X className=\"h-4 w-4 mr-1\" />\n              Cancel\n            </Button>\n            <Button \n              onClick={() => {\n                console.log('Save button clicked!');\n                handleSave();\n              }}\n              disabled={updateSchoolFeatureSetupMutation.isPending}\n              data-testid=\"button-save-menu-links\"\n            >\n              <Save className=\"h-4 w-4 mr-1\" />\n              {updateSchoolFeatureSetupMutation.isPending ? 'Saving...' : 'Save Menu Links'}\n            </Button>\n          </div>\n        </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":20251},"client/src/components/superadmin/school-feature-selector-modal.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Settings, Link } from \"lucide-react\";\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  menuLinks?: any[];\n}\n\ninterface School {\n  id: string;\n  name: string;\n  shortName: string;\n}\n\ninterface SchoolFeatureSelectorModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  school: School | null;\n  onFeatureSelect: (feature: Feature) => void;\n}\n\nexport default function SchoolFeatureSelectorModal({ \n  isOpen, \n  onClose, \n  school,\n  onFeatureSelect \n}: SchoolFeatureSelectorModalProps) {\n  // Fetch school features - need to get features assigned to this specific school\n  const { data: schoolFeatures, isLoading } = useQuery({\n    queryKey: [\"/api/superadmin/schools\", school?.id, \"features\"],\n    enabled: !!(school?.id && isOpen),\n  });\n\n  const handleFeatureSelect = (feature: Feature) => {\n    onFeatureSelect(feature);\n    onClose();\n  };\n\n  if (!school) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Settings className=\"h-5 w-5\" />\n            Select Feature - {school.name}\n          </DialogTitle>\n          <DialogDescription>\n            Choose a feature to manage its menu links for {school.name}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex items-center justify-between bg-blue-50 p-3 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Badge variant=\"outline\">{school.shortName}</Badge>\n            <span className=\"text-sm font-medium\">{school.name}</span>\n          </div>\n        </div>\n\n        <ScrollArea className=\"flex-1 max-h-[50vh]\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map(i => (\n                <div key={i} className=\"h-16 bg-gray-200 rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {schoolFeatures && schoolFeatures.length > 0 ? (\n                schoolFeatures.map((feature: Feature) => (\n                  <Card \n                    key={feature.id} \n                    className=\"cursor-pointer hover:ring-2 hover:ring-blue-500 transition-all\"\n                    onClick={() => handleFeatureSelect(feature)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                            <Settings className=\"h-5 w-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-sm\">{feature.name}</div>\n                            <div className=\"text-xs text-gray-500\">{feature.description}</div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {feature.menuLinks?.length || 0} Menu Links\n                          </Badge>\n                          <Link className=\"h-4 w-4 text-gray-400\" />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Settings className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                    No Features Available\n                  </h3>\n                  <p className=\"text-gray-600\">\n                    This school doesn't have any assigned features yet. \n                    Please assign features first in the Feature Assignment page.\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </ScrollArea>\n\n        <div className=\"border-t pt-4\">\n          <div className=\"flex justify-end\">\n            <Button variant=\"outline\" onClick={onClose}>\n              <X className=\"h-4 w-4 mr-1\" />\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4910},"client/src/components/superadmin/feature-menu-management-modal.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Trash2, Link, Save, X, Edit2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MenuLink {\n  name: string;\n  href: string;\n  icon: string;\n  enabled?: boolean;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  menuLinks?: MenuLink[];\n  isActive: boolean;\n}\n\ninterface FeatureMenuManagementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  feature: Feature | null;\n}\n\nconst defaultIcons = [\n  \"fas fa-home\",\n  \"fas fa-chart-line\", \n  \"fas fa-edit\",\n  \"fas fa-file-alt\",\n  \"fas fa-chart-bar\",\n  \"fas fa-calendar-check\",\n  \"fas fa-check-square\",\n  \"fas fa-chart-pie\",\n  \"fas fa-money-bill\",\n  \"fas fa-list\",\n  \"fas fa-credit-card\",\n  \"fas fa-file-invoice\",\n  \"fas fa-users\",\n  \"fas fa-user-graduate\",\n  \"fas fa-book\",\n  \"fas fa-cog\",\n];\n\nexport default function FeatureMenuManagementModal({ \n  isOpen, \n  onClose, \n  feature \n}: FeatureMenuManagementModalProps) {\n  const [menuLinks, setMenuLinks] = useState<MenuLink[]>([]);\n  const [editingIndex, setEditingIndex] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (feature) {\n      setMenuLinks(feature.menuLinks || []);\n    }\n  }, [feature]);\n\n  // Update feature menu links mutation\n  const updateFeatureMenuLinksMutation = useMutation({\n    mutationFn: async ({ featureId, menuLinks }: { \n      featureId: string; \n      menuLinks: MenuLink[] \n    }) => {\n      console.log('Updating feature menu links via API:', { featureId, menuLinks });\n      return apiRequest(\"PUT\", `/api/superadmin/features/${featureId}`, {\n        menuLinks\n      });\n    },\n    onSuccess: (response) => {\n      console.log('Feature menu links updated successfully:', response);\n      // Invalidate all related queries to ensure fresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/features\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/superadmin/features\"] });\n      // Refresh the features table\n      queryClient.refetchQueries({ queryKey: [\"/api/features\"] });\n      toast({\n        title: \"Success\",\n        description: \"Feature menu links updated successfully\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      console.error(\"Update feature menu links error:\", error);\n      toast({\n        title: \"Error\", \n        description: \"Failed to update feature menu links\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddMenuLink = () => {\n    // Generate suggested URL based on feature key\n    const featureKey = feature?.key?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'feature';\n    const suggestedHref = `/school/${featureKey}/dashboard`;\n    \n    const newLink: MenuLink = {\n      name: \"\",\n      href: suggestedHref,\n      icon: \"fas fa-home\",\n      enabled: true,\n    };\n    setMenuLinks([...menuLinks, newLink]);\n    setEditingIndex(menuLinks.length);\n  };\n\n  const handleUpdateMenuLink = (index: number, updates: Partial<MenuLink>) => {\n    const updated = menuLinks.map((link, i) => \n      i === index ? { ...link, ...updates } : link\n    );\n    setMenuLinks(updated);\n  };\n\n  const handleRemoveMenuLink = (index: number) => {\n    const updated = menuLinks.filter((_, i) => i !== index);\n    setMenuLinks(updated);\n    if (editingIndex === index) {\n      setEditingIndex(null);\n    }\n  };\n\n  const handleSave = async () => {\n    if (!feature) return;\n\n    // Validate menu links - filter out incomplete ones\n    const validMenuLinks = menuLinks.filter(link => link.name.trim() && link.href.trim());\n    \n    console.log('Saving feature menu links:', { featureId: feature.id, validMenuLinks });\n\n    updateFeatureMenuLinksMutation.mutate({\n      featureId: feature.id,\n      menuLinks: validMenuLinks\n    });\n  };\n\n  const toggleLinkEnabled = (index: number) => {\n    handleUpdateMenuLink(index, { enabled: !menuLinks[index].enabled });\n  };\n\n  if (!feature) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Link className=\"h-5 w-5\" />\n            Menu Links - {feature.name}\n          </DialogTitle>\n          <DialogDescription>\n            Configure menu links that will appear for this feature in school dashboards\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-sm text-gray-600\">\n            Manage navigation menu items for the {feature.name} feature\n          </div>\n          <Button onClick={handleAddMenuLink} className=\"flex items-center gap-2\">\n            <Plus className=\"h-4 w-4\" />\n            Add Menu Link\n          </Button>\n        </div>\n\n        <ScrollArea className=\"flex-1 max-h-[60vh]\">\n          {menuLinks.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Link className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Menu Links</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Add menu links to help users navigate this feature\n              </p>\n              <Button onClick={handleAddMenuLink}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add First Menu Link\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {menuLinks.map((link, index) => (\n                <Card key={index} className={`${link.enabled === false ? 'opacity-60' : ''}`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-sm flex items-center gap-2\">\n                        <i className={link.icon} />\n                        {link.name || `Menu Link ${index + 1}`}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={link.enabled !== false ? \"default\" : \"secondary\"}>\n                          {link.enabled !== false ? \"Enabled\" : \"Disabled\"}\n                        </Badge>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => setEditingIndex(editingIndex === index ? null : index)}\n                        >\n                          <Edit2 className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"ghost\"\n                          onClick={() => handleRemoveMenuLink(index)}\n                          className=\"text-red-600 hover:text-red-700\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  {editingIndex === index && (\n                    <CardContent className=\"pt-0\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor={`name-${index}`}>Link Name</Label>\n                          <Input\n                            id={`name-${index}`}\n                            value={link.name}\n                            onChange={(e) => handleUpdateMenuLink(index, { name: e.target.value })}\n                            placeholder=\"Dashboard, Reports, Settings...\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor={`href-${index}`}>Link URL</Label>\n                          <Input\n                            id={`href-${index}`}\n                            value={link.href}\n                            onChange={(e) => handleUpdateMenuLink(index, { href: e.target.value })}\n                            placeholder={`/school/${feature?.key?.toLowerCase().replace(/[^a-z0-9]/g, '-') || 'feature-name'}/dashboard`}\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor={`icon-${index}`}>Icon Class</Label>\n                          <select\n                            id={`icon-${index}`}\n                            value={link.icon}\n                            onChange={(e) => handleUpdateMenuLink(index, { icon: e.target.value })}\n                            className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm\"\n                          >\n                            {defaultIcons.map(icon => (\n                              <option key={icon} value={icon}>\n                                {icon}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={`enabled-${index}`}\n                            checked={link.enabled !== false}\n                            onCheckedChange={() => toggleLinkEnabled(index)}\n                          />\n                          <Label htmlFor={`enabled-${index}`}>Enabled by default</Label>\n                        </div>\n                      </div>\n                    </CardContent>\n                  )}\n                  \n                  {editingIndex !== index && (\n                    <CardContent className=\"pt-0\">\n                      <div className=\"text-sm text-gray-600\">\n                        <div><strong>URL:</strong> {link.href || 'Not set'}</div>\n                        <div><strong>Icon:</strong> {link.icon}</div>\n                      </div>\n                      <div className=\"text-xs text-blue-600 mt-1\">\n                        💡 Use pattern: /school/{feature?.key?.toLowerCase().replace(/[^a-z0-9]/g, '-')}/page-name\n                      </div>\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n\n        <Separator />\n\n        <div className=\"flex justify-end gap-2\">\n          <Button variant=\"outline\" onClick={onClose}>\n            <X className=\"h-4 w-4 mr-1\" />\n            Cancel\n          </Button>\n          <Button \n            onClick={handleSave}\n            disabled={updateFeatureMenuLinksMutation.isPending}\n          >\n            <Save className=\"h-4 w-4 mr-1\" />\n            {updateFeatureMenuLinksMutation.isPending ? 'Saving...' : 'Save Menu Links'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11620},"server/controllers/staff-management.ts":{"content":"import { Router } from \"express\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\nimport { z } from \"zod\";\nimport { db } from \"../db\";\nimport { \n  staff, \n  staffTypes, \n  staffAssignments, \n  schedules \n} from \"../../shared/schema\";\nimport { authMiddleware } from \"../middleware/auth\";\n\nconst router = Router();\n\n// Apply auth middleware\nrouter.use(authMiddleware);\n\n// Validation schemas\nconst createStaffSchema = z.object({\n  employeeId: z.string().min(1),\n  firstName: z.string().min(2),\n  lastName: z.string().min(2),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  staffTypeId: z.string().min(1),\n  hireDate: z.string().min(1),\n  salary: z.number().optional(),\n});\n\nconst updateStaffSchema = createStaffSchema.partial().extend({\n  id: z.string().min(1),\n});\n\nconst createStaffTypeSchema = z.object({\n  name: z.string().min(1),\n  code: z.string().min(1),\n  description: z.string().optional(),\n});\n\n// Staff CRUD operations\n\n// Get all staff for school\nrouter.get(\"/staff\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    const staffList = await db\n      .select({\n        id: staff.id,\n        employeeId: staff.employeeId,\n        firstName: staff.firstName,\n        lastName: staff.lastName,\n        email: staff.email,\n        phone: staff.phone,\n        hireDate: staff.hireDate,\n        salary: staff.salary,\n        isActive: staff.isActive,\n        staffType: {\n          id: staffTypes.id,\n          name: staffTypes.name,\n          code: staffTypes.code,\n        },\n      })\n      .from(staff)\n      .leftJoin(staffTypes, eq(staff.staffTypeId, staffTypes.id))\n      .where(eq(staff.schoolId, schoolId))\n      .orderBy(desc(staff.createdAt));\n\n    res.json(staffList);\n  } catch (error) {\n    console.error(\"Get staff error:\", error);\n    res.status(500).json({ error: \"Failed to fetch staff\" });\n  }\n});\n\n// Create new staff member\nrouter.post(\"/staff\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    const validatedData = createStaffSchema.parse(req.body);\n\n    // Check if employee ID already exists for this school\n    const existingStaff = await db\n      .select()\n      .from(staff)\n      .where(and(\n        eq(staff.schoolId, schoolId),\n        eq(staff.employeeId, validatedData.employeeId)\n      ))\n      .limit(1);\n\n    if (existingStaff.length > 0) {\n      return res.status(400).json({ error: \"Employee ID already exists\" });\n    }\n\n    const [newStaff] = await db\n      .insert(staff)\n      .values({\n        schoolId,\n        branchId: branchId || schoolId, // Use school ID as branch if no branch\n        employeeId: validatedData.employeeId,\n        firstName: validatedData.firstName,\n        lastName: validatedData.lastName,\n        email: validatedData.email || null,\n        phone: validatedData.phone || null,\n        address: validatedData.address || null,\n        staffTypeId: validatedData.staffTypeId,\n        hireDate: new Date(validatedData.hireDate),\n        salary: validatedData.salary || null,\n      })\n      .returning();\n\n    res.status(201).json(newStaff);\n  } catch (error) {\n    console.error(\"Create staff error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to create staff member\" });\n  }\n});\n\n// Update staff member\nrouter.patch(\"/staff/:id\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const staffId = req.params.id;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    const validatedData = updateStaffSchema.parse({ ...req.body, id: staffId });\n\n    // Check if staff member exists and belongs to this school\n    const existingStaff = await db\n      .select()\n      .from(staff)\n      .where(and(\n        eq(staff.id, staffId),\n        eq(staff.schoolId, schoolId)\n      ))\n      .limit(1);\n\n    if (existingStaff.length === 0) {\n      return res.status(404).json({ error: \"Staff member not found\" });\n    }\n\n    // If updating employee ID, check for duplicates\n    if (validatedData.employeeId) {\n      const duplicateStaff = await db\n        .select()\n        .from(staff)\n        .where(and(\n          eq(staff.schoolId, schoolId),\n          eq(staff.employeeId, validatedData.employeeId),\n          sql`${staff.id} != ${staffId}`\n        ))\n        .limit(1);\n\n      if (duplicateStaff.length > 0) {\n        return res.status(400).json({ error: \"Employee ID already exists\" });\n      }\n    }\n\n    const updateData: any = {};\n    if (validatedData.employeeId) updateData.employeeId = validatedData.employeeId;\n    if (validatedData.firstName) updateData.firstName = validatedData.firstName;\n    if (validatedData.lastName) updateData.lastName = validatedData.lastName;\n    if (validatedData.email !== undefined) updateData.email = validatedData.email || null;\n    if (validatedData.phone !== undefined) updateData.phone = validatedData.phone || null;\n    if (validatedData.address !== undefined) updateData.address = validatedData.address || null;\n    if (validatedData.staffTypeId) updateData.staffTypeId = validatedData.staffTypeId;\n    if (validatedData.hireDate) updateData.hireDate = new Date(validatedData.hireDate);\n    if (validatedData.salary !== undefined) updateData.salary = validatedData.salary || null;\n    updateData.updatedAt = new Date();\n\n    const [updatedStaff] = await db\n      .update(staff)\n      .set(updateData)\n      .where(eq(staff.id, staffId))\n      .returning();\n\n    res.json(updatedStaff);\n  } catch (error) {\n    console.error(\"Update staff error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to update staff member\" });\n  }\n});\n\n// Delete staff member (soft delete by setting isActive to false)\nrouter.delete(\"/staff/:id\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const staffId = req.params.id;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    // Check if staff member exists and belongs to this school\n    const existingStaff = await db\n      .select()\n      .from(staff)\n      .where(and(\n        eq(staff.id, staffId),\n        eq(staff.schoolId, schoolId)\n      ))\n      .limit(1);\n\n    if (existingStaff.length === 0) {\n      return res.status(404).json({ error: \"Staff member not found\" });\n    }\n\n    // Soft delete by setting isActive to false\n    await db\n      .update(staff)\n      .set({ \n        isActive: false,\n        updatedAt: new Date()\n      })\n      .where(eq(staff.id, staffId));\n\n    res.json({ message: \"Staff member deleted successfully\" });\n  } catch (error) {\n    console.error(\"Delete staff error:\", error);\n    res.status(500).json({ error: \"Failed to delete staff member\" });\n  }\n});\n\n// Staff Types CRUD operations\n\n// Get all staff types for school\nrouter.get(\"/staff-types\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    const staffTypesList = await db\n      .select()\n      .from(staffTypes)\n      .where(eq(staffTypes.schoolId, schoolId))\n      .orderBy(staffTypes.name);\n\n    res.json(staffTypesList);\n  } catch (error) {\n    console.error(\"Get staff types error:\", error);\n    res.status(500).json({ error: \"Failed to fetch staff types\" });\n  }\n});\n\n// Create new staff type\nrouter.post(\"/staff-types\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n    const branchId = req.user.branchId;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    const validatedData = createStaffTypeSchema.parse(req.body);\n\n    // Check if code already exists for this school\n    const existingType = await db\n      .select()\n      .from(staffTypes)\n      .where(and(\n        eq(staffTypes.schoolId, schoolId),\n        eq(staffTypes.code, validatedData.code)\n      ))\n      .limit(1);\n\n    if (existingType.length > 0) {\n      return res.status(400).json({ error: \"Staff type code already exists\" });\n    }\n\n    const [newStaffType] = await db\n      .insert(staffTypes)\n      .values({\n        schoolId,\n        branchId: branchId || schoolId,\n        name: validatedData.name,\n        code: validatedData.code,\n        description: validatedData.description || null,\n      })\n      .returning();\n\n    res.status(201).json(newStaffType);\n  } catch (error) {\n    console.error(\"Create staff type error:\", error);\n    if (error instanceof z.ZodError) {\n      return res.status(400).json({ error: \"Validation error\", details: error.errors });\n    }\n    res.status(500).json({ error: \"Failed to create staff type\" });\n  }\n});\n\n// Staff Statistics\nrouter.get(\"/staff/stats\", async (req: any, res) => {\n  try {\n    const schoolId = req.user.schoolId;\n\n    if (!schoolId) {\n      return res.status(400).json({ error: \"School ID required\" });\n    }\n\n    // Get staff counts by type\n    const staffByType = await db\n      .select({\n        typeName: staffTypes.name,\n        count: sql<number>`count(${staff.id})`,\n      })\n      .from(staff)\n      .leftJoin(staffTypes, eq(staff.staffTypeId, staffTypes.id))\n      .where(and(\n        eq(staff.schoolId, schoolId),\n        eq(staff.isActive, true)\n      ))\n      .groupBy(staffTypes.name);\n\n    // Get total counts\n    const [totalStaff] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(staff)\n      .where(eq(staff.schoolId, schoolId));\n\n    const [activeStaff] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(staff)\n      .where(and(\n        eq(staff.schoolId, schoolId),\n        eq(staff.isActive, true)\n      ));\n\n    res.json({\n      total: Number(totalStaff.count),\n      active: Number(activeStaff.count),\n      inactive: Number(totalStaff.count) - Number(activeStaff.count),\n      byType: staffByType.map(item => ({\n        typeName: item.typeName,\n        count: Number(item.count),\n      })),\n    });\n  } catch (error) {\n    console.error(\"Staff stats error:\", error);\n    res.status(500).json({ error: \"Failed to fetch staff statistics\" });\n  }\n});\n\nexport default router;","size_bytes":10697},"server/services/seedStaffTypes.ts":{"content":"import { eq } from \"drizzle-orm\";\nimport { db } from \"../db\";\nimport { staffTypes, schools } from \"../../shared/schema\";\n\n// Default staff types to seed for new schools\nconst defaultStaffTypes = [\n  { name: \"Teacher\", code: \"TCH\", description: \"Teaching staff responsible for classroom instruction\" },\n  { name: \"Administrator\", code: \"ADM\", description: \"Administrative staff managing school operations\" },\n  { name: \"Support Staff\", code: \"SUP\", description: \"Support staff providing auxiliary services\" },\n  { name: \"Principal\", code: \"PRI\", description: \"School principal and leadership team\" },\n  { name: \"Vice Principal\", code: \"VP\", description: \"Assistant principal and deputy leadership\" },\n  { name: \"Head Teacher\", code: \"HT\", description: \"Senior teacher leading department or grade level\" },\n  { name: \"Librarian\", code: \"LIB\", description: \"Library and information services staff\" },\n  { name: \"Counselor\", code: \"COU\", description: \"Student counseling and guidance staff\" },\n  { name: \"Security\", code: \"SEC\", description: \"Security and safety personnel\" },\n  { name: \"Maintenance\", code: \"MNT\", description: \"Facilities and maintenance staff\" },\n];\n\nexport async function seedStaffTypesForSchool(schoolId: string, branchId?: string) {\n  try {\n    // Check if staff types already exist for this school\n    const existingTypes = await db\n      .select()\n      .from(staffTypes)\n      .where(eq(staffTypes.schoolId, schoolId))\n      .limit(1);\n\n    if (existingTypes.length > 0) {\n      console.log(`Staff types already exist for school ${schoolId}`);\n      return;\n    }\n\n    // Create default staff types for the school\n    const staffTypesToInsert = defaultStaffTypes.map(type => ({\n      schoolId,\n      branchId: branchId || schoolId, // Use school ID as branch if no branch provided\n      name: type.name,\n      code: type.code,\n      description: type.description,\n    }));\n\n    await db.insert(staffTypes).values(staffTypesToInsert);\n\n    console.log(`Seeded ${defaultStaffTypes.length} staff types for school ${schoolId}`);\n  } catch (error) {\n    console.error(\"Error seeding staff types:\", error);\n    throw error;\n  }\n}\n\n// Seed staff types for all existing schools that don't have them\nexport async function seedStaffTypesForAllSchools() {\n  try {\n    const allSchools = await db.select({ id: schools.id }).from(schools);\n\n    for (const school of allSchools) {\n      await seedStaffTypesForSchool(school.id);\n    }\n\n    console.log(`Completed seeding staff types for ${allSchools.length} schools`);\n  } catch (error) {\n    console.error(\"Error seeding staff types for all schools:\", error);\n    throw error;\n  }\n}","size_bytes":2640},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuthStore } from \"@/store/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Eye, EyeOff, Shield, ArrowRight } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const login = useAuthStore((state) => state.login);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      login(data.user, data.token);\n      setLocation(\"/superadmin\");\n    },\n    onError: (error: any) => {\n      setError(error?.message || \"Login failed. Please check your credentials.\");\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    \n    if (!email || !password) {\n      setError(\"Please fill in all fields\");\n      return;\n    }\n\n    loginMutation.mutate({\n      email: email.toLowerCase().trim(),\n      password,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50 flex items-center justify-center px-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-0 bg-white/90 backdrop-blur-sm\">\n        <CardHeader className=\"space-y-2 text-center pb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-slate-700 to-slate-900 rounded-2xl flex items-center justify-center shadow-lg\">\n              <Shield className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">Super Admin Portal</CardTitle>\n          <p className=\"text-gray-500 text-sm\">Sign in to access the admin dashboard</p>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" className=\"text-sm font-medium text-gray-700\">\n                Email Address\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"Enter your admin email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"h-11 border-gray-200 focus:border-slate-500 focus:ring-slate-500\"\n                data-testid=\"input-email\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium text-gray-700\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  placeholder=\"Enter your password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"h-11 pr-10 border-gray-200 focus:border-slate-500 focus:ring-slate-500\"\n                  data-testid=\"input-password\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-0 top-0 h-11 px-3 py-2 hover:bg-transparent\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                  ) : (\n                    <Eye className=\"h-4 w-4 text-gray-400\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription data-testid=\"error-message\">{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full h-11 bg-gradient-to-r from-slate-700 to-slate-900 hover:from-slate-800 hover:to-black font-medium\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"flex items-center justify-center pt-4 border-t border-gray-100\">\n            <Link\n              href=\"/school-login\"\n              className=\"flex items-center text-sm text-gray-600 hover:text-blue-600 transition-colors\"\n            >\n              School Portal Login\n              <ArrowRight className=\"w-4 h-4 ml-1\" />\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5586},"client/src/components/school/feature-menu-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface MenuLink {\n  name: string;\n  href: string;\n  icon: string;\n  enabled?: boolean;\n}\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  menuLinks: MenuLink[];\n  enabled: boolean;\n}\n\ninterface FeatureMenuSidebarProps {\n  className?: string;\n}\n\nexport default function FeatureMenuSidebar({ className = \"\" }: FeatureMenuSidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const [expandedFeatures, setExpandedFeatures] = useState<Set<string>>(new Set());\n\n  // Fetch school features with menu links\n  const { data: schoolFeatures = [], isLoading } = useQuery({\n    queryKey: [\"/api/schools/features\"],\n    enabled: !!user && [\"school_admin\", \"teacher\"].includes(user.role || \"\"),\n  });\n\n  // Fetch customized feature setup for menu links\n  const { data: featureSetup = [] } = useQuery({\n    queryKey: [\"/api/schools/feature-setup\"],\n    enabled: !!user && [\"school_admin\", \"teacher\"].includes(user.role || \"\"),\n  });\n\n  const toggleFeature = (featureId: string) => {\n    const newExpanded = new Set(expandedFeatures);\n    if (newExpanded.has(featureId)) {\n      newExpanded.delete(featureId);\n    } else {\n      newExpanded.add(featureId);\n    }\n    setExpandedFeatures(newExpanded);\n  };\n\n  const getMenuLinksForFeature = (feature: Feature) => {\n    // Check if there's a customized setup for this feature\n    const customSetup = featureSetup.find((setup: any) => setup.featureId === feature.id);\n    if (customSetup && customSetup.menuLinks) {\n      return customSetup.menuLinks.filter((link: MenuLink) => link.enabled !== false);\n    }\n    \n    // Fall back to default menu links from feature\n    return (feature.menuLinks || []).filter((link: MenuLink) => link.enabled !== false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-2 ${className}`}>\n        {[1, 2, 3].map(i => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-10 bg-gray-200 rounded mb-2\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!schoolFeatures.length) {\n    return (\n      <div className={`text-center py-8 ${className}`}>\n        <p className=\"text-gray-500 text-sm\">No features available</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {schoolFeatures\n        .filter((feature: Feature) => feature.enabled)\n        .map((feature: Feature) => {\n          const menuLinks = getMenuLinksForFeature(feature);\n          const isExpanded = expandedFeatures.has(feature.id);\n          const hasMenuLinks = menuLinks.length > 0;\n          \n          return (\n            <div key={feature.id} className=\"space-y-1\">\n              <Collapsible open={isExpanded} onOpenChange={() => toggleFeature(feature.id)}>\n                <CollapsibleTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className={`w-full justify-between px-3 py-2 h-auto text-left ${\n                      location.includes(`/school/features/${feature.key}`)\n                        ? \"bg-primary/10 text-primary font-medium\"\n                        : \"text-slate-600 hover:bg-slate-50\"\n                    }`}\n                    data-testid={`feature-${feature.key}`}\n                  >\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <i className=\"fas fa-puzzle-piece w-4\"></i>\n                      <span className=\"truncate\">{feature.name}</span>\n                      {menuLinks.length > 0 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {menuLinks.length}\n                        </Badge>\n                      )}\n                    </div>\n                    {hasMenuLinks && (\n                      isExpanded ? (\n                        <ChevronDown className=\"h-4 w-4\" />\n                      ) : (\n                        <ChevronRight className=\"h-4 w-4\" />\n                      )\n                    )}\n                  </Button>\n                </CollapsibleTrigger>\n                \n                {hasMenuLinks && (\n                  <CollapsibleContent className=\"ml-6 space-y-1\">\n                    {menuLinks.map((link: MenuLink, index: number) => (\n                      <Link\n                        key={index}\n                        href={link.href}\n                        className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm transition-colors ${\n                          location === link.href\n                            ? \"bg-primary/10 text-primary font-medium\"\n                            : \"text-slate-600 hover:bg-slate-50\"\n                        }`}\n                        data-testid={`menu-link-${feature.key}-${index}`}\n                      >\n                        <i className={`${link.icon} w-4 text-xs`}></i>\n                        <span className=\"truncate\">{link.name}</span>\n                      </Link>\n                    ))}\n                  </CollapsibleContent>\n                )}\n              </Collapsible>\n            </div>\n          );\n        })}\n    </div>\n  );\n}","size_bytes":5552},"client/src/components/school/index.ts":{"content":"// Export school components\nexport { default as SchoolLayout } from './layout';","size_bytes":79},"client/src/pages/school/academic-years.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Calendar, Plus, ArrowLeft, Users, BookOpen } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuthStore } from \"@/store/auth\";\n\nconst academicYearSchema = z.object({\n  name: z.string().min(1, \"Academic year name is required\"),\n  startDate: z.string().min(1, \"Start date is required\"),\n  endDate: z.string().min(1, \"End date is required\"),\n});\n\ntype AcademicYearFormData = z.infer<typeof academicYearSchema>;\n\nexport default function AcademicYearsPage() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuthStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [dialogOpen, setDialogOpen] = useState(false);\n\n  const form = useForm<AcademicYearFormData>({\n    resolver: zodResolver(academicYearSchema),\n    defaultValues: {\n      name: \"\",\n      startDate: \"\",\n      endDate: \"\",\n    },\n  });\n\n  // Mock data for now - this would be replaced with actual API calls\n  const { data: academicYears = [], isLoading } = useQuery({\n    queryKey: ['/api/academic-years', user?.schoolId],\n    queryFn: async () => {\n      // This would be replaced with actual API call\n      return [\n        {\n          id: \"1\",\n          name: \"2024/2025\",\n          startDate: \"2024-09-01\",\n          endDate: \"2025-06-30\",\n          isActive: true,\n          isCurrent: true,\n          createdAt: \"2024-08-01\",\n        },\n        {\n          id: \"2\", \n          name: \"2023/2024\",\n          startDate: \"2023-09-01\",\n          endDate: \"2024-06-30\",\n          isActive: true,\n          isCurrent: false,\n          createdAt: \"2023-08-01\",\n        },\n      ];\n    },\n    enabled: !!user?.schoolId,\n  });\n\n  const createAcademicYearMutation = useMutation({\n    mutationFn: async (data: AcademicYearFormData) => {\n      // This would be replaced with actual API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return { ...data, id: Date.now().toString() };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/academic-years'] });\n      setDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Academic year created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create academic year\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AcademicYearFormData) => {\n    createAcademicYearMutation.mutate(data);\n  };\n\n  if (user?.role !== \"school_admin\") {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <p className=\"text-slate-600\">You don't have permission to access this page.</p>\n            <Button onClick={() => setLocation(\"/school\")} className=\"mt-4\">\n              Back to Dashboard\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/school\")}\n                className=\"flex items-center space-x-2\"\n                data-testid=\"button-back\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Dashboard</span>\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-slate-900\">Academic Years</h1>\n                <p className=\"text-sm text-slate-500\">Manage academic years and terms</p>\n              </div>\n            </div>\n            \n            <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"flex items-center space-x-2\" data-testid=\"button-add-academic-year\">\n                  <Plus className=\"w-4 h-4\" />\n                  <span>Add Academic Year</span>\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Academic Year</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Academic Year Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"2025/2026\" {...field} data-testid=\"input-academic-year-name\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"startDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Start Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-start-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"endDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>End Date</FormLabel>\n                          <FormControl>\n                            <Input type=\"date\" {...field} data-testid=\"input-end-date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setDialogOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createAcademicYearMutation.isPending}\n                        data-testid=\"button-submit-academic-year\"\n                      >\n                        {createAcademicYearMutation.isPending ? \"Creating...\" : \"Create\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n              <p className=\"text-slate-600\">Loading academic years...</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {academicYears.map((year: any) => (\n              <Card key={year.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Calendar className=\"w-5 h-5\" />\n                        <span>{year.name}</span>\n                      </CardTitle>\n                      <CardDescription>\n                        {new Date(year.startDate).toLocaleDateString()} - {new Date(year.endDate).toLocaleDateString()}\n                      </CardDescription>\n                    </div>\n                    <div className=\"flex flex-col space-y-1\">\n                      {year.isCurrent && (\n                        <Badge variant=\"default\">Current</Badge>\n                      )}\n                      {year.isActive && (\n                        <Badge variant=\"secondary\">Active</Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"text-center p-3 bg-slate-50 rounded-lg\">\n                        <p className=\"font-semibold text-slate-900\">3</p>\n                        <p className=\"text-slate-600\">Terms</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-slate-50 rounded-lg\">\n                        <p className=\"font-semibold text-slate-900\">36</p>\n                        <p className=\"text-slate-600\">Weeks</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => setLocation(`/school/academic-years/${year.id}/terms`)}\n                        data-testid={`button-manage-terms-${year.id}`}\n                      >\n                        <BookOpen className=\"w-4 h-4 mr-2\" />\n                        Manage Terms\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        onClick={() => setLocation(`/school/academic-years/${year.id}/settings`)}\n                        data-testid={`button-settings-${year.id}`}\n                      >\n                        Settings\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n            \n            {academicYears.length === 0 && (\n              <div className=\"col-span-full text-center py-12\">\n                <Calendar className=\"w-16 h-16 text-slate-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-slate-900 mb-2\">No Academic Years</h3>\n                <p className=\"text-slate-600 mb-4\">Create your first academic year to get started.</p>\n                <Button onClick={() => setDialogOpen(true)}>\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Academic Year\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}","size_bytes":11982},"client/src/pages/school/asset-setup.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Search, Edit, Trash2, Package, DollarSign, Calendar, MapPin, AlertCircle, FileImage } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport SchoolLayout from \"@/components/school/layout\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Asset form schema\nconst assetFormSchema = z.object({\n  name: z.string().min(1, \"Asset name is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  type: z.string().min(1, \"Type is required\"),\n  serialNumber: z.string().optional(),\n  model: z.string().optional(),\n  brand: z.string().optional(),\n  purchaseDate: z.string().optional(),\n  purchasePrice: z.string().optional(),\n  currentValue: z.string().optional(),\n  condition: z.string().min(1, \"Condition is required\"),\n  location: z.string().optional(),\n  assignedTo: z.string().optional(),\n  warrantyExpiry: z.string().optional(),\n  maintenanceSchedule: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype AssetFormData = z.infer<typeof assetFormSchema>;\n\ninterface Asset {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  type: string;\n  serialNumber?: string;\n  model?: string;\n  brand?: string;\n  purchaseDate?: string;\n  purchasePrice?: string;\n  currentValue?: string;\n  condition: string;\n  location?: string;\n  assignedTo?: string;\n  warrantyExpiry?: string;\n  maintenanceSchedule?: string;\n  notes?: string;\n  imageUrl?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst ASSET_CATEGORIES = [\n  \"Equipment\",\n  \"Furniture\",\n  \"Technology\", \n  \"Sports\",\n  \"Laboratory\",\n  \"Transportation\",\n  \"Other\"\n];\n\nconst ASSET_CONDITIONS = [\n  \"Excellent\",\n  \"Good\", \n  \"Fair\",\n  \"Poor\",\n  \"Damaged\"\n];\n\nconst CONDITION_COLORS = {\n  \"Excellent\": \"bg-green-100 text-green-800\",\n  \"Good\": \"bg-blue-100 text-blue-800\", \n  \"Fair\": \"bg-yellow-100 text-yellow-800\",\n  \"Poor\": \"bg-orange-100 text-orange-800\",\n  \"Damaged\": \"bg-red-100 text-red-800\"\n};\n\nexport default function AssetSetupPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [conditionFilter, setConditionFilter] = useState(\"\");\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState<string | null>(null);\n\n  const form = useForm<AssetFormData>({\n    resolver: zodResolver(assetFormSchema),\n    defaultValues: {\n      condition: \"Good\",\n    },\n  });\n\n  // Fetch assets\n  const { data: assets = [], isLoading } = useQuery<Asset[]>({\n    queryKey: [\"/api/schools/assets\", user?.schoolId, categoryFilter, conditionFilter],\n    queryFn: async () => {\n      if (!user?.schoolId) throw new Error(\"No school ID\");\n      \n      const params = new URLSearchParams();\n      if (categoryFilter) params.append(\"category\", categoryFilter);\n      if (conditionFilter) params.append(\"condition\", conditionFilter);\n      params.append(\"isActive\", \"true\");\n      \n      const response = await fetch(`/api/schools/${user.schoolId}/assets?${params}`);\n      if (!response.ok) throw new Error(\"Failed to fetch assets\");\n      return response.json();\n    },\n    enabled: !!user?.schoolId,\n  });\n\n  // Create asset mutation\n  const createAssetMutation = useMutation({\n    mutationFn: async (data: AssetFormData & { imageFile?: File }) => {\n      if (!user?.schoolId) throw new Error(\"No school ID\");\n      \n      const formData = new FormData();\n      const assetData = {\n        ...data,\n        schoolId: user.schoolId,\n        createdBy: user.id,\n        isActive: true,\n      };\n      \n      formData.append('assetData', JSON.stringify(assetData));\n      if (data.imageFile) {\n        formData.append('image', data.imageFile);\n      }\n\n      const response = await fetch('/api/assets', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create asset');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Asset created successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/assets\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      setImageFile(null);\n      setImagePreview(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update asset mutation\n  const updateAssetMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: AssetFormData & { imageFile?: File } }) => {\n      const formData = new FormData();\n      const assetData = {\n        ...data,\n        schoolId: user?.schoolId,\n      };\n      \n      formData.append('assetData', JSON.stringify(assetData));\n      if (data.imageFile) {\n        formData.append('image', data.imageFile);\n      }\n\n      const response = await fetch(`/api/assets/${id}`, {\n        method: 'PUT',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to update asset');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Asset updated successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/assets\"] });\n      setIsDialogOpen(false);\n      setSelectedAsset(null);\n      form.reset();\n      setImageFile(null);\n      setImagePreview(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete asset mutation\n  const deleteAssetMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/assets/${id}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete asset');\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Asset deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/assets\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\", \n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setImageFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImagePreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSubmit = (data: AssetFormData) => {\n    const submitData = { ...data, imageFile: imageFile || undefined };\n    \n    if (selectedAsset) {\n      updateAssetMutation.mutate({ id: selectedAsset.id, data: submitData });\n    } else {\n      createAssetMutation.mutate(submitData);\n    }\n  };\n\n  const handleEdit = (asset: Asset) => {\n    setSelectedAsset(asset);\n    form.reset({\n      name: asset.name,\n      description: asset.description || \"\",\n      category: asset.category,\n      type: asset.type,\n      serialNumber: asset.serialNumber || \"\",\n      model: asset.model || \"\",\n      brand: asset.brand || \"\",\n      purchaseDate: asset.purchaseDate ? new Date(asset.purchaseDate).toISOString().split('T')[0] : \"\",\n      purchasePrice: asset.purchasePrice || \"\",\n      currentValue: asset.currentValue || \"\",\n      condition: asset.condition,\n      location: asset.location || \"\",\n      assignedTo: asset.assignedTo || \"\",\n      warrantyExpiry: asset.warrantyExpiry ? new Date(asset.warrantyExpiry).toISOString().split('T')[0] : \"\",\n      maintenanceSchedule: asset.maintenanceSchedule || \"\",\n      notes: asset.notes || \"\",\n    });\n    setImagePreview(asset.imageUrl || null);\n    setIsDialogOpen(true);\n  };\n\n  const handleAddNew = () => {\n    setSelectedAsset(null);\n    form.reset({\n      condition: \"Good\",\n    });\n    setImageFile(null);\n    setImagePreview(null);\n    setIsDialogOpen(true);\n  };\n\n  const filteredAssets = assets.filter((asset) =>\n    asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    asset.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    asset.type.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    asset.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    \"\"\n  );\n\n  // Prevent access for non-school admins\n  if (user?.role !== \"school_admin\") {\n    return (\n      <SchoolLayout title=\"Access Denied\" subtitle=\"Asset Management\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-red-600\">\n              <AlertCircle className=\"h-5 w-5\" />\n              Access Denied\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>Only school administrators can access asset management.</p>\n          </CardContent>\n        </Card>\n      </SchoolLayout>\n    );\n  }\n\n  return (\n    <SchoolLayout title=\"Asset Management\" subtitle=\"Manage school assets and equipment\">\n      <div className=\"space-y-6\">\n        {/* Header with actions */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Assets</h1>\n            <p className=\"text-gray-600\">Track and manage school equipment and resources</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={handleAddNew} className=\"flex items-center gap-2\">\n                <Plus className=\"h-4 w-4\" />\n                Add Asset\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {selectedAsset ? \"Edit Asset\" : \"Add New Asset\"}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Asset Name *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Laptop, Desk, Projector\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"category\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {ASSET_CATEGORIES.map((category) => (\n                                <SelectItem key={category} value={category}>\n                                  {category}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"type\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Type *</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Dell Laptop, Office Chair\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"condition\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Condition *</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select condition\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {ASSET_CONDITIONS.map((condition) => (\n                                <SelectItem key={condition} value={condition}>\n                                  {condition}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Additional details about the asset\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"brand\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Brand</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Dell, HP\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"model\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Model</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Latitude 5520\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"serialNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Serial Number</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., ABC123456789\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"purchaseDate\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Purchase Date</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"purchasePrice\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Purchase Price</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"currentValue\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Current Value</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"warrantyExpiry\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Warranty Expiry</FormLabel>\n                          <FormControl>\n                            <Input {...field} type=\"date\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"location\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Location</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., Computer Lab, Office A\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"assignedTo\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Assigned To</FormLabel>\n                          <FormControl>\n                            <Input {...field} placeholder=\"e.g., John Doe, IT Department\" />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"maintenanceSchedule\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Maintenance Schedule</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Maintenance requirements and schedule\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Notes</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} placeholder=\"Additional notes or comments\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Image upload */}\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"image\" className=\"flex items-center gap-2\">\n                      <FileImage className=\"h-4 w-4\" />\n                      Asset Image\n                    </Label>\n                    <Input\n                      id=\"image\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageChange}\n                      className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                    />\n                    {imagePreview && (\n                      <div className=\"mt-2\">\n                        <img\n                          src={imagePreview}\n                          alt=\"Asset preview\"\n                          className=\"w-32 h-32 object-cover rounded-lg border\"\n                        />\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex justify-end gap-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createAssetMutation.isPending || updateAssetMutation.isPending}\n                    >\n                      {createAssetMutation.isPending || updateAssetMutation.isPending ? \"Saving...\" : \"Save Asset\"}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters and Search */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Search className=\"h-5 w-5\" />\n              Search & Filter\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"search\">Search Assets</Label>\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by name, category, type, location...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"category-filter\">Category</Label>\n                <Select value={categoryFilter || \"all\"} onValueChange={(value) => setCategoryFilter(value === \"all\" ? \"\" : value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All categories</SelectItem>\n                    {ASSET_CATEGORIES.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"condition-filter\">Condition</Label>\n                <Select value={conditionFilter || \"all\"} onValueChange={(value) => setConditionFilter(value === \"all\" ? \"\" : value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"All conditions\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All conditions</SelectItem>\n                    {ASSET_CONDITIONS.map((condition) => (\n                      <SelectItem key={condition} value={condition}>\n                        {condition}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Assets Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Package className=\"h-5 w-5\" />\n              Assets ({filteredAssets.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p>Loading assets...</p>\n              </div>\n            ) : filteredAssets.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">No assets found</p>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  {searchTerm || categoryFilter || conditionFilter\n                    ? \"Try adjusting your search or filters\"\n                    : \"Start by adding your first asset\"}\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Asset</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Condition</TableHead>\n                      <TableHead>Location</TableHead>\n                      <TableHead>Value</TableHead>\n                      <TableHead>Purchase Date</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredAssets.map((asset) => (\n                      <TableRow key={asset.id}>\n                        <TableCell>\n                          <div className=\"flex items-center gap-3\">\n                            {asset.imageUrl && (\n                              <img\n                                src={asset.imageUrl}\n                                alt={asset.name}\n                                className=\"w-10 h-10 rounded-lg object-cover\"\n                              />\n                            )}\n                            <div>\n                              <div className=\"font-medium\">{asset.name}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {asset.brand} {asset.model}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{asset.category}</div>\n                            <div className=\"text-sm text-gray-500\">{asset.type}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={CONDITION_COLORS[asset.condition as keyof typeof CONDITION_COLORS]}>\n                            {asset.condition}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            {asset.location && <MapPin className=\"h-3 w-3 text-gray-400\" />}\n                            {asset.location || \"-\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            {asset.currentValue && <DollarSign className=\"h-3 w-3 text-gray-400\" />}\n                            {asset.currentValue ? `$${parseFloat(asset.currentValue).toLocaleString()}` : \"-\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-1\">\n                            {asset.purchaseDate && <Calendar className=\"h-3 w-3 text-gray-400\" />}\n                            {asset.purchaseDate\n                              ? new Date(asset.purchaseDate).toLocaleDateString()\n                              : \"-\"}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEdit(asset)}\n                              className=\"h-8 w-8 p-0\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => deleteAssetMutation.mutate(asset.id)}\n                              className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n                              disabled={deleteAssetMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":31898},"client/src/pages/school/block-manager.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormField, FormItem, FormLabel, FormControl, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup, SelectLabel } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Building2, Plus, Settings, Trash2, Edit, Home, MapPin, Users, GraduationCap } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertSchoolBuildingSchema } from \"@shared/schema\";\nimport { useAuthStore } from \"@/store/auth\";\nimport SchoolLayout from \"@/components/school/layout\";\n\ntype SchoolBuilding = {\n  id: string;\n  schoolId: string;\n  branchId?: string;\n  buildingName: string;\n  buildingCode?: string;\n  description?: string;\n  totalFloors: number;\n  rooms: Array<{\n    id: string;\n    name: string;\n    floor: number;\n    type: string;\n    capacity: number;\n    isActive: boolean;\n    assignedGrade?: string;\n  }>;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n};\n\nconst buildingFormSchema = insertSchoolBuildingSchema.extend({\n  totalRooms: z.number().min(1, \"At least 1 room is required\").max(100, \"Maximum 100 rooms allowed\"),\n});\n\ntype BuildingFormData = z.infer<typeof buildingFormSchema>;\n\nconst roomEditSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Room name is required\"),\n  floor: z.number().min(1, \"Floor must be at least 1\"),\n  type: z.string().min(1, \"Room type is required\"),\n  customType: z.string().optional(),\n  capacity: z.number().min(1, \"Capacity must be at least 1\"),\n  isActive: z.boolean(),\n});\n\n// Room type options with grouping\nconst roomTypeOptions = [\n  {\n    group: \"Classrooms\",\n    options: [\n      { value: \"classroom\", label: \"Standard Classroom\" },\n      { value: \"lecture_hall\", label: \"Lecture Hall\" },\n      { value: \"seminar_room\", label: \"Seminar Room\" },\n      { value: \"tutorial_room\", label: \"Tutorial Room\" },\n    ]\n  },\n  {\n    group: \"Laboratories\",\n    options: [\n      { value: \"computer_lab\", label: \"Computer Lab\" },\n      { value: \"chemistry_lab\", label: \"Chemistry Lab\" },\n      { value: \"physics_lab\", label: \"Physics Lab\" },\n      { value: \"biology_lab\", label: \"Biology Lab\" },\n      { value: \"language_lab\", label: \"Language Lab\" },\n      { value: \"science_lab\", label: \"General Science Lab\" },\n      { value: \"engineering_lab\", label: \"Engineering Lab\" },\n      { value: \"art_studio\", label: \"Art Studio\" },\n    ]\n  },\n  {\n    group: \"Support Facilities\",\n    options: [\n      { value: \"library\", label: \"Library\" },\n      { value: \"staff_room\", label: \"Staff Room\" },\n      { value: \"office\", label: \"Office\" },\n      { value: \"reception\", label: \"Reception\" },\n      { value: \"storage\", label: \"Storage Room\" },\n      { value: \"cafeteria\", label: \"Cafeteria\" },\n      { value: \"auditorium\", label: \"Auditorium\" },\n      { value: \"gymnasium\", label: \"Gymnasium\" },\n      { value: \"medical_room\", label: \"Medical Room\" },\n      { value: \"meeting_room\", label: \"Meeting Room\" },\n    ]\n  },\n  {\n    group: \"Other\",\n    options: [\n      { value: \"other\", label: \"Other (Custom)\" },\n    ]\n  }\n];\n\ntype RoomEditData = z.infer<typeof roomEditSchema>;\n\nexport default function BlockManager() {\n  const { user } = useAuthStore();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [showRoomDialog, setShowRoomDialog] = useState(false);\n  const [showClassAssignDialog, setShowClassAssignDialog] = useState(false);\n  const [selectedBuilding, setSelectedBuilding] = useState<SchoolBuilding | null>(null);\n  const [editingRoom, setEditingRoom] = useState<RoomEditData | null>(null);\n  const [assigningRoom, setAssigningRoom] = useState<any>(null);\n  const [selectedGrade, setSelectedGrade] = useState<string>(\"\");\n\n  const buildingForm = useForm<BuildingFormData>({\n    resolver: zodResolver(buildingFormSchema),\n    defaultValues: {\n      buildingName: \"\",\n      buildingCode: undefined,\n      description: undefined,\n      totalFloors: 1,\n      totalRooms: 1,\n      schoolId: user?.schoolId || \"\",\n      branchId: user?.branchId,\n      rooms: [],\n      isActive: true,\n    },\n  });\n\n  const roomForm = useForm<RoomEditData>({\n    resolver: zodResolver(roomEditSchema),\n    defaultValues: {\n      id: \"\",\n      name: \"\",\n      floor: 1,\n      type: \"classroom\",\n      customType: \"\",\n      capacity: 30,\n      isActive: true,\n    },\n  });\n\n  // Watch the type field to show/hide custom input\n  const watchedType = roomForm.watch(\"type\");\n\n  // Fetch grade sections for class assignment\n  const { data: gradeSections = [] } = useQuery<any[]>({\n    queryKey: [`/api/schools/${user?.schoolId}/grade-sections`],\n    enabled: !!user?.schoolId,\n  });\n\n  // Fetch buildings\n  const { data: buildings = [], isLoading } = useQuery<SchoolBuilding[]>({\n    queryKey: [`/api/schools/${user?.schoolId}/buildings`],\n    enabled: !!user?.schoolId,\n  });\n\n  // Create building mutation\n  const createBuildingMutation = useMutation({\n    mutationFn: (data: BuildingFormData) =>\n      apiRequest(\"POST\", `/api/schools/${user?.schoolId}/buildings`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/schools/${user?.schoolId}/buildings`] });\n      toast({\n        title: \"Success\",\n        description: \"Building created successfully\",\n      });\n      setShowAddDialog(false);\n      buildingForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create building\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update building mutation\n  const updateBuildingMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<SchoolBuilding> }) =>\n      apiRequest(\"PUT\", `/api/buildings/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/schools/${user?.schoolId}/buildings`] });\n      toast({\n        title: \"Success\",\n        description: \"Building updated successfully\",\n      });\n      setShowRoomDialog(false);\n      setSelectedBuilding(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update building\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete building mutation\n  const deleteBuildingMutation = useMutation({\n    mutationFn: (id: string) =>\n      apiRequest(\"DELETE\", `/api/buildings/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/schools/${user?.schoolId}/buildings`] });\n      toast({\n        title: \"Success\",\n        description: \"Building deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete building\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onCreateSubmit = (data: BuildingFormData) => {\n    createBuildingMutation.mutate(data);\n  };\n\n  const handleRoomSetup = (building: SchoolBuilding) => {\n    setSelectedBuilding(building);\n    setShowRoomDialog(true);\n  };\n\n  const handleEditRoom = (room: any) => {\n    const roomData = {\n      ...room,\n      customType: \"\",\n    };\n    setEditingRoom(roomData);\n    roomForm.reset(roomData);\n  };\n\n  const handleSaveRoom = (data: RoomEditData) => {\n    if (!selectedBuilding) return;\n\n    // Use custom type if \"other\" is selected and customType is provided\n    const finalType = data.type === \"other\" && data.customType?.trim() \n      ? data.customType.trim() \n      : data.type;\n\n    const updatedRooms = selectedBuilding.rooms.map(room =>\n      room.id === data.id ? { \n        ...room, \n        name: data.name,\n        floor: data.floor,\n        type: finalType,\n        capacity: data.capacity,\n        isActive: data.isActive\n      } : room\n    );\n\n    updateBuildingMutation.mutate({\n      id: selectedBuilding.id,\n      data: { rooms: updatedRooms as any }\n    });\n\n    setEditingRoom(null);\n  };\n\n  const handleDeleteRoom = (roomId: string) => {\n    if (!selectedBuilding) return;\n\n    const updatedRooms = selectedBuilding.rooms.filter(room => room.id !== roomId);\n\n    updateBuildingMutation.mutate({\n      id: selectedBuilding.id,\n      data: { rooms: updatedRooms as any }\n    });\n  };\n\n  const handleAssignClass = (room: any) => {\n    setAssigningRoom(room);\n    setSelectedGrade(room.assignedGrade || \"\");\n    setShowClassAssignDialog(true);\n  };\n\n  const handleSaveClassAssignment = () => {\n    if (!selectedBuilding || !assigningRoom) return;\n\n    const updatedRooms = selectedBuilding.rooms.map(room =>\n      room.id === assigningRoom.id ? { \n        ...room, \n        assignedGrade: selectedGrade || undefined\n      } : room\n    );\n\n    updateBuildingMutation.mutate({\n      id: selectedBuilding.id,\n      data: { rooms: updatedRooms as any }\n    });\n\n    setShowClassAssignDialog(false);\n    setAssigningRoom(null);\n    setSelectedGrade(\"\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-lg\">Loading buildings...</div>\n      </div>\n    );\n  }\n\n  return (\n    <SchoolLayout title=\"Block Management\" subtitle=\"Manage school premises\">\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Building2 className=\"h-8 w-8 text-blue-600\" />\n          <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Manage School Premises</h1>\n        </div>\n        \n        <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\" data-testid=\"button-add-building\">\n              <Plus className=\"h-4 w-4\" />\n              Add Building/Block\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Building/Block</DialogTitle>\n            </DialogHeader>\n            <Form {...buildingForm}>\n              <form onSubmit={buildingForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={buildingForm.control}\n                  name=\"buildingName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Building Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Main Block, Science Building\" {...field} data-testid=\"input-building-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={buildingForm.control}\n                  name=\"buildingCode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Building Code</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., MB, SB, AB\" {...field} value={field.value || \"\"} data-testid=\"input-building-code\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={buildingForm.control}\n                  name=\"totalFloors\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Floors</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"10\"\n                          {...field}\n                          value={field.value || 1}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-total-floors\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={buildingForm.control}\n                  name=\"totalRooms\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Number of Rooms *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          max=\"100\"\n                          placeholder=\"Enter total number of rooms\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-total-rooms\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={buildingForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Brief description of the building...\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"textarea-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowAddDialog(false)}\n                    data-testid=\"button-cancel-building\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createBuildingMutation.isPending}\n                    data-testid=\"button-submit-building\"\n                  >\n                    {createBuildingMutation.isPending ? \"Creating...\" : \"Create Building\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Buildings Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {buildings.map((building: SchoolBuilding) => (\n          <Card key={building.id} className=\"relative\" data-testid={`card-building-${building.id}`}>\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Home className=\"h-5 w-5 text-blue-600\" />\n                  {building.buildingName}\n                </CardTitle>\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleRoomSetup(building)}\n                    data-testid={`button-room-setup-${building.id}`}\n                  >\n                    <Settings className=\"h-4 w-4\" />\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-red-600 hover:text-red-700\"\n                        data-testid={`button-delete-building-${building.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Building</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete \"{building.buildingName}\"? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteBuildingMutation.mutate(building.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n              {building.buildingCode && (\n                <Badge variant=\"secondary\" className=\"w-fit\">\n                  {building.buildingCode}\n                </Badge>\n              )}\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center gap-4 text-sm text-gray-600\">\n                <div className=\"flex items-center gap-1\">\n                  <Building2 className=\"h-4 w-4\" />\n                  <span>{building.totalFloors} Floor{building.totalFloors > 1 ? 's' : ''}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <MapPin className=\"h-4 w-4\" />\n                  <span>{building.rooms?.length || 0} Rooms</span>\n                </div>\n              </div>\n\n              {building.description && (\n                <p className=\"text-sm text-gray-600 line-clamp-2\">\n                  {building.description}\n                </p>\n              )}\n\n              <div className=\"pt-2\">\n                <div className=\"text-xs text-gray-500\">\n                  Active Rooms: {building.rooms?.filter(r => r.isActive).length || 0}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {buildings.length === 0 && (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Building2 className=\"h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No Buildings Yet</h3>\n            <p className=\"text-gray-500 text-center mb-4\">\n              Create your first building/block to start organizing your school premises.\n            </p>\n            <Button\n              onClick={() => setShowAddDialog(true)}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-create-first-building\"\n            >\n              <Plus className=\"h-4 w-4\" />\n              Add Your First Building\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Room Management Dialog */}\n      <Dialog open={showRoomDialog} onOpenChange={setShowRoomDialog}>\n        <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5\" />\n              Room Setup - {selectedBuilding?.buildingName}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {selectedBuilding?.rooms?.map((room) => (\n                <Card key={room.id} className={`${!room.isActive ? 'opacity-50' : ''}`} data-testid={`card-room-${room.id}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium\">{room.name}</h4>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditRoom(room)}\n                          data-testid={`button-edit-room-${room.id}`}\n                        >\n                          <Edit className=\"h-3 w-3\" />\n                        </Button>\n                        {(room.type === 'classroom' || room.type === 'lecture_hall' || room.type === 'seminar_room' || room.type === 'tutorial_room') && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleAssignClass(room)}\n                            data-testid={`button-assign-class-${room.id}`}\n                            title=\"Assign Class\"\n                          >\n                            <GraduationCap className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"text-red-600\"\n                              data-testid={`button-delete-room-${room.id}`}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Room</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{room.name}\"?\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => handleDeleteRoom(room.id)}\n                                className=\"bg-red-600 hover:bg-red-700\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </div>\n                    <div className=\"text-xs space-y-1 text-gray-600\">\n                      <div>Floor: {room.floor}</div>\n                      <div>Type: {room.type}</div>\n                      <div>Capacity: {room.capacity}</div>\n                      <div>Status: {room.isActive ? 'Active' : 'Inactive'}</div>\n                      {room.assignedGrade && (\n                        <div className=\"text-blue-600 font-medium\">\n                          Assigned: {gradeSections.find(g => g.id === room.assignedGrade)?.name || room.assignedGrade}\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              )) || (\n                <div className=\"col-span-full text-center py-8 text-gray-500\">\n                  No rooms available\n                </div>\n              )}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Room Edit Dialog */}\n      {editingRoom && (\n        <Dialog open={!!editingRoom} onOpenChange={() => setEditingRoom(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Room</DialogTitle>\n            </DialogHeader>\n            <Form {...roomForm}>\n              <form onSubmit={roomForm.handleSubmit(handleSaveRoom)} className=\"space-y-4\">\n                <FormField\n                  control={roomForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Room Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-room-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={roomForm.control}\n                    name=\"floor\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Floor</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                            data-testid=\"input-room-floor\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={roomForm.control}\n                    name=\"capacity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Capacity</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            min=\"1\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                            data-testid=\"input-room-capacity\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={roomForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Room Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-room-type\">\n                            <SelectValue placeholder=\"Select room type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {roomTypeOptions.map((group) => (\n                            <SelectGroup key={group.group}>\n                              <SelectLabel>{group.group}</SelectLabel>\n                              {group.options.map((option) => (\n                                <SelectItem key={option.value} value={option.value}>\n                                  {option.label}\n                                </SelectItem>\n                              ))}\n                            </SelectGroup>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Custom type input - shown when \"other\" is selected */}\n                {watchedType === \"other\" && (\n                  <FormField\n                    control={roomForm.control}\n                    name=\"customType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Custom Room Type</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            placeholder=\"Enter custom room type\"\n                            data-testid=\"input-custom-room-type\" \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setEditingRoom(null)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateBuildingMutation.isPending}>\n                    {updateBuildingMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Class Assignment Dialog */}\n      <Dialog open={showClassAssignDialog} onOpenChange={setShowClassAssignDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-5 w-5\" />\n              Assign Class to {assigningRoom?.name}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-gray-600 mb-4\">\n              Select a grade section to assign to this classroom. Only one grade can be assigned per room.\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"radio\"\n                  id=\"no-assignment\"\n                  name=\"gradeAssignment\"\n                  value=\"\"\n                  checked={selectedGrade === \"\"}\n                  onChange={(e) => setSelectedGrade(e.target.value)}\n                  className=\"w-4 h-4 text-blue-600\"\n                />\n                <label htmlFor=\"no-assignment\" className=\"text-sm font-medium\">\n                  No Assignment (General Use)\n                </label>\n              </div>\n\n              {gradeSections.map((section: any) => (\n                <div key={section.id} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"radio\"\n                    id={`grade-${section.id}`}\n                    name=\"gradeAssignment\"\n                    value={section.id}\n                    checked={selectedGrade === section.id}\n                    onChange={(e) => setSelectedGrade(e.target.value)}\n                    className=\"w-4 h-4 text-blue-600\"\n                  />\n                  <label htmlFor={`grade-${section.id}`} className=\"text-sm font-medium\">\n                    {section.name}\n                    {section.code && (\n                      <span className=\"ml-2 text-xs text-gray-500\">({section.code})</span>\n                    )}\n                  </label>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowClassAssignDialog(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSaveClassAssignment}\n                disabled={updateBuildingMutation.isPending}\n              >\n                {updateBuildingMutation.isPending ? \"Saving...\" : \"Save Assignment\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n      </SchoolLayout>\n  );\n}","size_bytes":32421},"client/src/pages/school/classes.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function ClassesPage() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/school\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Dashboard</span>\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-slate-900\">Classes & Subjects</h1>\n                <p className=\"text-sm text-slate-500\">Manage classes and subjects</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Classes & Subjects</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-slate-600\">This page is coming soon...</p>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":1567},"client/src/pages/school/enhanced-asset-setup.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Plus, Search, Filter, Eye, DollarSign, Users, Package, Edit, Trash2, History, ChevronDown, ChevronRight, Store } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SchoolLayout from \"@/components/school/layout\";\n\n// Enhanced Asset form schema\nconst assetFormSchema = z.object({\n  name: z.string().min(1, \"Asset name is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  type: z.string().min(1, \"Type is required\"),\n  serialNumber: z.string().optional(),\n  model: z.string().optional(),\n  brand: z.string().optional(),\n  condition: z.string().min(1, \"Condition is required\"),\n  location: z.string().optional(),\n  totalQuantity: z.number().min(1, \"Quantity must be at least 1\"),\n  warrantyExpiry: z.string().optional(),\n  maintenanceSchedule: z.string().optional(),\n  notes: z.string().optional(),\n});\n\n// Purchase form schema\nconst purchaseFormSchema = z.object({\n  purchaseDate: z.string().min(1, \"Purchase date is required\"),\n  purchasePrice: z.number().min(0, \"Price must be positive\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  supplier: z.string().optional(),\n  invoiceNumber: z.string().optional(),\n  notes: z.string().optional(),\n});\n\n// Assignment form schema\nconst assignmentFormSchema = z.object({\n  assignmentType: z.enum([\"user\", \"class\", \"location\"]),\n  assignedTo: z.string().optional(),\n  location: z.string().min(1, \"Location is required\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  assignedDate: z.string().min(1, \"Assignment date is required\"),\n  notes: z.string().optional(),\n});\n\n// Supplier form schema (Updated to match Supplier interface)\nconst supplierFormSchema = z.object({\n  name: z.string().min(1, \"Supplier name is required\"),\n  contactPerson: z.string().optional(),\n  email: z.string().email(\"Invalid email\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  productTypes: z.array(z.string()).min(1, \"At least one product type is required\"),\n});\n\ntype AssetFormData = z.infer<typeof assetFormSchema>;\ntype PurchaseFormData = z.infer<typeof purchaseFormSchema>;\ntype AssignmentFormData = z.infer<typeof assignmentFormSchema>;\ntype SupplierFormData = z.infer<typeof supplierFormSchema>;\n\ninterface Asset {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  type: string;\n  serialNumber?: string;\n  model?: string;\n  brand?: string;\n  condition: string;\n  location?: string;\n  totalQuantity: number;\n  availableQuantity: number;\n  warrantyExpiry?: string;\n  maintenanceSchedule?: string;\n  notes?: string;\n  imageUrl?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface AssetPurchase {\n  id: string;\n  purchaseDate: string;\n  purchasePrice: number;\n  quantity: number;\n  totalCost: number;\n  supplier?: string;\n  invoiceNumber?: string;\n  notes?: string;\n  createdAt: string;\n}\n\ninterface AssetAssignment {\n  id: string;\n  assignmentType: string;\n  assignedTo?: string;\n  location: string;\n  quantity: number;\n  assignedDate: string;\n  returnDate?: string;\n  status: string;\n  notes?: string;\n  createdAt: string;\n}\n\ninterface GradeSection {\n  id: string;\n  name: string;\n  code: string;\n  type: string;\n}\n\ninterface SchoolBuilding {\n  id: string;\n  buildingName: string;\n  buildingCode?: string;\n  rooms: Array<{\n    id: string;\n    name: string;\n    floor: number;\n    type: string;\n    capacity: number;\n    isActive: boolean;\n    assignedGrade?: string;\n  }>;\n}\n\ninterface LocationOption {\n  value: string;\n  label: string;\n  building: string;\n  room: string;\n  type: string;\n}\n\ninterface Supplier {\n  id: string;\n  name: string;\n  contactPerson?: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  productTypes: string[];\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\n\n\nexport default function EnhancedAssetSetup() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showPurchaseDialog, setShowPurchaseDialog] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [showSupplierDialog, setShowSupplierDialog] = useState(false);\n  const [filters, setFilters] = useState({ category: \"all\", condition: \"all\" });\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Fetch assets\n  const { data: assets = [], isLoading: assetsLoading, error: assetsError } = useQuery({\n    queryKey: [\"/api/schools\", user?.schoolId, \"assets\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Debug logging\n  console.log(\"Assets data:\", assets);\n  console.log(\"Assets loading:\", assetsLoading);\n  console.log(\"Assets error:\", assetsError);\n  console.log(\"User school ID:\", user?.schoolId);\n\n  // Fetch grade sections for location dropdown\n  const { data: gradeSections = [] } = useQuery<GradeSection[]>({\n    queryKey: [\"/api/schools\", user?.schoolId, \"grade-sections\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Fetch school buildings with rooms for location dropdown\n  const { data: buildings = [] } = useQuery<SchoolBuilding[]>({\n    queryKey: [\"/api/schools\", user?.schoolId, \"buildings\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Create location options from buildings and rooms\n  const locationOptions: LocationOption[] = React.useMemo(() => {\n    const options: LocationOption[] = [];\n    \n    buildings.forEach((building) => {\n      if (building.rooms && building.rooms.length > 0) {\n        building.rooms\n          .filter(room => room.isActive)\n          .forEach((room) => {\n            // For classroom-type rooms with assigned grades, show the grade name\n            let displayType = room.type;\n            if (room.assignedGrade && (room.type === 'classroom' || room.type === 'lecture_hall' || room.type === 'seminar_room' || room.type === 'tutorial_room')) {\n              // Find the grade section name from the assignedGrade ID\n              const assignedGradeSection = gradeSections.find(g => g.id === room.assignedGrade);\n              if (assignedGradeSection) {\n                displayType = assignedGradeSection.name;\n              }\n            }\n            \n            options.push({\n              value: `${building.buildingName} - ${room.name} (${displayType})`,\n              label: `${building.buildingName} - ${room.name} (${displayType})`,\n              building: building.buildingName,\n              room: room.name,\n              type: room.type,\n            });\n          });\n      } else {\n        // If no rooms, add building as location option\n        options.push({\n          value: building.buildingName,\n          label: `${building.buildingName} (Building)`,\n          building: building.buildingName,\n          room: \"General\",\n          type: \"building\",\n        });\n      }\n    });\n\n    return options.sort((a, b) => a.label.localeCompare(b.label));\n  }, [buildings, gradeSections]);\n\n  // Fetch suppliers\n  const { data: suppliers = [] } = useQuery<Supplier[]>({\n    queryKey: [\"/api/schools\", user?.schoolId, \"suppliers\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Fetch asset details with purchase history and assignments\n  const { data: assetDetails } = useQuery({\n    queryKey: [\"/api/assets\", selectedAsset?.id, \"details\"],\n    enabled: !!selectedAsset?.id && showDetailsDialog,\n    queryFn: async () => {\n      const [purchasesResponse, assignmentsResponse] = await Promise.all([\n        apiRequest(\"GET\", `/api/assets/${selectedAsset?.id}/purchases`),\n        apiRequest(\"GET\", `/api/assets/${selectedAsset?.id}/assignments`),\n      ]);\n      \n      const purchases = await purchasesResponse.json();\n      const assignments = await assignmentsResponse.json();\n      \n      // Calculate totals\n      const totalPurchaseCost = purchases.reduce((sum: number, purchase: AssetPurchase) => \n        sum + purchase.totalCost, 0);\n      \n      return {\n        ...selectedAsset,\n        purchases,\n        assignments,\n        totalPurchaseCost,\n        currentValue: totalPurchaseCost,\n      };\n    },\n  });\n\n  // Create asset mutation\n  const createAssetMutation = useMutation({\n    mutationFn: async (data: AssetFormData) => {\n      const response = await apiRequest(\"POST\", `/api/assets`, {\n        ...data,\n        schoolId: user?.schoolId,\n        createdBy: user?.id,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"assets\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"assets\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({ title: \"Success\", description: \"Asset created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Add purchase mutation\n  const addPurchaseMutation = useMutation({\n    mutationFn: async (data: PurchaseFormData & { totalCost: number }) => {\n      const response = await apiRequest(\"POST\", `/api/assets/${selectedAsset?.id}/purchases`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\", selectedAsset?.id, \"details\"] });\n      setShowPurchaseDialog(false);\n      toast({ title: \"Success\", description: \"Purchase added successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Assign asset mutation\n  const assignAssetMutation = useMutation({\n    mutationFn: async (data: AssignmentFormData) => {\n      const response = await apiRequest(\"POST\", `/api/assets/${selectedAsset?.id}/assignments`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"assets\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/assets\", selectedAsset?.id, \"details\"] });\n      setShowAssignDialog(false);\n      toast({ title: \"Success\", description: \"Asset assigned successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Create supplier mutation\n  const createSupplierMutation = useMutation({\n    mutationFn: async (data: SupplierFormData) => {\n      const response = await apiRequest(\"POST\", `/api/schools/${user?.schoolId}/suppliers`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"suppliers\"] });\n      setShowSupplierDialog(false);\n      supplierForm.reset();\n      toast({ title: \"Success\", description: \"Supplier created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Forms\n  const createForm = useForm<AssetFormData>({\n    resolver: zodResolver(assetFormSchema),\n    defaultValues: {\n      totalQuantity: 1,\n      condition: \"Good\",\n    },\n  });\n\n  const purchaseForm = useForm<PurchaseFormData>({\n    resolver: zodResolver(purchaseFormSchema),\n    defaultValues: {\n      quantity: 1,\n      purchaseDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const assignmentForm = useForm<AssignmentFormData>({\n    resolver: zodResolver(assignmentFormSchema),\n    defaultValues: {\n      assignmentType: \"location\",\n      quantity: 1,\n      assignedDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const supplierForm = useForm<SupplierFormData>({\n    resolver: zodResolver(supplierFormSchema),\n    defaultValues: {\n      productTypes: [],\n    },\n  });\n\n  // Filter assets\n  const filteredAssets = (assets as Asset[]).filter((asset: Asset) => {\n    const matchesSearch = !searchTerm || \n      asset.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.category.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      asset.type.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesCategory = filters.category === \"all\" || asset.category === filters.category;\n    const matchesCondition = filters.condition === \"all\" || asset.condition === filters.condition;\n    \n    return matchesSearch && matchesCategory && matchesCondition;\n  });\n\n  const onCreateSubmit = (data: AssetFormData) => {\n    createAssetMutation.mutate(data);\n  };\n\n  const onPurchaseSubmit = (data: PurchaseFormData) => {\n    addPurchaseMutation.mutate({\n      ...data,\n      supplier: data.supplier === \"no-supplier\" ? undefined : data.supplier,\n      totalCost: data.purchasePrice * data.quantity,\n    });\n  };\n\n  const onAssignmentSubmit = (data: AssignmentFormData) => {\n    assignAssetMutation.mutate(data);\n  };\n\n  const onSupplierSubmit = (data: SupplierFormData) => {\n    createSupplierMutation.mutate(data);\n  };\n\n  const openPurchaseDialog = (asset: Asset) => {\n    setSelectedAsset(asset);\n    setShowPurchaseDialog(true);\n  };\n\n  const openAssignDialog = (asset: Asset) => {\n    setSelectedAsset(asset);\n    setShowAssignDialog(true);\n  };\n\n  const openDetailsDialog = (asset: Asset) => {\n    setSelectedAsset(asset);\n    setShowDetailsDialog(true);\n  };\n\n  return (\n    <SchoolLayout title=\"Asset Management\" subtitle=\"Manage school assets and equipment\">\n    <div className=\"space-y-6\" data-testid=\"enhanced-asset-setup\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Enhanced Asset Management</h1>\n          <p className=\"text-gray-600\">\n            Manage assets with quantity tracking, purchase history, and assignments\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => setShowSupplierDialog(true)} variant=\"outline\" data-testid=\"button-manage-suppliers\">\n            <Store className=\"h-4 w-4 mr-2\" />\n            Manage Suppliers\n          </Button>\n          <Button onClick={() => setShowCreateDialog(true)} data-testid=\"button-create-asset\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Create Asset\n          </Button>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search\">Search Assets</Label>\n              <div className=\"relative\">\n                <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search by name, category, or type...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-assets\"\n                />\n              </div>\n            </div>\n            <div className=\"sm:w-48\">\n              <Label htmlFor=\"category-filter\">Category</Label>\n              <Select\n                value={filters.category}\n                onValueChange={(value) => setFilters(prev => ({ ...prev, category: value }))}\n              >\n                <SelectTrigger data-testid=\"select-category-filter\">\n                  <SelectValue placeholder=\"All Categories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"Equipment\">Equipment</SelectItem>\n                  <SelectItem value=\"Furniture\">Furniture</SelectItem>\n                  <SelectItem value=\"Technology\">Technology</SelectItem>\n                  <SelectItem value=\"Sports\">Sports</SelectItem>\n                  <SelectItem value=\"Other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"sm:w-48\">\n              <Label htmlFor=\"condition-filter\">Condition</Label>\n              <Select\n                value={filters.condition}\n                onValueChange={(value) => setFilters(prev => ({ ...prev, condition: value }))}\n              >\n                <SelectTrigger data-testid=\"select-condition-filter\">\n                  <SelectValue placeholder=\"All Conditions\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Conditions</SelectItem>\n                  <SelectItem value=\"Excellent\">Excellent</SelectItem>\n                  <SelectItem value=\"Good\">Good</SelectItem>\n                  <SelectItem value=\"Fair\">Fair</SelectItem>\n                  <SelectItem value=\"Poor\">Poor</SelectItem>\n                  <SelectItem value=\"Damaged\">Damaged</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Assets Grid */}\n      {assetsLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2 mb-4\"></div>\n                <div className=\"h-20 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"flex gap-2\">\n                  <div className=\"h-8 bg-gray-200 rounded flex-1\"></div>\n                  <div className=\"h-8 bg-gray-200 rounded flex-1\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {(filteredAssets as Asset[]).map((asset: Asset) => (\n            <Card key={asset.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                      {asset.name}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {asset.category} • {asset.type}\n                    </p>\n                  </div>\n                  <Badge\n                    variant={\n                      asset.condition === \"Excellent\" ? \"default\" :\n                      asset.condition === \"Good\" ? \"secondary\" :\n                      asset.condition === \"Fair\" ? \"outline\" :\n                      \"destructive\"\n                    }\n                  >\n                    {asset.condition}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"space-y-3\">\n                  {/* Quantity Info */}\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Total Quantity:</span>\n                    <span className=\"font-medium\">{asset.totalQuantity}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Available:</span>\n                    <span className={`font-medium ${\n                      asset.availableQuantity === 0 ? \"text-red-600\" : \n                      asset.availableQuantity < asset.totalQuantity * 0.3 ? \"text-yellow-600\" : \n                      \"text-green-600\"\n                    }`}>\n                      {asset.availableQuantity}\n                    </span>\n                  </div>\n                  \n                  {/* Location */}\n                  {asset.location && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">Location:</span>\n                      <span className=\"font-medium\">{asset.location}</span>\n                    </div>\n                  )}\n\n                  <Separator />\n\n                  {/* Action Buttons */}\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => openDetailsDialog(asset)}\n                      className=\"flex-1\"\n                      data-testid={`button-view-details-${asset.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Details\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => openPurchaseDialog(asset)}\n                      data-testid={`button-add-purchase-${asset.id}`}\n                    >\n                      <DollarSign className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => openAssignDialog(asset)}\n                      disabled={asset.availableQuantity === 0}\n                      data-testid={`button-assign-asset-${asset.id}`}\n                    >\n                      <Users className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {filteredAssets.length === 0 && !assetsLoading && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No assets found</h3>\n            <p className=\"text-gray-600 mb-4\">\n              {searchTerm || filters.category !== \"all\" || filters.condition !== \"all\"\n                ? \"Try adjusting your search or filters\"\n                : \"Get started by creating your first asset\"}\n            </p>\n            {!searchTerm && filters.category === \"all\" && filters.condition === \"all\" && (\n              <Button onClick={() => setShowCreateDialog(true)}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Asset\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Create Asset Dialog */}\n      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create New Asset</DialogTitle>\n          </DialogHeader>\n          <Form {...createForm}>\n            <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Asset Name*</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter asset name\" {...field} data-testid=\"input-asset-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={createForm.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category*</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-asset-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Equipment\">Equipment</SelectItem>\n                          <SelectItem value=\"Furniture\">Furniture</SelectItem>\n                          <SelectItem value=\"Technology\">Technology</SelectItem>\n                          <SelectItem value=\"Sports\">Sports</SelectItem>\n                          <SelectItem value=\"Other\">Other</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type*</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Laptop, Chair, Ball\" {...field} data-testid=\"input-asset-type\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"condition\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Condition*</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-asset-condition\">\n                            <SelectValue placeholder=\"Select condition\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Excellent\">Excellent</SelectItem>\n                          <SelectItem value=\"Good\">Good</SelectItem>\n                          <SelectItem value=\"Fair\">Fair</SelectItem>\n                          <SelectItem value=\"Poor\">Poor</SelectItem>\n                          <SelectItem value=\"Damaged\">Damaged</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"totalQuantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity*</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-asset-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-asset-location\">\n                            <SelectValue placeholder=\"Select location\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {locationOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              {option.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"serialNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Serial Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter serial number\" {...field} data-testid=\"input-asset-serial\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"brand\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter brand\" {...field} data-testid=\"input-asset-brand\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={createForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Enter asset description\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-asset-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createAssetMutation.isPending}\n                  data-testid=\"button-submit-create-asset\"\n                >\n                  {createAssetMutation.isPending ? \"Creating...\" : \"Create Asset\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Purchase Dialog */}\n      <Dialog open={showPurchaseDialog} onOpenChange={setShowPurchaseDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Add Purchase for {selectedAsset?.name}</DialogTitle>\n          </DialogHeader>\n          <Form {...purchaseForm}>\n            <form onSubmit={purchaseForm.handleSubmit(onPurchaseSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={purchaseForm.control}\n                  name=\"purchaseDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Purchase Date*</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-purchase-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={purchaseForm.control}\n                  name=\"quantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity*</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-purchase-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"purchasePrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Unit Price*</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\"\n                        min=\"0\"\n                        placeholder=\"0.00\"\n                        {...field} \n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        data-testid=\"input-purchase-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"supplier\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Supplier</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-purchase-supplier\">\n                          <SelectValue placeholder=\"Select supplier\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"no-supplier\">No supplier</SelectItem>\n                        {suppliers.map((supplier) => (\n                          <SelectItem key={supplier.id} value={supplier.name}>\n                            {supplier.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"invoiceNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Invoice Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter invoice number\" {...field} data-testid=\"input-purchase-invoice\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowPurchaseDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={addPurchaseMutation.isPending}\n                  data-testid=\"button-submit-add-purchase\"\n                >\n                  {addPurchaseMutation.isPending ? \"Adding...\" : \"Add Purchase\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Assign {selectedAsset?.name}</DialogTitle>\n          </DialogHeader>\n          <Form {...assignmentForm}>\n            <form onSubmit={assignmentForm.handleSubmit(onAssignmentSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={assignmentForm.control}\n                  name=\"quantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity*</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          max={selectedAsset?.availableQuantity || 1}\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-assignment-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500\">\n                        Available: {selectedAsset?.availableQuantity}\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={assignmentForm.control}\n                  name=\"assignedDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assignment Date*</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-assignment-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={assignmentForm.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Location*</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-assignment-location\">\n                          <SelectValue placeholder=\"Select location\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {locationOptions.map((option) => (\n                          <SelectItem key={option.value} value={option.value}>\n                            {option.label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={assignmentForm.control}\n                name=\"assignedTo\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Assigned To</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Person/Department name\" {...field} data-testid=\"input-assignment-assignee\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={assignmentForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Assignment notes\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-assignment-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowAssignDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={assignAssetMutation.isPending}\n                  data-testid=\"button-submit-assign-asset\"\n                >\n                  {assignAssetMutation.isPending ? \"Assigning...\" : \"Assign Asset\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Asset Details Dialog */}\n      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>\n        <DialogContent className=\"sm:max-w-[700px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <History className=\"h-5 w-5\" />\n              {selectedAsset?.name} - Complete History\n            </DialogTitle>\n          </DialogHeader>\n          \n          {assetDetails && (\n            <div className=\"space-y-6\">\n              {/* Asset Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Asset Summary</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Total Cost:</span>\n                      <span className=\"ml-2\">${typeof assetDetails.totalPurchaseCost === 'number' ? assetDetails.totalPurchaseCost.toFixed(2) : \"0.00\"}</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Current Value:</span>\n                      <span className=\"ml-2\">${(assetDetails as any).currentValue?.toFixed(2) || \"0.00\"}</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Total Quantity:</span>\n                      <span className=\"ml-2\">{assetDetails.totalQuantity}</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Available:</span>\n                      <span className=\"ml-2\">{assetDetails.availableQuantity}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Purchase History */}\n              <Accordion type=\"single\" collapsible defaultValue=\"purchases\">\n                <AccordionItem value=\"purchases\">\n                  <AccordionTrigger className=\"text-lg font-semibold\">\n                    Purchase History ({assetDetails.purchases?.length || 0})\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"space-y-3\">\n                      {(assetDetails.purchases as AssetPurchase[])?.map((purchase: AssetPurchase) => (\n                        <Card key={purchase.id}>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                              <div>\n                                <span className=\"font-medium\">Date:</span>\n                                <span className=\"ml-2\">\n                                  {new Date(purchase.purchaseDate).toLocaleDateString()}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Quantity:</span>\n                                <span className=\"ml-2\">{purchase.quantity}</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Unit Price:</span>\n                                <span className=\"ml-2\">${typeof purchase.purchasePrice === 'string' ? purchase.purchasePrice : (typeof purchase.purchasePrice === 'number' ? purchase.purchasePrice.toFixed(2) : '0.00')}</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Total Cost:</span>\n                                <span className=\"ml-2\">${typeof purchase.totalCost === 'string' ? purchase.totalCost : (typeof purchase.totalCost === 'number' ? purchase.totalCost.toFixed(2) : '0.00')}</span>\n                              </div>\n                              {purchase.supplier && (\n                                <div>\n                                  <span className=\"font-medium\">Supplier:</span>\n                                  <span className=\"ml-2\">{purchase.supplier}</span>\n                                </div>\n                              )}\n                              {purchase.invoiceNumber && (\n                                <div>\n                                  <span className=\"font-medium\">Invoice:</span>\n                                  <span className=\"ml-2\">{purchase.invoiceNumber}</span>\n                                </div>\n                              )}\n                            </div>\n                            {purchase.notes && (\n                              <div className=\"mt-2 text-sm\">\n                                <span className=\"font-medium\">Notes:</span>\n                                <p className=\"text-gray-600 mt-1\">{purchase.notes}</p>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      )) || (\n                        <p className=\"text-gray-500 text-center py-4\">No purchase history available</p>\n                      )}\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n\n                {/* Assignment History */}\n                <AccordionItem value=\"assignments\">\n                  <AccordionTrigger className=\"text-lg font-semibold\">\n                    Assignment History ({assetDetails.assignments?.length || 0})\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"space-y-3\">\n                      {(assetDetails.assignments as AssetAssignment[])?.map((assignment: AssetAssignment) => (\n                        <Card key={assignment.id}>\n                          <CardContent className=\"pt-4\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <Badge variant={\n                                assignment.status === 'assigned' ? 'default' : 'secondary'\n                              }>\n                                {assignment.status}\n                              </Badge>\n                            </div>\n                            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                              <div>\n                                <span className=\"font-medium\">Location:</span>\n                                <span className=\"ml-2\">{assignment.location}</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Quantity:</span>\n                                <span className=\"ml-2\">{assignment.quantity}</span>\n                              </div>\n                              <div>\n                                <span className=\"font-medium\">Assigned Date:</span>\n                                <span className=\"ml-2\">\n                                  {new Date(assignment.assignedDate).toLocaleDateString()}\n                                </span>\n                              </div>\n                              {assignment.returnDate && (\n                                <div>\n                                  <span className=\"font-medium\">Returned Date:</span>\n                                  <span className=\"ml-2\">\n                                    {new Date(assignment.returnDate).toLocaleDateString()}\n                                  </span>\n                                </div>\n                              )}\n                              {assignment.assignedTo && (\n                                <div>\n                                  <span className=\"font-medium\">Assigned To:</span>\n                                  <span className=\"ml-2\">{assignment.assignedTo}</span>\n                                </div>\n                              )}\n                            </div>\n                            {assignment.notes && (\n                              <div className=\"mt-2 text-sm\">\n                                <span className=\"font-medium\">Notes:</span>\n                                <p className=\"text-gray-600 mt-1\">{assignment.notes}</p>\n                              </div>\n                            )}\n                          </CardContent>\n                        </Card>\n                      )) || (\n                        <p className=\"text-gray-500 text-center py-4\">No assignment history available</p>\n                      )}\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Supplier Management Dialog */}\n      <Dialog open={showSupplierDialog} onOpenChange={setShowSupplierDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Store className=\"h-5 w-5\" />\n              Manage Suppliers\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Create New Supplier Form */}\n            <Form {...supplierForm}>\n              <form onSubmit={supplierForm.handleSubmit(onSupplierSubmit)} className=\"space-y-4\">\n                <div className=\"text-lg font-semibold\">Add New Supplier</div>\n                \n                <FormField\n                  control={supplierForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supplier Name*</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter supplier name\" {...field} data-testid=\"input-supplier-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={supplierForm.control}\n                  name=\"contactPerson\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Contact Person</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Contact person name\" {...field} data-testid=\"input-supplier-contact\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={supplierForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" placeholder=\"Email address\" {...field} data-testid=\"input-supplier-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={supplierForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Phone number\" {...field} data-testid=\"input-supplier-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={supplierForm.control}\n                  name=\"productTypes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Product Types*</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter types separated by commas (e.g., Electronics, Furniture)\" \n                          {...field}\n                          onChange={(e) => {\n                            const types = e.target.value.split(',').map(s => s.trim()).filter(Boolean);\n                            field.onChange(types);\n                          }}\n                          data-testid=\"input-supplier-product-types\" \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowSupplierDialog(false)}>\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createSupplierMutation.isPending}\n                    data-testid=\"button-submit-supplier\"\n                  >\n                    {createSupplierMutation.isPending ? \"Creating...\" : \"Create Supplier\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n\n            {/* Existing Suppliers List */}\n            {suppliers.length > 0 && (\n              <div className=\"space-y-3\">\n                <Separator />\n                <div className=\"text-lg font-semibold\">Existing Suppliers ({suppliers.length})</div>\n                <div className=\"space-y-2 max-h-[200px] overflow-y-auto\">\n                  {suppliers.map((supplier) => (\n                    <Card key={supplier.id} className=\"p-3\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"space-y-1\">\n                          <div className=\"font-medium\">{supplier.name}</div>\n                          {supplier.contactPerson && (\n                            <div className=\"text-sm text-gray-600\">{supplier.contactPerson}</div>\n                          )}\n                          {supplier.productTypes && supplier.productTypes.length > 0 && (\n                            <div className=\"flex flex-wrap gap-1\">\n                              {supplier.productTypes.map((type, index) => (\n                                <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                                  {type}\n                                </Badge>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n    </SchoolLayout>\n  );\n}","size_bytes":56450},"client/src/pages/school/feature-page.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport SchoolLayout from \"@/components/school/layout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, ArrowLeft, Settings, FileX } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface Feature {\n  id: string;\n  key: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n  menuLinks?: {\n    name: string;\n    href: string;\n    icon?: string;\n    enabled?: boolean;\n  }[];\n}\n\nexport default function FeaturePage() {\n  const { featureName, page } = useParams<{ featureName: string; page?: string }>();\n  const { user } = useAuth();\n  \n  // Fetch enabled features for the school to find the matching feature\n  const { data: features = [], isLoading } = useQuery<Feature[]>({\n    queryKey: [\"/api/schools/features\"],\n    queryFn: () => {\n      const schoolId = user?.schoolId;\n      if (!schoolId) {\n        console.error(\"No school ID found for user\");\n        return [];\n      }\n      return fetch(`/api/schools/features?schoolId=${schoolId}`)\n        .then(res => res.json());\n    },\n    enabled: !!user?.schoolId,\n  });\n\n  if (isLoading) {\n    return (\n      <SchoolLayout title=\"Loading...\" subtitle=\"Please wait\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-slate-600\">Loading feature...</p>\n          </div>\n        </div>\n      </SchoolLayout>\n    );\n  }\n\n  // Find the feature by matching the URL-friendly feature name with the feature key\n  const feature = features.find(f => {\n    const urlFriendlyKey = f.key.toLowerCase().replace(/[^a-z0-9]/g, '-');\n    return urlFriendlyKey === featureName;\n  });\n\n  if (!feature) {\n    return (\n      <SchoolLayout title=\"Feature Not Found\" subtitle=\"The requested feature could not be found\">\n        <div className=\"flex flex-col items-center justify-center min-h-[500px] text-center\">\n          <FileX className=\"h-24 w-24 text-gray-400 mb-6\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Feature Not Found</h1>\n          <p className=\"text-gray-600 mb-6 max-w-md\">\n            The feature \"{featureName}\" is not available or has not been assigned to your school.\n          </p>\n          <Button onClick={() => window.history.back()} className=\"flex items-center gap-2\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Go Back\n          </Button>\n        </div>\n      </SchoolLayout>\n    );\n  }\n\n  // Check if the specific page exists in menu links\n  const currentPage = page || 'dashboard';\n  const menuLink = feature.menuLinks?.find(link => {\n    const linkPage = link.href.split('/').pop() || 'dashboard';\n    return linkPage === currentPage;\n  });\n\n  return (\n    <SchoolLayout \n      title={feature.name} \n      subtitle={page ? `${page.charAt(0).toUpperCase() + page.slice(1)} Page` : \"Feature Overview\"}\n    >\n      <div className=\"space-y-6\">\n        {/* Feature Header */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  {feature.name}\n                  <Badge variant=\"default\">Enabled</Badge>\n                </CardTitle>\n                <CardDescription className=\"mt-2\">\n                  {feature.description}\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Page Not Created Notice */}\n        <Card className=\"border-orange-200 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-orange-800\">\n              <AlertTriangle className=\"h-5 w-5\" />\n              Page Under Development\n            </CardTitle>\n            <CardDescription className=\"text-orange-700\">\n              The \"{currentPage}\" page for {feature.name} has not been created yet.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-white rounded-lg p-4 border border-orange-200\">\n                <h4 className=\"font-medium text-gray-900 mb-2\">Current URL:</h4>\n                <code className=\"text-sm bg-gray-100 px-2 py-1 rounded\">\n                  /school/{featureName}/{currentPage}\n                </code>\n              </div>\n              \n              {feature.menuLinks && feature.menuLinks.length > 0 && (\n                <div className=\"bg-white rounded-lg p-4 border border-orange-200\">\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Available Menu Links:</h4>\n                  <div className=\"space-y-2\">\n                    {feature.menuLinks.map((link, index) => {\n                      const linkPage = link.href.split('/').pop() || 'dashboard';\n                      const isCurrentPage = linkPage === currentPage;\n                      return (\n                        <div key={index} className={`flex items-center justify-between p-2 rounded ${isCurrentPage ? 'bg-orange-100' : 'bg-gray-50'}`}>\n                          <div className=\"flex items-center gap-2\">\n                            <i className={link.icon || 'fas fa-circle'} />\n                            <span className=\"font-medium\">{link.name}</span>\n                            {isCurrentPage && <Badge variant=\"secondary\" className=\"text-xs\">Current</Badge>}\n                          </div>\n                          <code className=\"text-xs text-gray-600\">{link.href}</code>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"text-sm text-orange-700\">\n                <p className=\"font-medium\">To create this page:</p>\n                <ol className=\"list-decimal list-inside mt-2 space-y-1\">\n                  <li>Create a component for the \"{currentPage}\" page</li>\n                  <li>Add routing logic to handle this specific feature page</li>\n                  <li>Implement the feature functionality</li>\n                </ol>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Feature Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Feature Information</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-700\">Feature Key</label>\n                <p className=\"mt-1 text-sm text-gray-900\">{feature.key}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-700\">URL Pattern</label>\n                <p className=\"mt-1 text-sm text-gray-900\">/school/{featureName}/*</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-700\">Status</label>\n                <p className=\"mt-1\">\n                  <Badge variant=\"default\">\n                    {feature.enabled ? \"Enabled\" : \"Disabled\"}\n                  </Badge>\n                </p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-700\">Menu Links</label>\n                <p className=\"mt-1 text-sm text-gray-900\">\n                  {feature.menuLinks?.length || 0} configured\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":7938},"client/src/pages/school/settings.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function SchoolSettingsPage() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/school\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Dashboard</span>\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-slate-900\">School Settings</h1>\n                <p className=\"text-sm text-slate-500\">Configure school preferences</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>School Settings</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-slate-600\">This page is coming soon...</p>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":1569},"client/src/pages/school/users.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function UsersPage() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setLocation(\"/school\")}\n                className=\"flex items-center space-x-2\"\n              >\n                <ArrowLeft className=\"w-4 h-4\" />\n                <span>Back to Dashboard</span>\n              </Button>\n              <div>\n                <h1 className=\"text-lg font-semibold text-slate-900\">Users Management</h1>\n                <p className=\"text-sm text-slate-500\">Manage teachers, students and parents</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Users Management</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-slate-600\">This page is coming soon...</p>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","size_bytes":1571},"client/src/pages/school/features/create.tsx":{"content":"import { SchoolLayout } from \"@/components/school\";\n\nexport default function CreateFeature() {\n  return (\n    <SchoolLayout title=\"Create\" subtitle=\"Create new feature record\">\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">Feature Coming Soon</h3>\n          <p className=\"text-slate-600\">This creation page will be auto-generated based on the feature type.</p>\n        </div>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":535},"client/src/pages/school/features/schedules.tsx":{"content":"import { SchoolLayout } from \"@/components/school\";\n\nexport default function Schedules() {\n  return (\n    <SchoolLayout title=\"Schedules\" subtitle=\"Manage schedules and timetables\">\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h3 className=\"text-lg font-medium text-slate-900 mb-2\">Schedules Coming Soon</h3>\n          <p className=\"text-slate-600\">Schedule management will be auto-generated based on feature requirements.</p>\n        </div>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":547},"client/src/pages/school/features/types.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Search, Edit, Trash2, Settings } from \"lucide-react\";\nimport { SchoolLayout } from \"@/components/school\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface StaffType {\n  id: string;\n  name: string;\n  code: string;\n  description: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nconst staffTypeFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  code: z.string().min(2, \"Code must be at least 2 characters\").max(10, \"Code must be at most 10 characters\"),\n  description: z.string().optional(),\n});\n\ntype StaffTypeFormData = z.infer<typeof staffTypeFormSchema>;\n\nexport default function StaffTypes() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [selectedStaffType, setSelectedStaffType] = useState<StaffType | null>(null);\n\n  // Fetch staff types\n  const { data: staffTypes = [], isLoading } = useQuery<StaffType[]>({\n    queryKey: [\"/api/schools/staff-types\"],\n  });\n\n  // Create staff type mutation\n  const createStaffTypeMutation = useMutation({\n    mutationFn: (data: StaffTypeFormData) => apiRequest(\"/api/schools/staff-types\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/staff-types\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({ title: \"Success\", description: \"Staff type created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create staff type\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update staff type mutation\n  const updateStaffTypeMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: StaffTypeFormData }) => \n      apiRequest(`/api/schools/staff-types/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/staff-types\"] });\n      setShowEditDialog(false);\n      setSelectedStaffType(null);\n      editForm.reset();\n      toast({ title: \"Success\", description: \"Staff type updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update staff type\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Delete staff type mutation\n  const deleteStaffTypeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/schools/staff-types/${id}`, {\n      method: \"DELETE\",\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/staff-types\"] });\n      toast({ title: \"Success\", description: \"Staff type deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete staff type\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Create form\n  const createForm = useForm<StaffTypeFormData>({\n    resolver: zodResolver(staffTypeFormSchema),\n    defaultValues: {\n      name: \"\",\n      code: \"\",\n      description: \"\",\n    },\n  });\n\n  // Edit form\n  const editForm = useForm<StaffTypeFormData>({\n    resolver: zodResolver(staffTypeFormSchema),\n  });\n\n  // Filter staff types based on search query\n  const filteredStaffTypes = staffTypes.filter(type =>\n    type.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    type.code.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    type.description?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleEdit = (staffType: StaffType) => {\n    setSelectedStaffType(staffType);\n    editForm.reset({\n      name: staffType.name,\n      code: staffType.code,\n      description: staffType.description || \"\",\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (staffType: StaffType) => {\n    if (confirm(`Are you sure you want to delete ${staffType.name}?`)) {\n      deleteStaffTypeMutation.mutate(staffType.id);\n    }\n  };\n\n  const onCreateSubmit = (data: StaffTypeFormData) => {\n    createStaffTypeMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: StaffTypeFormData) => {\n    if (selectedStaffType) {\n      updateStaffTypeMutation.mutate({ id: selectedStaffType.id, data });\n    }\n  };\n\n  return (\n    <SchoolLayout title=\"Staff Types\" subtitle=\"Manage different types of staff positions\">\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n          <div className=\"relative w-full sm:w-80\">\n            <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search staff types...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"search-staff-types\"\n            />\n          </div>\n          <Button \n            onClick={() => setShowCreateDialog(true)}\n            data-testid=\"create-staff-type-button\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Staff Type\n          </Button>\n        </div>\n\n        {/* Stats Card */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-2xl font-bold\">{staffTypes.length}</p>\n                <p className=\"text-xs text-muted-foreground\">Total Staff Types</p>\n              </div>\n              <div className=\"text-blue-600\">\n                <Settings className=\"w-8 h-8\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Staff Types Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Staff Types</CardTitle>\n            <CardDescription>\n              {filteredStaffTypes.length} of {staffTypes.length} staff types shown\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div>Loading staff types...</div>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Code</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredStaffTypes.map((staffType) => (\n                    <TableRow key={staffType.id} data-testid={`staff-type-row-${staffType.id}`}>\n                      <TableCell className=\"font-medium\">{staffType.name}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{staffType.code}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-xs truncate\">\n                          {staffType.description || \"No description\"}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={staffType.isActive ? \"default\" : \"secondary\"}>\n                          {staffType.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(staffType)}\n                            data-testid={`edit-staff-type-${staffType.id}`}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(staffType)}\n                            data-testid={`delete-staff-type-${staffType.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {filteredStaffTypes.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                        {searchQuery ? 'No staff types match your search.' : 'No staff types found. Add your first staff type!'}\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Staff Type Dialog */}\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Staff Type</DialogTitle>\n              <DialogDescription>\n                Create a new staff type for classification\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Teacher\" data-testid=\"staff-type-name-input\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Code</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., TCH\" data-testid=\"staff-type-code-input\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={createForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Brief description of this staff type...\"\n                          data-testid=\"staff-type-description-input\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createStaffTypeMutation.isPending}\n                    data-testid=\"submit-create-staff-type\"\n                  >\n                    {createStaffTypeMutation.isPending ? \"Creating...\" : \"Create Staff Type\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Staff Type Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Staff Type</DialogTitle>\n              <DialogDescription>\n                Update staff type information\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Teacher\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"code\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Code</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., TCH\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          placeholder=\"Brief description of this staff type...\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowEditDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateStaffTypeMutation.isPending}\n                  >\n                    {updateStaffTypeMutation.isPending ? \"Updating...\" : \"Update Staff Type\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":15967},"client/src/pages/school/setup/index.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { \n  School, \n  GraduationCap, \n  BookOpen, \n  Building, \n  Calendar,\n  Users,\n  Settings\n} from \"lucide-react\";\nimport { SchoolLayout } from \"@/components/school\";\n\nconst setupModules = [\n  {\n    id: \"sections\",\n    title: \"Sections\",\n    description: \"Manage school sections like Primary, Junior Secondary, Senior Secondary\",\n    icon: <School className=\"h-8 w-8\" />,\n    href: \"/school/setup/sections\",\n    color: \"text-blue-600\",\n    bgColor: \"bg-blue-50\",\n  },\n  {\n    id: \"classes\",\n    title: \"Classes\",\n    description: \"Create class levels with sections (e.g., JSS1A, SSS2B)\",\n    icon: <GraduationCap className=\"h-8 w-8\" />,\n    href: \"/school/setup/classes\",\n    color: \"text-green-600\",\n    bgColor: \"bg-green-50\",\n  },\n  {\n    id: \"subjects\",\n    title: \"Subjects\",\n    description: \"Setup subjects with departments and class assignments\",\n    icon: <BookOpen className=\"h-8 w-8\" />,\n    href: \"/school/setup/subjects\",\n    color: \"text-purple-600\",\n    bgColor: \"bg-purple-50\",\n  },\n  {\n    id: \"branches\",\n    title: \"Branches\",\n    description: \"Manage school branches and assign administrators\",\n    icon: <Building className=\"h-8 w-8\" />,\n    href: \"/school/setup/branches\",\n    color: \"text-orange-600\",\n    bgColor: \"bg-orange-50\",\n  },\n  {\n    id: \"academic-years\",\n    title: \"Academic Years\",\n    description: \"Create academic years, terms, and auto-generate weekly calendar\",\n    icon: <Calendar className=\"h-8 w-8\" />,\n    href: \"/school/setup/academic-years\",\n    color: \"text-indigo-600\",\n    bgColor: \"bg-indigo-50\",\n  },\n];\n\nexport default function SchoolSetup() {\n  return (\n    <SchoolLayout title=\"School Setup\" subtitle=\"Configure your school's educational structure\">\n      <div className=\"space-y-6\">\n        {/* Overview Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-slate-100 rounded-lg\">\n                <Settings className=\"h-6 w-6 text-slate-600\" />\n              </div>\n              <div>\n                <CardTitle>School Configuration</CardTitle>\n                <CardDescription>\n                  Set up your school's educational structure and organizational framework\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Setup Modules Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {setupModules.map((module) => (\n            <Card key={module.id} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className={`w-12 h-12 ${module.bgColor} rounded-lg flex items-center justify-center mb-4`}>\n                  <div className={module.color}>\n                    {module.icon}\n                  </div>\n                </div>\n                <CardTitle className=\"text-lg\">{module.title}</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  {module.description}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href={module.href}>\n                  <Button className=\"w-full\" variant=\"outline\" data-testid={`setup-${module.id}`}>\n                    Configure {module.title}\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Setup Progress Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Setup Guide</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"text-sm text-muted-foreground\">\n              <strong>Recommended Setup Order:</strong>\n            </div>\n            <ol className=\"text-sm space-y-2 ml-4 list-decimal text-muted-foreground\">\n              <li><strong>Sections:</strong> Create primary organizational groups (Primary, JSS, SSS)</li>\n              <li><strong>Classes:</strong> Add specific class levels within each section</li>\n              <li><strong>Subjects:</strong> Define subjects and assign them to appropriate classes</li>\n              <li><strong>Academic Years:</strong> Set up current academic year and terms</li>\n              <li><strong>Branches:</strong> Configure additional branches if applicable</li>\n            </ol>\n          </CardContent>\n        </Card>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":4624},"client/src/pages/school/features/[featureId]/index.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Settings, Users, Calendar, BookOpen } from \"lucide-react\";\nimport { SchoolLayout } from \"@/components/school\";\n\ninterface Feature {\n  id: string;\n  name: string;\n  description: string;\n  enabled: boolean;\n}\n\ninterface FeatureAction {\n  id: string;\n  name: string;\n  description: string;\n  href: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\nexport default function FeatureOverview() {\n  const { featureId } = useParams();\n\n  // Fetch feature details\n  const { data: feature } = useQuery<Feature>({\n    queryKey: [`/api/features/${featureId}`],\n  });\n\n  // Generate feature actions based on description\n  const generateActions = (feature: Feature): FeatureAction[] => {\n    if (!feature) return [];\n\n    const actions: FeatureAction[] = [];\n    const description = feature.description.toLowerCase();\n\n    if (description.includes('manage') || description.includes('list')) {\n      actions.push({\n        id: 'list',\n        name: `View ${feature.name.replace(' Management', '')} List`,\n        description: `Browse and manage all ${feature.name.replace(' Management', '').toLowerCase()} records`,\n        href: `/school/features/${featureId}/list`,\n        icon: <BookOpen className=\"h-5 w-5\" />,\n        color: 'bg-blue-500',\n      });\n    }\n\n    if (description.includes('create') || description.includes('add')) {\n      actions.push({\n        id: 'create',\n        name: `Create New ${feature.name.replace(' Management', '')}`,\n        description: `Add a new ${feature.name.replace(' Management', '').toLowerCase()} record`,\n        href: `/school/features/${featureId}/create`,\n        icon: <Plus className=\"h-5 w-5\" />,\n        color: 'bg-green-500',\n      });\n    }\n\n    if (description.includes('assignment') || description.includes('assign')) {\n      actions.push({\n        id: 'assignments',\n        name: 'Assignments',\n        description: 'Manage assignments and allocations',\n        href: `/school/features/${featureId}/assignments`,\n        icon: <Users className=\"h-5 w-5\" />,\n        color: 'bg-purple-500',\n      });\n    }\n\n    if (description.includes('schedule') || description.includes('timetable')) {\n      actions.push({\n        id: 'schedules',\n        name: 'Schedules',\n        description: 'View and manage schedules and timetables',\n        href: `/school/features/${featureId}/schedules`,\n        icon: <Calendar className=\"h-5 w-5\" />,\n        color: 'bg-orange-500',\n      });\n    }\n\n    if (description.includes('type') && feature.name.includes('Staff')) {\n      actions.push({\n        id: 'types',\n        name: 'Staff Types',\n        description: 'Manage different types of staff positions',\n        href: `/school/features/${featureId}/types`,\n        icon: <Settings className=\"h-5 w-5\" />,\n        color: 'bg-indigo-500',\n      });\n    }\n\n    return actions;\n  };\n\n  const actions = feature ? generateActions(feature) : [];\n\n  if (!feature) {\n    return (\n      <SchoolLayout title=\"Loading...\" subtitle=\"Please wait\">\n        <div>Loading feature...</div>\n      </SchoolLayout>\n    );\n  }\n\n  return (\n    <SchoolLayout \n      title={feature.name}\n      subtitle={`Manage ${feature.name.replace(' Management', '').toLowerCase()} for your school`}\n    >\n      <div className=\"space-y-6\">\n        {/* Feature Info */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  {feature.name}\n                  <Badge variant={feature.enabled ? \"default\" : \"secondary\"}>\n                    {feature.enabled ? \"Enabled\" : \"Disabled\"}\n                  </Badge>\n                </CardTitle>\n                <CardDescription className=\"mt-2\">\n                  {feature.description}\n                </CardDescription>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Feature Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {actions.map((action) => (\n            <Card \n              key={action.id}\n              className=\"cursor-pointer hover:shadow-md transition-shadow group\"\n              onClick={() => window.location.href = action.href}\n              data-testid={`feature-action-${action.id}`}\n            >\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className={`p-3 rounded-lg ${action.color} text-white`}>\n                    {action.icon}\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold text-lg group-hover:text-primary transition-colors\">\n                      {action.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {action.description}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Quick Stats */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Stats</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-slate-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-primary\">0</div>\n                <div className=\"text-sm text-muted-foreground\">Total Records</div>\n              </div>\n              <div className=\"text-center p-4 bg-slate-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">0</div>\n                <div className=\"text-sm text-muted-foreground\">Active</div>\n              </div>\n              <div className=\"text-center p-4 bg-slate-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600\">0</div>\n                <div className=\"text-sm text-muted-foreground\">Pending</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":6383},"client/src/pages/school/features/staff-management/list.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Search, Edit, Trash2, Mail, Phone, Calendar } from \"lucide-react\";\nimport { SchoolLayout } from \"@/components/school\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Staff {\n  id: string;\n  employeeId: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  hireDate: string;\n  salary: number;\n  isActive: boolean;\n  staffType: {\n    id: string;\n    name: string;\n    code: string;\n  };\n}\n\ninterface StaffType {\n  id: string;\n  name: string;\n  code: string;\n}\n\nconst staffFormSchema = z.object({\n  employeeId: z.string().min(1, \"Employee ID is required\"),\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\").optional().or(z.literal(\"\")),\n  phone: z.string().optional(),\n  staffTypeId: z.string().min(1, \"Staff type is required\"),\n  hireDate: z.string().min(1, \"Hire date is required\"),\n  salary: z.string().optional(),\n  address: z.string().optional(),\n});\n\ntype StaffFormData = z.infer<typeof staffFormSchema>;\n\nexport default function StaffList() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [selectedStaff, setSelectedStaff] = useState<Staff | null>(null);\n\n  // Fetch staff list\n  const { data: staffList = [], isLoading } = useQuery<Staff[]>({\n    queryKey: [\"/api/schools/staff\"],\n  });\n\n  // Fetch staff types\n  const { data: staffTypes = [] } = useQuery<StaffType[]>({\n    queryKey: [\"/api/schools/staff-types\"],\n  });\n\n  // Create staff mutation\n  const createStaffMutation = useMutation({\n    mutationFn: (data: StaffFormData) => apiRequest(\"/api/schools/staff\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        ...data,\n        salary: data.salary ? parseFloat(data.salary) : null,\n      }),\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/staff\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({ title: \"Success\", description: \"Staff member created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to create staff member\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update staff mutation\n  const updateStaffMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: StaffFormData }) => \n      apiRequest(`/api/schools/staff/${id}`, {\n        method: \"PATCH\",\n        body: JSON.stringify({\n          ...data,\n          salary: data.salary ? parseFloat(data.salary) : null,\n        }),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/staff\"] });\n      setShowEditDialog(false);\n      setSelectedStaff(null);\n      editForm.reset();\n      toast({ title: \"Success\", description: \"Staff member updated successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to update staff member\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Delete staff mutation\n  const deleteStaffMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/schools/staff/${id}`, {\n      method: \"DELETE\",\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools/staff\"] });\n      toast({ title: \"Success\", description: \"Staff member deleted successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Error\", \n        description: error.message || \"Failed to delete staff member\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Create form\n  const createForm = useForm<StaffFormData>({\n    resolver: zodResolver(staffFormSchema),\n    defaultValues: {\n      employeeId: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      staffTypeId: \"\",\n      hireDate: \"\",\n      salary: \"\",\n      address: \"\",\n    },\n  });\n\n  // Edit form\n  const editForm = useForm<StaffFormData>({\n    resolver: zodResolver(staffFormSchema),\n  });\n\n  // Filter staff based on search query\n  const filteredStaff = staffList.filter(staff =>\n    `${staff.firstName} ${staff.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    staff.employeeId.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    staff.email?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    staff.staffType.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleEdit = (staff: Staff) => {\n    setSelectedStaff(staff);\n    editForm.reset({\n      employeeId: staff.employeeId,\n      firstName: staff.firstName,\n      lastName: staff.lastName,\n      email: staff.email || \"\",\n      phone: staff.phone || \"\",\n      staffTypeId: staff.staffType.id,\n      hireDate: staff.hireDate.split('T')[0], // Format for date input\n      salary: staff.salary?.toString() || \"\",\n      address: \"\",\n    });\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (staff: Staff) => {\n    if (confirm(`Are you sure you want to delete ${staff.firstName} ${staff.lastName}?`)) {\n      deleteStaffMutation.mutate(staff.id);\n    }\n  };\n\n  const onCreateSubmit = (data: StaffFormData) => {\n    createStaffMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: StaffFormData) => {\n    if (selectedStaff) {\n      updateStaffMutation.mutate({ id: selectedStaff.id, data });\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-NG', {\n      style: 'currency',\n      currency: 'NGN',\n    }).format(amount);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <SchoolLayout title=\"Staff Management\" subtitle=\"Manage your school staff members\">\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center\">\n          <div className=\"relative w-full sm:w-80\">\n            <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search staff...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"search-staff\"\n            />\n          </div>\n          <Button \n            onClick={() => setShowCreateDialog(true)}\n            data-testid=\"create-staff-button\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Staff Member\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{staffList.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Total Staff</p>\n                </div>\n                <div className=\"text-blue-600\">\n                  <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{staffList.filter(s => s.isActive).length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Active Staff</p>\n                </div>\n                <div className=\"text-green-600\">\n                  <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{staffTypes.length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Staff Types</p>\n                </div>\n                <div className=\"text-purple-600\">\n                  <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-2xl font-bold\">{staffList.filter(s => !s.isActive).length}</p>\n                  <p className=\"text-xs text-muted-foreground\">Inactive Staff</p>\n                </div>\n                <div className=\"text-orange-600\">\n                  <svg className=\"w-8 h-8\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                  </svg>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Staff Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Staff Members</CardTitle>\n            <CardDescription>\n              {filteredStaff.length} of {staffList.length} staff members shown\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div>Loading staff...</div>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Employee ID</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Staff Type</TableHead>\n                    <TableHead>Contact</TableHead>\n                    <TableHead>Hire Date</TableHead>\n                    <TableHead>Salary</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredStaff.map((staff) => (\n                    <TableRow key={staff.id} data-testid={`staff-row-${staff.id}`}>\n                      <TableCell className=\"font-medium\">{staff.employeeId}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{staff.firstName} {staff.lastName}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{staff.staffType.name}</Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          {staff.email && (\n                            <div className=\"flex items-center text-xs text-muted-foreground\">\n                              <Mail className=\"h-3 w-3 mr-1\" />\n                              {staff.email}\n                            </div>\n                          )}\n                          {staff.phone && (\n                            <div className=\"flex items-center text-xs text-muted-foreground\">\n                              <Phone className=\"h-3 w-3 mr-1\" />\n                              {staff.phone}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center text-sm\">\n                          <Calendar className=\"h-3 w-3 mr-1 text-muted-foreground\" />\n                          {formatDate(staff.hireDate)}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {staff.salary ? formatCurrency(staff.salary) : 'Not set'}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={staff.isActive ? \"default\" : \"secondary\"}>\n                          {staff.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(staff)}\n                            data-testid={`edit-staff-${staff.id}`}\n                          >\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(staff)}\n                            data-testid={`delete-staff-${staff.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                  {filteredStaff.length === 0 && (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-8 text-muted-foreground\">\n                        {searchQuery ? 'No staff members match your search.' : 'No staff members found. Add your first staff member!'}\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Staff Dialog */}\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Staff Member</DialogTitle>\n              <DialogDescription>\n                Create a new staff member record\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...createForm}>\n              <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createForm.control}\n                    name=\"employeeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Employee ID</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"employee-id-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"staffTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Staff Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"staff-type-select\">\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {staffTypes.map((type) => (\n                              <SelectItem key={type.id} value={type.id}>\n                                {type.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"first-name-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"last-name-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={createForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" {...field} data-testid=\"email-input\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={createForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"phone-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={createForm.control}\n                    name=\"hireDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Hire Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} data-testid=\"hire-date-input\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={createForm.control}\n                  name=\"salary\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Salary (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"salary-input\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowCreateDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createStaffMutation.isPending}\n                    data-testid=\"submit-create-staff\"\n                  >\n                    {createStaffMutation.isPending ? \"Creating...\" : \"Create Staff\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Staff Dialog */}\n        <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit Staff Member</DialogTitle>\n              <DialogDescription>\n                Update staff member information\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"employeeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Employee ID</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"staffTypeId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Staff Type</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {staffTypes.map((type) => (\n                              <SelectItem key={type.id} value={type.id}>\n                                {type.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={editForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"hireDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Hire Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <FormField\n                  control={editForm.control}\n                  name=\"salary\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Salary (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" step=\"0.01\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <DialogFooter>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setShowEditDialog(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateStaffMutation.isPending}\n                  >\n                    {updateStaffMutation.isPending ? \"Updating...\" : \"Update Staff\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </SchoolLayout>\n  );\n}","size_bytes":27452},"client/src/pages/school/supply-setup.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Plus, Search, Filter, Eye, DollarSign, Package, Edit, Trash2, History, ShoppingCart, TrendingUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport SchoolLayout from \"@/components/school/layout\";\n\n// Supply categories with their types\nconst SUPPLY_CATEGORY_TYPES = {\n  \"Uniforms\": [\"Shirt\", \"Trouser\", \"Complete Set\", \"Tie\", \"Blazer\", \"Skirt\", \"Socks\", \"Shoes\", \"Belt\", \"Other\"],\n  \"Textbooks\": [\"Primary Books\", \"Secondary Books\", \"Workbooks\", \"Reference Books\", \"Study Guides\", \"Past Questions\", \"Other\"],\n  \"Stationery\": [\"Exercise Books\", \"Pens\", \"Pencils\", \"Rulers\", \"Erasers\", \"Notebooks\", \"Files\", \"Paper\", \"Other\"],\n  \"Sports\": [\"Football\", \"Basketball\", \"Tennis Balls\", \"Sports Wear\", \"Equipment\", \"Shoes\", \"Other\"],\n  \"Cleaning\": [\"Detergent\", \"Soap\", \"Mop\", \"Broom\", \"Bucket\", \"Toilet Paper\", \"Hand Sanitizer\", \"Other\"],\n  \"Teaching Materials\": [\"Charts\", \"Markers\", \"Chalk\", \"Board\", \"Projector\", \"Books\", \"Models\", \"Other\"],\n  \"Laboratory\": [\"Chemicals\", \"Equipment\", \"Glassware\", \"Safety Gear\", \"Specimens\", \"Instruments\", \"Other\"],\n  \"Medical\": [\"First Aid\", \"Medicines\", \"Thermometer\", \"Bandages\", \"Antiseptic\", \"Equipment\", \"Other\"],\n  \"Kitchen\": [\"Utensils\", \"Plates\", \"Cups\", \"Cooking Equipment\", \"Food Items\", \"Cleaning Supplies\", \"Other\"],\n  \"Other\": [\"Custom Item\"]\n};\n\nconst SUPPLY_CATEGORIES = Object.keys(SUPPLY_CATEGORY_TYPES);\n\n// Supply units\nconst SUPPLY_UNITS = [\n  \"piece\",\n  \"set\", \n  \"pair\",\n  \"kg\",\n  \"g\",\n  \"liter\",\n  \"ml\",\n  \"meter\",\n  \"cm\",\n  \"box\",\n  \"pack\",\n  \"dozen\",\n  \"bundle\",\n  \"roll\"\n];\n\n// Usage types\nconst USAGE_TYPES = [\n  \"issued\",\n  \"sold\", \n  \"consumed\",\n  \"lost\",\n  \"damaged\"\n];\n\n// Supply form schema\nconst supplyFormSchema = z.object({\n  name: z.string().min(1, \"Supply name is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  customCategory: z.string().optional(),\n  type: z.string().min(1, \"Type is required\"),\n  customType: z.string().optional(),\n  unit: z.string().min(1, \"Unit is required\"),\n  minimumStock: z.number().min(0, \"Minimum stock must be positive\").default(0),\n  maximumStock: z.number().min(1, \"Maximum stock must be positive\").default(1000),\n  location: z.string().optional(),\n  roomId: z.string().optional(),\n  buildingId: z.string().optional(),\n  supplier: z.string().optional(),\n  notes: z.string().optional(),\n});\n\n// Room assignment form schema\nconst roomAssignmentFormSchema = z.object({\n  buildingId: z.string().min(1, \"Building is required\"),\n  roomId: z.string().min(1, \"Room is required\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  notes: z.string().optional(),\n});\n\n// Purchase form schema\nconst purchaseFormSchema = z.object({\n  purchaseDate: z.string().min(1, \"Purchase date is required\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  unitPrice: z.number().min(0, \"Price must be positive\"),\n  supplier: z.string().optional(),\n  invoiceNumber: z.string().optional(),\n  notes: z.string().optional(),\n});\n\n// Usage form schema\nconst usageFormSchema = z.object({\n  usageType: z.enum([\"issued\", \"sold\", \"consumed\", \"lost\", \"damaged\"]),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  recipient: z.string().optional(),\n  purpose: z.string().optional(),\n  usageDate: z.string().min(1, \"Usage date is required\"),\n  notes: z.string().optional(),\n});\n\ntype SupplyFormData = z.infer<typeof supplyFormSchema>;\ntype PurchaseFormData = z.infer<typeof purchaseFormSchema>;\ntype UsageFormData = z.infer<typeof usageFormSchema>;\ntype RoomAssignmentFormData = z.infer<typeof roomAssignmentFormSchema>;\n\ninterface Supply {\n  id: string;\n  name: string;\n  description?: string;\n  category: string;\n  type: string;\n  unit: string;\n  currentStock: number;\n  minimumStock: number;\n  maximumStock: number;\n  unitPrice?: number;\n  supplier?: string;\n  location?: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface SupplyPurchase {\n  id: string;\n  purchaseDate: string;\n  quantity: number;\n  unitPrice: number;\n  totalCost: number;\n  supplier?: string;\n  invoiceNumber?: string;\n  notes?: string;\n  createdAt: string;\n}\n\ninterface SupplyUsage {\n  id: string;\n  usageType: string;\n  quantity: number;\n  recipient?: string;\n  purpose?: string;\n  usageDate: string;\n  notes?: string;\n  createdAt: string;\n}\n\nexport default function SupplySetup() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedSupply, setSelectedSupply] = useState<Supply | null>(null);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showPurchaseDialog, setShowPurchaseDialog] = useState(false);\n  const [showUsageDialog, setShowUsageDialog] = useState(false);\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false);\n  const [showRoomAssignmentDialog, setShowRoomAssignmentDialog] = useState(false);\n  const [filters, setFilters] = useState({ category: \"all\", stockLevel: \"all\" });\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n  const [selectedType, setSelectedType] = useState<string>(\"\");\n\n  // Fetch supplies\n  const { data: supplies = [], isLoading, error } = useQuery<Supply[]>({\n    queryKey: [\"/api/schools\", user?.schoolId, \"supplies\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Fetch suppliers for dropdown\n  const { data: suppliers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/schools\", user?.schoolId, \"suppliers\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Fetch storage rooms for room assignment\n  const { data: storageRooms = [] } = useQuery<any[]>({\n    queryKey: [\"/api/schools\", user?.schoolId, \"storage-rooms\"],\n    enabled: !!user?.schoolId,\n  });\n\n  // Forms\n  const createForm = useForm<SupplyFormData>({\n    resolver: zodResolver(supplyFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      customCategory: \"\",\n      type: \"\",\n      customType: \"\",\n      unit: \"piece\",\n      minimumStock: 0,\n      maximumStock: 1000,\n      location: \"\",\n      supplier: \"\",\n      notes: \"\",\n    },\n  });\n\n  const purchaseForm = useForm<PurchaseFormData>({\n    resolver: zodResolver(purchaseFormSchema),\n    defaultValues: {\n      purchaseDate: new Date().toISOString().split('T')[0],\n      quantity: 1,\n      unitPrice: 0,\n      supplier: \"\",\n      invoiceNumber: \"\",\n      notes: \"\",\n    },\n  });\n\n  const usageForm = useForm<UsageFormData>({\n    resolver: zodResolver(usageFormSchema),\n    defaultValues: {\n      usageType: \"issued\",\n      quantity: 1,\n      recipient: \"\",\n      purpose: \"\",\n      usageDate: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    },\n  });\n\n  const roomAssignmentForm = useForm<RoomAssignmentFormData>({\n    resolver: zodResolver(roomAssignmentFormSchema),\n    defaultValues: {\n      buildingId: \"\",\n      roomId: \"\",\n      quantity: 1,\n      notes: \"\",\n    },\n  });\n\n  // Create supply mutation\n  const createSupplyMutation = useMutation({\n    mutationFn: async (data: SupplyFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/supplies\", {\n        ...data,\n        schoolId: user?.schoolId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"supplies\"] });\n      setShowCreateDialog(false);\n      createForm.reset();\n      toast({ title: \"Success\", description: \"Supply created successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Add purchase mutation\n  const addPurchaseMutation = useMutation({\n    mutationFn: async (data: PurchaseFormData) => {\n      const totalCost = data.quantity * data.unitPrice;\n      const response = await apiRequest(\"POST\", `/api/supplies/${selectedSupply?.id}/purchases`, {\n        ...data,\n        totalCost,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"supplies\"] });\n      setShowPurchaseDialog(false);\n      purchaseForm.reset();\n      toast({ title: \"Success\", description: \"Purchase recorded successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Record usage mutation\n  const recordUsageMutation = useMutation({\n    mutationFn: async (data: UsageFormData) => {\n      const response = await apiRequest(\"POST\", `/api/supplies/${selectedSupply?.id}/usage`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"supplies\"] });\n      setShowUsageDialog(false);\n      usageForm.reset();\n      toast({ title: \"Success\", description: \"Usage recorded successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Room assignment mutation\n  const assignRoomMutation = useMutation({\n    mutationFn: async (data: RoomAssignmentFormData) => {\n      const response = await apiRequest(\"POST\", `/api/supplies/${selectedSupply?.id}/room-assignments`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"supplies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/schools\", user?.schoolId, \"storage-rooms\"] });\n      setShowRoomAssignmentDialog(false);\n      roomAssignmentForm.reset();\n      toast({ title: \"Success\", description: \"Supply assigned to room successfully\" });\n    },\n    onError: (error: any) => {\n      toast({ title: \"Error\", description: error.message, variant: \"destructive\" });\n    },\n  });\n\n  // Form handlers\n  const onCreateSubmit = (data: SupplyFormData) => {\n    // Process custom category and type\n    const finalCategory = data.category === \"Other\" ? (data.customCategory || \"Other\") : data.category;\n    const finalType = data.type === \"Other\" ? (data.customType || \"Other\") : data.type;\n    \n    const processedData = {\n      ...data,\n      category: finalCategory,\n      type: finalType,\n      // Remove the custom fields from submission\n      customCategory: undefined,\n      customType: undefined\n    };\n    \n    createSupplyMutation.mutate(processedData);\n  };\n\n  const onPurchaseSubmit = (data: PurchaseFormData) => {\n    addPurchaseMutation.mutate(data);\n  };\n\n  const onUsageSubmit = (data: UsageFormData) => {\n    recordUsageMutation.mutate(data);\n  };\n\n  const onRoomAssignmentSubmit = (data: RoomAssignmentFormData) => {\n    assignRoomMutation.mutate(data);\n  };\n\n  // Handler functions for dialog opening\n  const handleOpenPurchaseDialog = (supply: Supply) => {\n    setSelectedSupply(supply);\n    purchaseForm.reset({\n      purchaseDate: new Date().toISOString().split('T')[0],\n      quantity: 1,\n      unitPrice: supply.unitPrice || 0,\n      supplier: supply.supplier || \"\",\n      invoiceNumber: \"\",\n      notes: \"\",\n    });\n    setShowPurchaseDialog(true);\n  };\n\n  const handleOpenUsageDialog = (supply: Supply) => {\n    setSelectedSupply(supply);\n    usageForm.reset({\n      usageType: \"issued\",\n      quantity: 1,\n      recipient: \"\",\n      purpose: \"\",\n      usageDate: new Date().toISOString().split('T')[0],\n      notes: \"\",\n    });\n    setShowUsageDialog(true);\n  };\n\n  // Filter supplies\n  const filteredSupplies = supplies.filter((supply) => {\n    const matchesSearch = supply.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         supply.category.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = filters.category === \"all\" || supply.category === filters.category;\n    \n    let matchesStockLevel = true;\n    if (filters.stockLevel === \"low\") {\n      matchesStockLevel = supply.currentStock <= supply.minimumStock;\n    } else if (filters.stockLevel === \"out\") {\n      matchesStockLevel = supply.currentStock === 0;\n    } else if (filters.stockLevel === \"adequate\") {\n      matchesStockLevel = supply.currentStock > supply.minimumStock;\n    }\n    \n    return matchesSearch && matchesCategory && matchesStockLevel;\n  });\n\n  // Get stock status\n  const getStockStatus = (supply: Supply) => {\n    if (supply.currentStock === 0) return { status: \"Out of Stock\", color: \"bg-red-500\" };\n    if (supply.currentStock <= supply.minimumStock) return { status: \"Low Stock\", color: \"bg-yellow-500\" };\n    return { status: \"In Stock\", color: \"bg-green-500\" };\n  };\n\n\n\n  if (isLoading) return <SchoolLayout title=\"Supply Management\"><div>Loading supplies...</div></SchoolLayout>;\n  if (error) return <SchoolLayout title=\"Supply Management\"><div>Error loading supplies</div></SchoolLayout>;\n\n  return (\n    <SchoolLayout title=\"Supply Management\">\n      <div className=\"container mx-auto py-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Supply Management</h1>\n            <p className=\"text-gray-600 mt-1\">Manage school supplies, track inventory and purchases</p>\n          </div>\n          <Button onClick={() => {\n            setSelectedCategory(\"\");\n            setSelectedType(\"\");\n            createForm.reset();\n            setShowCreateDialog(true);\n          }} data-testid=\"button-add-supply\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Supply\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Total Supplies</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{supplies.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Low Stock Items</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {supplies.filter((s) => s.currentStock <= s.minimumStock && s.currentStock > 0).length}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Out of Stock</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">\n                {supplies.filter((s) => s.currentStock === 0).length}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-500\">Total Value</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                ${supplies.reduce((sum, s) => sum + ((s.unitPrice || 0) * s.currentStock), 0).toFixed(2)}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Search */}\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search supplies...\"\n                    className=\"pl-9\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    data-testid=\"input-search-supplies\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Select value={filters.category} onValueChange={(value) => setFilters(prev => ({ ...prev, category: value }))}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-category-filter\">\n                    <SelectValue placeholder=\"Category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {SUPPLY_CATEGORIES.map((category) => (\n                      <SelectItem key={category} value={category}>\n                        {category}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                \n                <Select value={filters.stockLevel} onValueChange={(value) => setFilters(prev => ({ ...prev, stockLevel: value }))}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-stock-filter\">\n                    <SelectValue placeholder=\"Stock Level\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Stock</SelectItem>\n                    <SelectItem value=\"adequate\">In Stock</SelectItem>\n                    <SelectItem value=\"low\">Low Stock</SelectItem>\n                    <SelectItem value=\"out\">Out of Stock</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Supplies Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredSupplies.map((supply: Supply) => {\n            const stockStatus = getStockStatus(supply);\n            return (\n              <Card key={supply.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg font-semibold truncate\">{supply.name}</CardTitle>\n                      <p className=\"text-sm text-gray-600 mt-1\">{supply.category} • {supply.type}</p>\n                    </div>\n                    <Badge className={`${stockStatus.color} text-white text-xs`}>\n                      {stockStatus.status}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                \n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-500\">Current Stock:</span>\n                      <div className=\"font-semibold\">{supply.currentStock} {supply.unit}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Unit Price:</span>\n                      <div className=\"font-semibold\">${supply.unitPrice?.toFixed(2) || \"0.00\"}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Min Stock:</span>\n                      <div className=\"font-semibold\">{supply.minimumStock} {supply.unit}</div>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-500\">Total Value:</span>\n                      <div className=\"font-semibold\">${((supply.unitPrice || 0) * supply.currentStock).toFixed(2)}</div>\n                    </div>\n                  </div>\n                  \n                  {supply.description && (\n                    <p className=\"text-sm text-gray-600 truncate\">{supply.description}</p>\n                  )}\n                  \n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleOpenPurchaseDialog(supply)}\n                      data-testid={`button-purchase-${supply.id}`}\n                    >\n                      <ShoppingCart className=\"h-4 w-4 mr-1\" />\n                      Purchase\n                    </Button>\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleOpenUsageDialog(supply)}\n                      data-testid={`button-usage-${supply.id}`}\n                    >\n                      <TrendingUp className=\"h-4 w-4 mr-1\" />\n                      Usage\n                    </Button>\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedSupply(supply);\n                        setShowRoomAssignmentDialog(true);\n                        roomAssignmentForm.setValue(\"quantity\", Math.min(supply.currentStock, 1));\n                      }}\n                      data-testid={`button-assign-room-${supply.id}`}\n                    >\n                      <Package className=\"h-4 w-4 mr-1\" />\n                      Assign Room\n                    </Button>\n                    \n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedSupply(supply);\n                        setShowDetailsDialog(true);\n                      }}\n                      data-testid={`button-details-${supply.id}`}\n                    >\n                      <Eye className=\"h-4 w-4 mr-1\" />\n                      Details\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        {filteredSupplies.length === 0 && (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No supplies found</h3>\n              <p className=\"text-gray-600\">\n                {searchTerm || filters.category !== \"all\" || filters.stockLevel !== \"all\"\n                  ? \"Try adjusting your search or filters\"\n                  : \"Get started by adding your first supply item\"\n                }\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Create Supply Dialog */}\n      <Dialog open={showCreateDialog} onOpenChange={(open) => {\n        setShowCreateDialog(open);\n        if (!open) {\n          setSelectedCategory(\"\");\n          setSelectedType(\"\");\n          createForm.reset();\n        }\n      }}>\n        <DialogContent className=\"sm:max-w-[600px]\">\n          <DialogHeader>\n            <DialogTitle>Add New Supply</DialogTitle>\n          </DialogHeader>\n          <Form {...createForm}>\n            <form onSubmit={createForm.handleSubmit(onCreateSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Supply Name*</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter supply name\" {...field} data-testid=\"input-supply-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category*</FormLabel>\n                      <Select onValueChange={(value) => {\n                        field.onChange(value);\n                        setSelectedCategory(value);\n                        // Reset type when category changes\n                        createForm.setValue(\"type\", \"\");\n                        createForm.setValue(\"customType\", \"\");\n                        setSelectedType(\"\");\n                      }} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-supply-category\">\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {SUPPLY_CATEGORIES.map((category) => (\n                            <SelectItem key={category} value={category}>\n                              {category}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Custom Category Input for \"Other\" */}\n                {selectedCategory === \"Other\" && (\n                  <FormField\n                    control={createForm.control}\n                    name=\"customCategory\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Custom Category*</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter custom category\" {...field} data-testid=\"input-custom-category\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"type\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Type*</FormLabel>\n                      {selectedCategory && SUPPLY_CATEGORY_TYPES[selectedCategory as keyof typeof SUPPLY_CATEGORY_TYPES] ? (\n                        <Select onValueChange={(value) => {\n                          field.onChange(value);\n                          setSelectedType(value);\n                          if (value !== \"Other\") {\n                            createForm.setValue(\"customType\", \"\");\n                          }\n                        }} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-supply-type\">\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {SUPPLY_CATEGORY_TYPES[selectedCategory as keyof typeof SUPPLY_CATEGORY_TYPES].map((type: string) => (\n                              <SelectItem key={type} value={type}>\n                                {type}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <FormControl>\n                          <Input placeholder=\"e.g. Polo Shirt, Exercise Book\" {...field} data-testid=\"input-supply-type\" />\n                        </FormControl>\n                      )}\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Custom Type Input for \"Other\" */}\n                {selectedType === \"Other\" && (\n                  <FormField\n                    control={createForm.control}\n                    name=\"customType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Custom Type*</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter custom type\" {...field} data-testid=\"input-custom-type\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n\n                <FormField\n                  control={createForm.control}\n                  name=\"unit\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Unit*</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-supply-unit\">\n                            <SelectValue placeholder=\"Select unit\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {SUPPLY_UNITS.map((unit) => (\n                            <SelectItem key={unit} value={unit}>\n                              {unit}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={createForm.control}\n                  name=\"minimumStock\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Minimum Stock</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"0\"\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-minimum-stock\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"maximumStock\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Maximum Stock</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1000)}\n                          data-testid=\"input-maximum-stock\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={createForm.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Storage Location</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g. Store Room A\" {...field} data-testid=\"input-supply-location\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={createForm.control}\n                name=\"supplier\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Default Supplier</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-supply-supplier\">\n                          <SelectValue placeholder=\"Select supplier\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No supplier</SelectItem>\n                        {suppliers.map((supplier: any) => (\n                          <SelectItem key={supplier.id} value={supplier.name}>\n                            {supplier.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Additional details about the supply\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-supply-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={createForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Any additional notes\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-supply-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createSupplyMutation.isPending}\n                  data-testid=\"button-submit-create-supply\"\n                >\n                  {createSupplyMutation.isPending ? \"Creating...\" : \"Create Supply\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Purchase Dialog */}\n      <Dialog open={showPurchaseDialog} onOpenChange={setShowPurchaseDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Record Purchase for {selectedSupply?.name}</DialogTitle>\n          </DialogHeader>\n          <Form {...purchaseForm}>\n            <form onSubmit={purchaseForm.handleSubmit(onPurchaseSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={purchaseForm.control}\n                  name=\"purchaseDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Purchase Date*</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-purchase-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={purchaseForm.control}\n                  name=\"quantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity*</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-purchase-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500\">\n                        Unit: {selectedSupply?.unit}\n                      </p>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"unitPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Unit Price*</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\"\n                        min=\"0\"\n                        placeholder=\"0.00\"\n                        {...field} \n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        data-testid=\"input-purchase-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"supplier\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Supplier</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-purchase-supplier\">\n                          <SelectValue placeholder=\"Select supplier\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"none\">No supplier</SelectItem>\n                        {suppliers.map((supplier: any) => (\n                          <SelectItem key={supplier.id} value={supplier.name}>\n                            {supplier.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"invoiceNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Invoice Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter invoice number\" {...field} data-testid=\"input-invoice-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={purchaseForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Purchase notes\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-purchase-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"bg-gray-50 p-3 rounded-md\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Total Cost:</span>\n                  <span className=\"font-semibold\">\n                    ${((purchaseForm.watch(\"quantity\") || 0) * (purchaseForm.watch(\"unitPrice\") || 0)).toFixed(2)}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowPurchaseDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={addPurchaseMutation.isPending}\n                  data-testid=\"button-submit-purchase\"\n                >\n                  {addPurchaseMutation.isPending ? \"Recording...\" : \"Record Purchase\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Usage Dialog */}\n      <Dialog open={showUsageDialog} onOpenChange={setShowUsageDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Record Usage for {selectedSupply?.name}</DialogTitle>\n          </DialogHeader>\n          <Form {...usageForm}>\n            <form onSubmit={usageForm.handleSubmit(onUsageSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={usageForm.control}\n                  name=\"usageType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Usage Type*</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-usage-type\">\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {USAGE_TYPES.map((type) => (\n                            <SelectItem key={type} value={type}>\n                              {type.charAt(0).toUpperCase() + type.slice(1)}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={usageForm.control}\n                  name=\"quantity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Quantity*</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1\"\n                          max={selectedSupply?.currentStock || 1}\n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                          data-testid=\"input-usage-quantity\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500\">\n                        Available: {selectedSupply?.currentStock} {selectedSupply?.unit}\n                      </p>\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={usageForm.control}\n                name=\"usageDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Usage Date*</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-usage-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={usageForm.control}\n                name=\"recipient\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Recipient</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Who received the supplies\" {...field} data-testid=\"input-usage-recipient\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={usageForm.control}\n                name=\"purpose\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Purpose</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Purpose of usage\" {...field} data-testid=\"input-usage-purpose\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={usageForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Usage notes\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-usage-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowUsageDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={recordUsageMutation.isPending}\n                  data-testid=\"button-submit-usage\"\n                >\n                  {recordUsageMutation.isPending ? \"Recording...\" : \"Record Usage\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Room Assignment Dialog */}\n      <Dialog open={showRoomAssignmentDialog} onOpenChange={setShowRoomAssignmentDialog}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Assign {selectedSupply?.name} to Storage Room</DialogTitle>\n          </DialogHeader>\n          <Form {...roomAssignmentForm}>\n            <form onSubmit={roomAssignmentForm.handleSubmit(onRoomAssignmentSubmit)} className=\"space-y-4\">\n              <FormField\n                control={roomAssignmentForm.control}\n                name=\"buildingId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Building*</FormLabel>\n                    <Select \n                      onValueChange={(value) => {\n                        field.onChange(value);\n                        roomAssignmentForm.setValue(\"roomId\", \"\");\n                      }} \n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-building\">\n                          <SelectValue placeholder=\"Select building\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Array.from(new Set(storageRooms.map(room => room.buildingId))).map((buildingId) => {\n                          const building = storageRooms.find(room => room.buildingId === buildingId);\n                          return (\n                            <SelectItem key={buildingId} value={buildingId}>\n                              {building?.buildingName}\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={roomAssignmentForm.control}\n                name=\"roomId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Storage Room*</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-room\">\n                          <SelectValue placeholder=\"Select storage room\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {storageRooms\n                          .filter(room => room.buildingId === roomAssignmentForm.watch(\"buildingId\"))\n                          .map((room) => (\n                            <SelectItem key={room.roomId} value={room.roomId}>\n                              {room.roomName} (Floor {room.floor}) - Available: {room.availableCapacity}\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={roomAssignmentForm.control}\n                name=\"quantity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantity*</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Enter quantity\"\n                        {...field}\n                        min={1}\n                        max={selectedSupply?.currentStock || 1}\n                        onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                        data-testid=\"input-assignment-quantity\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={roomAssignmentForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Assignment notes\"\n                        className=\"resize-none\"\n                        {...field}\n                        data-testid=\"textarea-assignment-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setShowRoomAssignmentDialog(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={assignRoomMutation.isPending}\n                  data-testid=\"button-submit-assignment\"\n                >\n                  {assignRoomMutation.isPending ? \"Assigning...\" : \"Assign to Room\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </SchoolLayout>\n  );\n}","size_bytes":52262}}}